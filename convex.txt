# Convex guidelines
## Function guidelines
### New function syntax
- ALWAYS use the new function syntax for Convex functions. For example:
```typescript
import { query } from "./_generated/server";
import { v } from "convex/values";
export const f = query({
    args: {},
    returns: v.null(),
    handler: async (ctx, args) => {
    // Function body
    },
});
```

### Http endpoint syntax
- HTTP endpoints are defined in `convex/http.ts` and require an `httpAction` decorator. For example:
```typescript
import { httpRouter } from "convex/server";
import { httpAction } from "./_generated/server";
const http = httpRouter();
http.route({
    path: "/echo",
    method: "POST",
    handler: httpAction(async (ctx, req) => {
    const body = await req.bytes();
    return new Response(body, { status: 200 });
    }),
});
```
- HTTP endpoints are always registered at the exact path you specify in the `path` field. For example, if you specify `/api/someRoute`, the endpoint will be registered at `/api/someRoute`.

### Validators
- Below is an example of an array validator:
```typescript
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
args: {
    simpleArray: v.array(v.union(v.string(), v.number())),
},
handler: async (ctx, args) => {
    //...
},
});
```
- Below is an example of a schema with validators that codify a discriminated union type:
```typescript
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
    results: defineTable(
        v.union(
            v.object({
                kind: v.literal("error"),
                errorMessage: v.string(),
            }),
            v.object({
                kind: v.literal("success"),
                value: v.number(),
            }),
        ),
    )
});
```
- Always use the `v.null()` validator when returning a null value. Below is an example query that returns a null value:
```typescript
import { query } from "./_generated/server";
import { v } from "convex/values";

export const exampleQuery = query({
  args: {},
  returns: v.null(),
  handler: async (ctx, args) => {
      console.log("This query returns a null value");
      return null;
  },
});
```
- Here are the valid Convex types along with their respective validators:
Convex Type  | TS/JS type  |  Example Usage         | Validator for argument validation and schemas  | Notes                                                                                                                                                                                                 |
| ----------- | ------------| -----------------------| -----------------------------------------------| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Id          | string      | `doc._id`              | `v.id(tableName)`                              |                                                                                                                                                                                                       |
| Null        | null        | `null`                 | `v.null()`                                     | JavaScript's `undefined` is not a valid Convex value. Functions the return `undefined` or do not return will return `null` when called from a client. Use `null` instead.                             |
| Int64       | bigint      | `3n`                   | `v.int64()`                                    | Int64s only support BigInts between -2^63 and 2^63-1. Convex supports `bigint`s in most modern browsers.                                                                                              |
| Float64     | number      | `3.1`                  | `v.number()`                                   | Convex supports all IEEE-754 double-precision floating point numbers (such as NaNs). Inf and NaN are JSON serialized as strings.                                                                      |
| Boolean     | boolean     | `true`                 | `v.boolean()`                                  |
| String      | string      | `"abc"`                | `v.string()`                                   | Strings are stored as UTF-8 and must be valid Unicode sequences. Strings must be smaller than the 1MB total size limit when encoded as UTF-8.                                                         |
| Bytes       | ArrayBuffer | `new ArrayBuffer(8)`   | `v.bytes()`                                    | Convex supports first class bytestrings, passed in as `ArrayBuffer`s. Bytestrings must be smaller than the 1MB total size limit for Convex types.                                                     |
| Array       | Array]      | `[1, 3.2, "abc"]`      | `v.array(values)`                              | Arrays can have at most 8192 values.                                                                                                                                                                  |
| Object      | Object      | `{a: "abc"}`           | `v.object({property: value})`                  | Convex only supports "plain old JavaScript objects" (objects that do not have a custom prototype). Objects can have at most 1024 entries. Field names must be nonempty and not start with "$" or "_". |
| Record      | Record      | `{"a": "1", "b": "2"}` | `v.record(keys, values)`                       | Records are objects at runtime, but can have dynamic keys. Keys must be only ASCII characters, nonempty, and not start with "$" or "_".                                                               |

### Function registration
- Use `internalQuery`, `internalMutation`, and `internalAction` to register internal functions. These functions are private and aren't part of an app's API. They can only be called by other Convex functions. These functions are always imported from `./_generated/server`.
- Use `query`, `mutation`, and `action` to register public functions. These functions are part of the public API and are exposed to the public Internet. Do NOT use `query`, `mutation`, or `action` to register sensitive internal functions that should be kept private.
- You CANNOT register a function through the `api` or `internal` objects.
- ALWAYS include argument and return validators for all Convex functions. This includes all of `query`, `internalQuery`, `mutation`, `internalMutation`, `action`, and `internalAction`. If a function doesn't return anything, include `returns: v.null()` as its output validator.
- If the JavaScript implementation of a Convex function doesn't have a return value, it implicitly returns `null`.

### Function calling
- Use `ctx.runQuery` to call a query from a query, mutation, or action.
- Use `ctx.runMutation` to call a mutation from a mutation or action.
- Use `ctx.runAction` to call an action from an action.
- ONLY call an action from another action if you need to cross runtimes (e.g. from V8 to Node). Otherwise, pull out the shared code into a helper async function and call that directly instead.
- Try to use as few calls from actions to queries and mutations as possible. Queries and mutations are transactions, so splitting logic up into multiple calls introduces the risk of race conditions.
- All of these calls take in a `FunctionReference`. Do NOT try to pass the callee function directly into one of these calls.
- When using `ctx.runQuery`, `ctx.runMutation`, or `ctx.runAction` to call a function in the same file, specify a type annotation on the return value to work around TypeScript circularity limitations. For example,
```
export const f = query({
  args: { name: v.string() },
  returns: v.string(),
  handler: async (ctx, args) => {
    return "Hello " + args.name;
  },
});

export const g = query({
  args: {},
  returns: v.null(),
  handler: async (ctx, args) => {
    const result: string = await ctx.runQuery(api.example.f, { name: "Bob" });
    return null;
  },
});
```

### Function references
- Function references are pointers to registered Convex functions.
- Use the `api` object defined by the framework in `convex/_generated/api.ts` to call public functions registered with `query`, `mutation`, or `action`.
- Use the `internal` object defined by the framework in `convex/_generated/api.ts` to call internal (or private) functions registered with `internalQuery`, `internalMutation`, or `internalAction`.
- Convex uses file-based routing, so a public function defined in `convex/example.ts` named `f` has a function reference of `api.example.f`.
- A private function defined in `convex/example.ts` named `g` has a function reference of `internal.example.g`.
- Functions can also registered within directories nested within the `convex/` folder. For example, a public function `h` defined in `convex/messages/access.ts` has a function reference of `api.messages.access.h`.

### Api design
- Convex uses file-based routing, so thoughtfully organize files with public query, mutation, or action functions within the `convex/` directory.
- Use `query`, `mutation`, and `action` to define public functions.
- Use `internalQuery`, `internalMutation`, and `internalAction` to define private, internal functions.

### Pagination
- Paginated queries are queries that return a list of results in incremental pages.
- You can define pagination using the following syntax:

```ts
import { v } from "convex/values";
import { query, mutation } from "./_generated/server";
import { paginationOptsValidator } from "convex/server";
export const listWithExtraArg = query({
    args: { paginationOpts: paginationOptsValidator, author: v.string() },
    handler: async (ctx, args) => {
        return await ctx.db
        .query("messages")
        .filter((q) => q.eq(q.field("author"), args.author))
        .order("desc")
        .paginate(args.paginationOpts);
    },
});
```
Note: `paginationOpts` is an object with the following properties:
- `numItems`: the maximum number of documents to return (the validator is `v.number()`)
- `cursor`: the cursor to use to fetch the next page of documents (the validator is `v.union(v.string(), v.null())`)
- A query that ends in `.paginate()` returns an object that has the following properties:
                            - page (contains an array of documents that you fetches)
                            - isDone (a boolean that represents whether or not this is the last page of documents)
                            - continueCursor (a string that represents the cursor to use to fetch the next page of documents)


## Validator guidelines
- `v.bigint()` is deprecated for representing signed 64-bit integers. Use `v.int64()` instead.
- Use `v.record()` for defining a record type. `v.map()` and `v.set()` are not supported.

## Schema guidelines
- Always define your schema in `convex/schema.ts`.
- Always import the schema definition functions from `convex/server`:
- System fields are automatically added to all documents and are prefixed with an underscore. The two system fields that are automatically added to all documents are `_creationTime` which has the validator `v.number()` and `_id` which has the validator `v.id(tableName)`.
- Always include all index fields in the index name. For example, if an index is defined as `["field1", "field2"]`, the index name should be "by_field1_and_field2".
- Index fields must be queried in the same order they are defined. If you want to be able to query by "field1" then "field2" and by "field2" then "field1", you must create separate indexes.

## Typescript guidelines
- You can use the helper typescript type `Id` imported from './_generated/dataModel' to get the type of the id for a given table. For example if there is a table called 'users' you can use `Id<'users'>` to get the type of the id for that table.
- If you need to define a `Record` make sure that you correctly provide the type of the key and value in the type. For example a validator `v.record(v.id('users'), v.string())` would have the type `Record<Id<'users'>, string>`. Below is an example of using `Record` with an `Id` type in a query:
```ts
import { query } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";

export const exampleQuery = query({
    args: { userIds: v.array(v.id("users")) },
    returns: v.record(v.id("users"), v.string()),
    handler: async (ctx, args) => {
        const idToUsername: Record<Id<"users">, string> = {};
        for (const userId of args.userIds) {
            const user = await ctx.db.get(userId);
            if (user) {
                users[user._id] = user.username;
            }
        }

        return idToUsername;
    },
});
```
- Be strict with types, particularly around id's of documents. For example, if a function takes in an id for a document in the 'users' table, take in `Id<'users'>` rather than `string`.
- Always use `as const` for string literals in discriminated union types.
- When using the `Array` type, make sure to always define your arrays as `const array: Array<T> = [...];`
- When using the `Record` type, make sure to always define your records as `const record: Record<KeyType, ValueType> = {...};`
- Always add `@types/node` to your `package.json` when using any Node.js built-in modules.

## Full text search guidelines
- A query for "10 messages in channel '#general' that best match the query 'hello hi' in their body" would look like:

const messages = await ctx.db
  .query("messages")
  .withSearchIndex("search_body", (q) =>
    q.search("body", "hello hi").eq("channel", "#general"),
  )
  .take(10);

## Query guidelines
- Do NOT use `filter` in queries. Instead, define an index in the schema and use `withIndex` instead.
- Convex queries do NOT support `.delete()`. Instead, `.collect()` the results, iterate over them, and call `ctx.db.delete(row._id)` on each result.
- Use `.unique()` to get a single document from a query. This method will throw an error if there are multiple documents that match the query.
- When using async iteration, don't use `.collect()` or `.take(n)` on the result of a query. Instead, use the `for await (const row of query)` syntax.
### Ordering
- By default Convex always returns documents in ascending `_creationTime` order.
- You can use `.order('asc')` or `.order('desc')` to pick whether a query is in ascending or descending order. If the order isn't specified, it defaults to ascending.
- Document queries that use indexes will be ordered based on the columns in the index and can avoid slow table scans.


## Mutation guidelines
- Use `ctx.db.replace` to fully replace an existing document. This method will throw an error if the document does not exist.
- Use `ctx.db.patch` to shallow merge updates into an existing document. This method will throw an error if the document does not exist.

## Action guidelines
- Always add `"use node";` to the top of files containing actions that use Node.js built-in modules.
- Never use `ctx.db` inside of an action. Actions don't have access to the database.
- Below is an example of the syntax for an action:
```ts
import { action } from "./_generated/server";

export const exampleAction = action({
    args: {},
    returns: v.null(),
    handler: async (ctx, args) => {
        console.log("This action does not return anything");
        return null;
    },
});
```

## Scheduling guidelines
### Cron guidelines
- Only use the `crons.interval` or `crons.cron` methods to schedule cron jobs. Do NOT use the `crons.hourly`, `crons.daily`, or `crons.weekly` helpers.
- Both cron methods take in a FunctionReference. Do NOT try to pass the function directly into one of these methods.
- Define crons by declaring the top-level `crons` object, calling some methods on it, and then exporting it as default. For example,
```ts
import { cronJobs } from "convex/server";
import { internal } from "./_generated/api";
import { internalAction } from "./_generated/server";

const empty = internalAction({
  args: {},
  returns: v.null(),
  handler: async (ctx, args) => {
    console.log("empty");
  },
});

const crons = cronJobs();

// Run `internal.crons.empty` every two hours.
crons.interval("delete inactive users", { hours: 2 }, internal.crons.empty, {});

export default crons;
```
- You can register Convex functions within `crons.ts` just like any other file.
- If a cron calls an internal function, always import the `internal` object from '_generated/api', even if the internal function is registered in the same file.


## File storage guidelines
- Convex includes file storage for large files like images, videos, and PDFs.
- The `ctx.storage.getUrl()` method returns a signed URL for a given file. It returns `null` if the file doesn't exist.
- Do NOT use the deprecated `ctx.storage.getMetadata` call for loading a file's metadata.

                    Instead, query the `_storage` system table. For example, you can use `ctx.db.system.get` to get an `Id<"_storage">`.
```
import { query } from "./_generated/server";
import { Id } from "./_generated/dataModel";

type FileMetadata = {
    _id: Id<"_storage">;
    _creationTime: number;
    contentType?: string;
    sha256: string;
    size: number;
}

export const exampleQuery = query({
    args: { fileId: v.id("_storage") },
    returns: v.null();
    handler: async (ctx, args) => {
        const metadata: FileMetadata | null = await ctx.db.system.get(args.fileId);
        console.log(metadata);
        return null;
    },
});
```
- Convex storage stores items as `Blob` objects. You must convert all items to/from a `Blob` when using Convex storage.


# Examples:
## Example: chat-app

### Task
```
Create a real-time chat application backend with AI responses. The app should:
- Allow creating users with names
- Support multiple chat channels
- Enable users to send messages to channels
- Automatically generate AI responses to user messages
- Show recent message history

The backend should provide APIs for:
1. User management (creation)
2. Channel management (creation)
3. Message operations (sending, listing)
4. AI response generation using OpenAI's GPT-4

Messages should be stored with their channel, author, and content. The system should maintain message order
and limit history display to the 10 most recent messages per channel.

```

### Analysis
1. Task Requirements Summary:
- Build a real-time chat backend with AI integration
- Support user creation
- Enable channel-based conversations
- Store and retrieve messages with proper ordering
- Generate AI responses automatically

2. Main Components Needed:
- Database tables: users, channels, messages
- Public APIs for user/channel management
- Message handling functions
- Internal AI response generation system
- Context loading for AI responses

3. Public API and Internal Functions Design:
Public Mutations:
- createUser:
  - file path: convex/index.ts
  - arguments: {name: v.string()}
  - returns: v.object({userId: v.id("users")})
  - purpose: Create a new user with a given name
- createChannel:
  - file path: convex/index.ts
  - arguments: {name: v.string()}
  - returns: v.object({channelId: v.id("channels")})
  - purpose: Create a new channel with a given name
- sendMessage:
  - file path: convex/index.ts
  - arguments: {channelId: v.id("channels"), authorId: v.id("users"), content: v.string()}
  - returns: v.null()
  - purpose: Send a message to a channel and schedule a response from the AI

Public Queries:
- listMessages:
  - file path: convex/index.ts
  - arguments: {channelId: v.id("channels")}
  - returns: v.array(v.object({
    _id: v.id("messages"),
    _creationTime: v.number(),
    channelId: v.id("channels"),
    authorId: v.optional(v.id("users")),
    content: v.string(),
    }))
  - purpose: List the 10 most recent messages from a channel in descending creation order

Internal Functions:
- generateResponse:
  - file path: convex/index.ts
  - arguments: {channelId: v.id("channels")}
  - returns: v.null()
  - purpose: Generate a response from the AI for a given channel
- loadContext:
  - file path: convex/index.ts
  - arguments: {channelId: v.id("channels")}
  - returns: v.array(v.object({
    _id: v.id("messages"),
    _creationTime: v.number(),
    channelId: v.id("channels"),
    authorId: v.optional(v.id("users")),
    content: v.string(),
  }))
- writeAgentResponse:
  - file path: convex/index.ts
  - arguments: {channelId: v.id("channels"), content: v.string()}
  - returns: v.null()
  - purpose: Write an AI response to a given channel

4. Schema Design:
- users
  - validator: { name: v.string() }
  - indexes: <none>
- channels
  - validator: { name: v.string() }
  - indexes: <none>
- messages
  - validator: { channelId: v.id("channels"), authorId: v.optional(v.id("users")), content: v.string() }
  - indexes
    - by_channel: ["channelId"]

5. Background Processing:
- AI response generation runs asynchronously after each user message
- Uses OpenAI's GPT-4 to generate contextual responses
- Maintains conversation context using recent message history


### Implementation

#### package.json
```typescript
{
  "name": "chat-app",
  "description": "This example shows how to build a chat app without authentication.",
  "version": "1.0.0",
  "dependencies": {
    "convex": "^1.17.4",
    "openai": "^4.79.0"
  },
  "devDependencies": {
    "typescript": "^5.7.3"
  }
}
```

#### tsconfig.json
```typescript
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "exclude": ["convex"],
  "include": ["**/src/**/*.tsx", "**/src/**/*.ts", "vite.config.ts"]
}
```

#### convex/index.ts
```typescript
import {
  query,
  mutation,
  internalQuery,
  internalMutation,
  internalAction,
} from "./_generated/server";
import { v } from "convex/values";
import OpenAI from "openai";
import { internal } from "./_generated/api";

/**
 * Create a user with a given name.
 */
export const createUser = mutation({
  args: {
    name: v.string(),
  },
  returns: v.id("users"),
  handler: async (ctx, args) => {
    return await ctx.db.insert("users", { name: args.name });
  },
});

/**
 * Create a channel with a given name.
 */
export const createChannel = mutation({
  args: {
    name: v.string(),
  },
  returns: v.id("channels"),
  handler: async (ctx, args) => {
    return await ctx.db.insert("channels", { name: args.name });
  },
});

/**
 * List the 10 most recent messages from a channel in descending creation order.
 */
export const listMessages = query({
  args: {
    channelId: v.id("channels"),
  },
  returns: v.array(
    v.object({
      _id: v.id("messages"),
      _creationTime: v.number(),
      channelId: v.id("channels"),
      authorId: v.optional(v.id("users")),
      content: v.string(),
    }),
  ),
  handler: async (ctx, args) => {
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
      .order("desc")
      .take(10);
    return messages;
  },
});

/**
 * Send a message to a channel and schedule a response from the AI.
 */
export const sendMessage = mutation({
  args: {
    channelId: v.id("channels"),
    authorId: v.id("users"),
    content: v.string(),
  },
  returns: v.null(),
  handler: async (ctx, args) => {
    const channel = await ctx.db.get(args.channelId);
    if (!channel) {
      throw new Error("Channel not found");
    }
    const user = await ctx.db.get(args.authorId);
    if (!user) {
      throw new Error("User not found");
    }
    await ctx.db.insert("messages", {
      channelId: args.channelId,
      authorId: args.authorId,
      content: args.content,
    });
    await ctx.scheduler.runAfter(0, internal.index.generateResponse, {
      channelId: args.channelId,
    });
    return null;
  },
});

const openai = new OpenAI();

export const generateResponse = internalAction({
  args: {
    channelId: v.id("channels"),
  },
  returns: v.null(),
  handler: async (ctx, args) => {
    const context = await ctx.runQuery(internal.index.loadContext, {
      channelId: args.channelId,
    });
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: context,
    });
    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("No content in response");
    }
    await ctx.runMutation(internal.index.writeAgentResponse, {
      channelId: args.channelId,
      content,
    });
    return null;
  },
});

export const loadContext = internalQuery({
  args: {
    channelId: v.id("channels"),
  },
  returns: v.array(
    v.object({
      role: v.union(v.literal("user"), v.literal("assistant")),
      content: v.string(),
    }),
  ),
  handler: async (ctx, args) => {
    const channel = await ctx.db.get(args.channelId);
    if (!channel) {
      throw new Error("Channel not found");
    }
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_channel", (q) => q.eq("channelId", args.channelId))
      .order("desc")
      .take(10);

    const result = [];
    for (const message of messages) {
      if (message.authorId) {
        const user = await ctx.db.get(message.authorId);
        if (!user) {
          throw new Error("User not found");
        }
        result.push({
          role: "user" as const,
          content: `${user.name}: ${message.content}`,
        });
      } else {
        result.push({ role: "assistant" as const, content: message.content });
      }
    }
    return result;
  },
});

export const writeAgentResponse = internalMutation({
  args: {
    channelId: v.id("channels"),
    content: v.string(),
  },
  returns: v.null(),
  handler: async (ctx, args) => {
    await ctx.db.insert("messages", {
      channelId: args.channelId,
      content: args.content,
    });
    return null;
  },
});
```

#### convex/schema.ts
```typescript
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  channels: defineTable({
    name: v.string(),
  }),

  users: defineTable({
    name: v.string(),
  }),

  messages: defineTable({
    channelId: v.id("channels"),
    authorId: v.optional(v.id("users")),
    content: v.string(),
  }).index("by_channel", ["channelId"]),
});
```

#### src/App.tsx
```typescript
export default function App() {
  return <div>Hello World</div>;
}
```

TITLE: Using useAuthActions Hook in TypeScript
DESCRIPTION: Example of using the useAuthActions hook to access signIn and signOut methods in a React component.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";

function SomeComponent() {
  const { signIn, signOut } = useAuthActions();
  // ...
}
```

----------------------------------------

TITLE: Using getAuthUserId in a Convex Mutation
DESCRIPTION: Example of retrieving the current user's ID in a Convex mutation function using getAuthUserId.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { getAuthUserId } from "@convex-dev/auth/server";

export const doSomething = mutation({
  args: {/* ... */},
  handler: async (ctx, args) => {
    const userId = await getAuthUserId(ctx);
    if (userId === null) {
      throw new Error("Client is not authenticated!")
    }
    const user = await ctx.db.get(userId);
    // ...
  },
});
```

----------------------------------------

TITLE: Placing Next.js App Router Client Provider (SSA)
DESCRIPTION: Demonstrates wrapping the main content of your Next.js App Router layout (`app/layout.tsx`) with the `ConvexClientProvider` when using Server-Side Authentication, typically done inside the `ConvexAuthNextjsServerProvider`.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { ConvexAuthNextjsServerProvider } from "@convex-dev/auth/nextjs/server";
import { ConvexClientProvider } from "./ConvexClientProvider";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ConvexAuthNextjsServerProvider>
      <html lang="en">
        <body>
          <ConvexClientProvider>{children}</ConvexClientProvider>
        </body>
      </html>
    </ConvexAuthNextjsServerProvider>
  );
}
```

----------------------------------------

TITLE: Conditional UI Rendering Based on Authentication State in React
DESCRIPTION: Example of how to control content visibility based on the user's authentication state using Convex components. It demonstrates the use of AuthLoading, Unauthenticated, and Authenticated components to conditionally render different UI elements.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { Authenticated, Unauthenticated, AuthLoading } from "convex/react";
import { SignIn } from "./SignIn";
import { SignOut } from "./SignOut";

export function App() {
  return (
    <>
      <AuthLoading>{/* consider showing a loading indicator */}</AuthLoading>
      <Unauthenticated>
        <SignIn />
      </Unauthenticated>
      <Authenticated>
        <SignOut />
        <Content />
      </Authenticated>
    </>
  );
}

function Content() {
  /* render signed-in content */
}
```

----------------------------------------

TITLE: Adding Auth Tables to Convex Schema
DESCRIPTION: Import `authTables` from `@convex-dev/auth/server` and spread them into your Convex schema definition. This adds the required database tables and indexes for Convex Auth to function correctly.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import { defineSchema } from "convex/server";
import { authTables } from "@convex-dev/auth/server";

const schema = defineSchema({
  ...authTables,
  // Your other tables...
});

export default schema;
```

----------------------------------------

TITLE: Implement React Sign-in/Sign-up Form
DESCRIPTION: Create a React component that uses the useAuthActions hook to handle email and password sign-in and sign-up. The form submits data including email, password, and the desired flow ('signIn' or 'signUp') to the 'password' provider.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useState } from "react";

export function SignIn() {
  const { signIn } = useAuthActions();
  const [step, setStep] = useState<"signUp" | "signIn">("signIn");
  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("password", formData);
      }}
    >
      <input name="email" placeholder="Email" type="text" />
      <input name="password" placeholder="Password" type="password" />
      <input name="flow" type="hidden" value={step} />
      <button type="submit">{step === "signIn" ? "Sign in" : "Sign up"}</button>
      <button
        type="button"
        onClick={() => {
          setStep(step === "signIn" ? "signUp" : "signIn");
        }}
      >
        {step === "signIn" ? "Sign up instead" : "Sign in instead"}
      </button>
    </form>
  );
}
```

----------------------------------------

TITLE: Configuring Convex Auth in a TypeScript File
DESCRIPTION: Example of how to set up Convex Auth by exporting the necessary functions from convex/auth.ts using the convexAuth configuration function.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [],
});
```

----------------------------------------

TITLE: Implementing React Sign-In/Sign-Up Form with Email Verification (TSX)
DESCRIPTION: This React component (`SignIn`) provides a form-based UI for user authentication. It handles both initial sign-in/sign-up and the subsequent email verification step. It uses `useAuthActions` to interact with the Convex Auth backend and updates its UI state based on the user's progress in the flow.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useState } from "react";

export function SignIn() {
  const { signIn } = useAuthActions();
  const [step, setStep] = useState<"signIn" | "signUp" | { email: string }>(
    "signIn"
  );
  return step === "signIn" || step === "signUp" ? (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("password", formData).then(() =>
          setStep({ email: formData.get("email") as string })
        );
      }}
    >
      <input name="email" placeholder="Email" type="text" />
      <input name="password" placeholder="Password" type="password" />
      <input name="flow" value={step} type="hidden" />
      <button type="submit">{step === "signIn" ? "Sign in" : "Sign up"}</button>
      <button
        type="button"
        onClick={() => {
          setStep(step === "signIn" ? "signUp" : "signIn");
        }}
      >
        {step === "signIn" ? "Sign up instead" : "Sign in instead"}
      </button>
    </form>
  ) : (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("password", formData);
      }}
    >
      <input name="code" placeholder="Code" type="text" />
      <input name="flow" type="hidden" value="email-verification" />
      <input name="email" value={step.email} type="hidden" />
      <button type="submit">Continue</button>
      <button type="button" onClick={() => setStep("signIn")}>
        Cancel
      </button>
    </form>
  );
}
```

----------------------------------------

TITLE: Adding Auth Routes to HTTP Router (TypeScript)
DESCRIPTION: Configures the Convex HTTP router by importing the httpRouter from convex/server and the previously initialized auth helper from ./auth. It then calls auth.addHttpRoutes(http) to automatically register the necessary HTTP endpoints for authentication flows handled by Convex Auth.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import { httpRouter } from "convex/server";
import { auth } from "./auth";

const http = httpRouter();

auth.addHttpRoutes(http);

export default http;
```

----------------------------------------

TITLE: Implement Password Reset Form Component (React/TSX)
DESCRIPTION: Provides a React component (`PasswordReset`) that handles the two-step password reset flow using `useAuthActions` from `@convex-dev/auth/react`. It renders different forms based on the current step ('forgot' or 'reset-verification') and uses the `signIn` action with specific `flow` values to interact with the backend.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useState } from "react";

export function PasswordReset() {
  const { signIn } = useAuthActions();
  const [step, setStep] = useState<"forgot" | { email: string }>("forgot");
  return step === "forgot" ? (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("password", formData).then(() =>
          setStep({ email: formData.get("email") as string })
        );
      }}
    >
      <input name="email" placeholder="Email" type="text" />
      <input name="flow" type="hidden" value="reset" />
      <button type="submit">Send code</button>
    </form>
  ) : (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("password", formData);
      }}
    >
      <input name="code" placeholder="Code" type="text" />
      <input name="newPassword" placeholder="New password" type="password" />
      <input name="email" value={step.email} type="hidden" />
      <input name="flow" value="reset-verification" type="hidden" />
      <button type="submit">Continue</button>
      <button type="button" onClick={() => setStep("forgot")}>
        Cancel
      </button>
    </form>
  );
}
```

----------------------------------------

TITLE: Adding HTTP Routes for Authentication in Convex
DESCRIPTION: Example showing how to set up HTTP routes for JWT verification and OAuth sign-in using the auth helper.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { httpRouter } from "convex/server";
import { auth } from "./auth.js";

const http = httpRouter();

auth.addHttpRoutes(http);

export default http;
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing ConvexAuthProvider for Authentication
DESCRIPTION: Example showing how to set up authentication by replacing ConvexProvider with ConvexAuthProvider in a React application.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import { ConvexAuthProvider } from "@convex-dev/auth/react";
import { ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(/* ... */);

function RootComponent({ children }: { children: ReactNode }) {
  return <ConvexAuthProvider client={convex}>{children}</ConvexAuthProvider>;
}
```

----------------------------------------

TITLE: Preloading Authenticated Data in Next.js with Convex
DESCRIPTION: This code demonstrates how to preload authenticated data from a Convex backend in a Next.js server component. It uses the preloadQuery function and the convexAuthNextjsToken to fetch tasks for an authenticated user.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { convexAuthNextjsToken } from "@convex-dev/auth/nextjs/server";
import { preloadQuery } from "convex/nextjs";
import { api } from "@/convex/_generated/api";
import { Tasks } from "./Tasks";

export async function TasksWrapper() {
  const preloadedTasks = await preloadQuery(
    api.tasks.list,
    { list: "default" },
    { token: await convexAuthNextjsToken() },
  );
  return <Tasks preloadedTasks={preloadedTasks} />;
}
```

----------------------------------------

TITLE: Setting Up React (Vite) Auth Provider
DESCRIPTION: Replace the standard `ConvexProvider` with `ConvexAuthProvider` from `@convex-dev/auth/react` in your main application entry file (e.g., `src/main.tsx`). Wrap your root application component with `ConvexAuthProvider`, passing your `ConvexReactClient` instance.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { ConvexAuthProvider } from "@convex-dev/auth/react";
import React from "react";
import ReactDOM from "react-dom/client";
import { ConvexReactClient } from "convex/react";
import App from "./App.tsx";
import "./index.css";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ConvexAuthProvider client={convex}>
      <App />
    </ConvexAuthProvider>
  </React.StrictMode>,
);
```

----------------------------------------

TITLE: Setting Up Next.js App Router SSA Client Provider
DESCRIPTION: In your client provider file (e.g., `app/ConvexClientProvider.tsx`), replace `ConvexProvider` with `ConvexAuthNextjsProvider` from `@convex-dev/auth/nextjs`. Wrap the parts of your application that interact with Convex (queries, mutations, actions) with this provider, passing the `ConvexReactClient` instance.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
"use client";

import { ConvexAuthNextjsProvider } from "@convex-dev/auth/nextjs";
import { ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return (
    <ConvexAuthNextjsProvider client={convex}>
      {children}
    </ConvexAuthNextjsProvider>
  );
}
```

----------------------------------------

TITLE: Implementing OAuth Sign-In Button in React
DESCRIPTION: React component code for creating a sign-in button that triggers the OAuth flow for GitHub authentication.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";

export function SignIn() {
  const { signIn } = useAuthActions();
  return (
    <button onClick={() => void signIn("github")}>Sign in with GitHub</button>
  );
}
```

----------------------------------------

TITLE: Implementing ConvexAuthNextjsProvider in Next.js
DESCRIPTION: This code snippet demonstrates how to set up the ConvexAuthNextjsProvider in a Next.js application. It creates a client-side component that wraps children with the ConvexAuthNextjsProvider, enabling authentication features.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/nextjs.mdx#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
"use client";

import { ConvexAuthNextjsProvider } from "@convex-dev/auth/nextjs";
import { ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function ConvexClientProvider({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <ConvexAuthNextjsProvider client={convex}>
      {children}
    </ConvexAuthNextjsProvider>
  );
}
```

----------------------------------------

TITLE: Setting Up Next.js Pages Router Provider (No SSA)
DESCRIPTION: For Next.js Pages Router without Server-Side Authentication, replace the standard `ConvexProvider` with `ConvexAuthProvider` from `@convex-dev/auth/react` in your `pages/_app.ts` file to provide authentication context to your entire application.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { ConvexAuthProvider } from "@convex-dev/auth/react";
import { ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);

export default function App({ Component, pageProps }) {
  return (
    <ConvexAuthProvider client={convex}>
      <Component {...pageProps} />
    </ConvexAuthProvider>
  );
}
```

----------------------------------------

TITLE: Adding Next.js Middleware for Auth
DESCRIPTION: Create a `middleware.ts` file at the root of your Next.js project and export the result of calling `convexAuthNextjsMiddleware`. This middleware handles authentication flows, and the provided config ensures it runs on most routes.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { convexAuthNextjsMiddleware } from "@convex-dev/auth/nextjs/server";

export default convexAuthNextjsMiddleware();

export const config = {
  // The following matcher runs middleware on all routes
  // except static assets.
  matcher: ["/((?!.*\\..*|_next).*)", "/", "/(api|trpc)(.*)"],
};
```

----------------------------------------

TITLE: Retrieving Current User ID in Convex Backend Functions
DESCRIPTION: A Convex query function that demonstrates how to get the currently authenticated user's ID using getAuthUserId. This function returns the user document if authenticated, or null if not authenticated.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { getAuthUserId } from "@convex-dev/auth/server";
import { query } from "./_generated/server";

export const currentUser = query({
  args: {},
  handler: async (ctx) => {
    const userId = await getAuthUserId(ctx);
    if (userId === null) {
      return null;
    }
    return await ctx.db.get(userId);
  },
});
```

----------------------------------------

TITLE: Including Auth Tables in Convex Schema
DESCRIPTION: Example of integrating the required auth tables into a Convex schema definition. These tables provide the database structure needed for authentication features.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineSchema } from "convex/server";
import { authTables } from "@convex-dev/auth/server";

const schema = defineSchema({
  ...authTables,
});

export default schema;
```

----------------------------------------

TITLE: Configure Convex Auth with Password Provider and Resend Reset (TypeScript)
DESCRIPTION: Sets up Convex Auth using the `convexAuth` function. It includes the standard `Password` provider and configures its `reset` option to use the custom `ResendOTPPasswordReset` provider defined previously, enabling the password reset flow via email OTP.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { Password } from "@convex-dev/auth/providers/Password";
import { convexAuth } from "@convex-dev/auth/server";
import { ResendOTPPasswordReset } from "./ResendOTPPasswordReset";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Password({ reset: ResendOTPPasswordReset })],
});
```

----------------------------------------

TITLE: Setting Up Next.js App Router SSA Server Provider
DESCRIPTION: Wrap your root layout component (`app/layout.tsx`) with `ConvexAuthNextjsServerProvider` imported from `@convex-dev/auth/nextjs/server`. This provider is necessary for experimental Server-Side Authentication support in Next.js App Router.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { ConvexAuthNextjsServerProvider } from "@convex-dev/auth/nextjs/server";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ConvexAuthNextjsServerProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </ConvexAuthNextjsServerProvider>
  );
}
```

----------------------------------------

TITLE: Configuring Authentication Middleware in Next.js with Convex
DESCRIPTION: This code snippet demonstrates how to set up middleware in Next.js to handle authentication using Convex Auth. It includes route matching for protected routes and sign-in pages, with redirection logic based on authentication status.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import {
  convexAuthNextjsMiddleware,
  createRouteMatcher,
  nextjsMiddlewareRedirect,
} from "@convex-dev/auth/nextjs/server";

const isSignInPage = createRouteMatcher(["/signin"]);
const isProtectedRoute = createRouteMatcher(["/product(.*)"]);

export default convexAuthNextjsMiddleware(async (request, { convexAuth }) => {
  if (isSignInPage(request) && (await convexAuth.isAuthenticated())) {
    return nextjsMiddlewareRedirect(request, "/product");
  }
  if (isProtectedRoute(request) && !(await convexAuth.isAuthenticated())) {
    return nextjsMiddlewareRedirect(request, "/signin");
  }
});

export const config = {
  // The following matcher runs middleware on all routes
  // except static assets.
  matcher: ["/((?!.*\..*|_next).*)", "/", "/(api|trpc)(.*)"],
};
```

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Example of a Convex mutation function that handles data modification. Shows argument validation, database insertion, and return value handling. Demonstrates proper structure for writing data to Convex database.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Setting Up Next.js App Router Client Provider (No SSA)
DESCRIPTION: For Next.js App Router without experimental Server-Side Authentication, use `ConvexAuthProvider` from `@convex-dev/auth/react` in your client provider file (`app/ConvexClientProvider.tsx`), wrapping components that use Convex.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
"use client";

import { ConvexAuthProvider } from "@convex-dev/auth/react";
import { ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return <ConvexAuthProvider client={convex}>{children}</ConvexAuthProvider>;
}
```

----------------------------------------

TITLE: Retrieving Current Session ID in Convex Backend Functions
DESCRIPTION: A Convex query function that demonstrates how to get the current session ID using getAuthSessionId. This function returns the session document if authenticated, or null if not authenticated.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
import { getAuthSessionId } from "@convex-dev/auth/server";
import { query } from "./_generated/server";

export const currentSession = query({
  args: {},
  handler: async (ctx) => {
    const sessionId = await getAuthSessionId(ctx);
    if (sessionId === null) {
      return null;
    }
    return await ctx.db.get(sessionId);
  },
});
```

----------------------------------------

TITLE: Configuring Convex Auth with Password Provider and OTP Verification (TypeScript)
DESCRIPTION: This snippet sets up the core Convex Auth instance using `convexAuth`. It includes the `Password` provider and passes the previously defined `ResendOTP` provider to its `verify` option. This enables the automatic email verification flow within the password authentication process.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { Password } from "@convex-dev/auth/providers/Password";
import { convexAuth } from "@convex-dev/auth/server";
import { ResendOTP } from "./ResendOTP";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Password({ verify: ResendOTP })],
});
```

----------------------------------------

TITLE: Configuring Auth Providers for Convex (TypeScript)
DESCRIPTION: Sets up the auth.config.ts file by defining an array of authentication providers. It includes a default provider configuration using the CONVEX_SITE_URL environment variable for the domain and "convex" as the application ID, which is necessary for basic Convex Auth functionality.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
export default {
  providers: [
    {
      domain: process.env.CONVEX_SITE_URL,
      applicationID: "convex",
    },
  ],
};
```

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows validator setup, database querying, and document processing. Demonstrates proper structure for reading data from Convex database.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Configuring Convex Auth Providers (TypeScript)
DESCRIPTION: This snippet shows how to configure Convex Auth in `convex/auth.ts`. It imports providers like Resend and GitHub and initializes `convexAuth`, passing an array of provider configurations. It demonstrates how to disable email account linking for a specific OAuth provider by setting `allowDangerousEmailAccountLinking` to `false` during provider initialization.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Resend from "@auth/core/providers/resend";
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } =
  convexAuth({
    providers: [
      Resend,
      GitHub({ allowDangerousEmailAccountLinking: false }),
    ],
  });
```

----------------------------------------

TITLE: Implementing Custom createOrUpdateUser Callback (TypeScript)
DESCRIPTION: This snippet defines a custom `createOrUpdateUser` callback within the Convex Auth configuration. It receives context and arguments about the attempted sign-in. The callback implements logic to check for an existing user (by email in this example) for account linking and creates a new user document if no existing user is found, overriding the default Convex Auth behavior.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import GitHub from "@auth/core/providers/github";
import Password from "@convex-dev/auth/providers/Password";
import { MutationCtx } from "./_generated/server";

export const { auth, signIn, signOut, store, isAuthenticated } = {
  providers: [GitHub, Password],
  callbacks: {
    // `args.type` is one of "oauth" | "email" | "phone" | "credentials" | "verification"
    // `args.provider` is the currently used provider config
    async createOrUpdateUser(ctx: MutationCtx, args) {
      if (args.existingUserId) {
        // Optionally merge updated fields into the existing user object here
        return args.existingUserId;
      }

      // Implement your own account linking logic:
      const existingUser = await findUserByEmail(ctx, args.profile.email);
      if (existingUser) return existingUser._id;

      // Implement your own user creation:
      return ctx.db.insert("users", {
        /* ... */
      });
    },
  },
};
```

----------------------------------------

TITLE: Implementing Password Authentication with Convex Auth in TypeScript
DESCRIPTION: Example code showing how to initialize and configure the Password provider for authentication in a Convex application. This snippet demonstrates importing and setting up the basic password authentication system.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Password.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import Password from "@convex-dev/auth/providers/Password";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Password],
});
```

----------------------------------------

TITLE: Configure Password Provider in convex/auth.ts
DESCRIPTION: Add the Password provider to the providers array in your convex/auth.ts file to enable email and password authentication. This requires importing the Password provider from @convex-dev/auth/providers/Password.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Password } from "@convex-dev/auth/providers/Password";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Password],
});
```

----------------------------------------

TITLE: Authenticating HTTP Actions with JWT Token in React
DESCRIPTION: Example of how to authenticate HTTP requests to the Convex backend using JWT tokens. This snippet demonstrates using the useAuthToken hook to retrieve the authentication token and include it in fetch requests as a Bearer token.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import { useAuthToken } from "@convex-dev/auth/react";

function SomeComponent() {
  const token = useAuthToken();
  const onClick = async () => {
    // You might need to set up `VITE_CONVEX_SITE_URL`
    const response = await fetch(
      `${process.env.VITE_CONVEX_SITE_URL!}/someEndpoint`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    // ...
  };
  // ...
}
```

----------------------------------------

TITLE: Configuring Google OAuth Provider in Convex Auth
DESCRIPTION: TypeScript code snippet for configuring the Google OAuth provider in the Convex auth.ts file. This setup uses the @auth/core/providers/google package and the convexAuth function to integrate Google authentication into the Convex application.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import Google from "@auth/core/providers/google";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Google],
});
```

----------------------------------------

TITLE: Customizing the users Table Schema in Convex Auth
DESCRIPTION: This code shows how to define a custom schema for the users table in Convex Auth. It demonstrates adding optional fields like name, image, email, and phone, along with their verification timestamps. The example also includes an index on the email field and shows how to incorporate this custom table into your overall schema.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/schema.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

const schema = defineSchema({
  ...authTables,
  users: defineTable({
    name: v.optional(v.string()),
    image: v.optional(v.string()),
    email: v.optional(v.string()),
    emailVerificationTime: v.optional(v.number()),
    phone: v.optional(v.string()),
    phoneVerificationTime: v.optional(v.number()),
    isAnonymous: v.optional(v.boolean()),
    // other "users" fields...
  }).index("email", ["email"]),
  // Your other tables...
});

export default schema;
```

----------------------------------------

TITLE: Implementing Two-Step OTP Sign-In Form (TSX)
DESCRIPTION: Provides a React component example for handling the two-step OTP sign-in process in the frontend. It uses the `useAuthActions` hook to access the `signIn` function and manages local state to switch between the email submission form and the code submission form.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useState } from "react";

export function SignIn() {
  const { signIn } = useAuthActions();
  const [step, setStep] = useState<"signIn" | { email: string }>(null);
  return step === null || step === "signIn" ? (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("resend-otp", formData).then(() =>
          setStep({ email: formData.get("email") as string })
        );
      }}
    >
      <input name="email" placeholder="Email" type="text" />
      <button type="submit">Send code</button>
    </form>
  ) : (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("resend-otp", formData);
      }}
    >
      <input name="code" placeholder="Code" type="text" />
      <input name="email" value={step.email} type="hidden" />
      <button type="submit">Continue</button>
      <button type="button" onClick={() => setStep("signIn")}>
        Cancel
      </button>
    </form>
  );
}
```

----------------------------------------

TITLE: Using useAuthToken Hook for Authentication in React
DESCRIPTION: This snippet demonstrates how to use the useAuthToken hook from the Convex Auth library to obtain a JWT token and use it for authenticating HTTP requests to Convex endpoints. The token is added to the Authorization header of the fetch request.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { useAuthToken } from "@convex-dev/auth/react";

function SomeComponent() {
  const token = useAuthToken();
  const onClick = async () => {
    await fetch(`${CONVEX_SITE_URL}/someEndpoint`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  };
  // ...
}
```

----------------------------------------

TITLE: Configuring Auth.js Provider in Convex
DESCRIPTION: Configuration of the Resend email provider in the Convex authentication setup file.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import Resend from "@auth/core/providers/resend";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Resend],
});
```

----------------------------------------

TITLE: Defining Resend OTP Provider (TypeScript)
DESCRIPTION: Defines a custom provider configuration for Convex Auth using TypeScript. It specifies the provider ID, API key from environment variables, token expiration (15 minutes), token generation logic (8-digit number), and the asynchronous function to send the verification email via the Resend SDK.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { Email } from "@convex-dev/auth/providers/Email";
import { Resend as ResendAPI } from "resend";
import { alphabet, generateRandomString } from "oslo/crypto";

export const ResendOTP = Email({
  id: "resend-otp",
  apiKey: process.env.AUTH_RESEND_KEY,
  maxAge: 60 * 15, // 15 minutes
  // This function can be asynchronous
  generateVerificationToken() {
    return generateRandomString(8, alphabet("0-9"));
  },
  async sendVerificationRequest({ identifier: email, provider, token }) {
    const resend = new ResendAPI(provider.apiKey);
    const { error } = await resend.emails.send({
      from: "My App <onboarding@resend.dev>",
      to: [email],
      subject: `Sign in to My App`,
      text: "Your code is " + token,
    });

    if (error) {
      throw new Error(JSON.stringify(error));
    }
  },
});
```

----------------------------------------

TITLE: Implementing afterUserCreatedOrUpdated Callback (TypeScript)
DESCRIPTION: This snippet shows how to configure an `afterUserCreatedOrUpdated` callback in Convex Auth. This callback is executed after the default user creation or update process completes. It receives the context and arguments, including the `userId`, allowing you to perform additional database writes or other actions related to the user's creation or update, such as inserting data into another table.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import GitHub from "@auth/core/providers/github";
import Password from "@convex-dev/auth/providers/Password";
import { MutationCtx } from "./_generated/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [GitHub, Password],
  callbacks: {
    // `args` are the same the as for `createOrUpdateUser` but include `userId`
    async afterUserCreatedOrUpdated(ctx: MutationCtx, { userId }) {
      await ctx.db.insert("someTable", { userId, data: "some data" });
    },
  },
});
```

----------------------------------------

TITLE: Setting SITE_URL for Convex (Next.js)
DESCRIPTION: Configures the SITE_URL environment variable in Convex for a local Next.js project, pointing to the default development server URL (http://localhost:3000). This variable is crucial for handling OAuth redirects and magic links during authentication flows.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npx convex env set SITE_URL http://localhost:3000
```

----------------------------------------

TITLE: Using ConvexAuthNextjsMiddlewareContext in Next.js Middleware
DESCRIPTION: Example of how to use the ConvexAuthNextjsMiddlewareContext in a Next.js middleware function to check authentication and redirect if necessary.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/nextjs/server.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export function convexAuthNextjsMiddleware(handler, options) {
  return async (request, event, convexAuth) => {
    if (!(await convexAuth.isAuthenticated())) {
      return nextjsMiddlewareRedirect(request, "/login");
    }
  };
}
```

----------------------------------------

TITLE: Setting Up React Native Auth Provider
DESCRIPTION: In your React Native root layout file (e.g., `app/_layout.tsx`), use `ConvexAuthProvider` from `@convex-dev/auth/react` and provide a `storage` implementation using `expo-secure-store` for secure token persistence, conditionally applied based on platform.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import { Platform } from 'react-native'
import { ConvexAuthProvider } from "@convex-dev/auth/react";
import { ConvexReactClient } from "convex/react";
import { Stack } from "expo-router";
import * as SecureStore from "expo-secure-store";

const convex = new ConvexReactClient(process.env.EXPO_PUBLIC_CONVEX_URL!, {
  unsavedChangesWarning: false,
});

const secureStorage = {
  getItem: SecureStore.getItemAsync,
  setItem: SecureStore.setItemAsync,
  removeItem: SecureStore.deleteItemAsync,
};

export default function RootLayout() {
  return (
    <ConvexAuthProvider
      client={convex}
      storage={
        Platform.OS === "android" || Platform.OS === "ios"
          ? secureStorage
          : undefined
      }
    >
      <Stack>
        <Stack.Screen name="index" />
      </Stack>
    </ConvexAuthProvider>
  );
}
```

----------------------------------------

TITLE: Initializing Convex Auth Production Environment
DESCRIPTION: Command to initialize and configure the minimal set of required environment variables for Convex authentication in production.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/production.mdx#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx @convex-dev/auth --prod
```

----------------------------------------

TITLE: Configure Resend OTP Password Reset Provider (TypeScript)
DESCRIPTION: Configures a custom Auth.js email provider using Resend and Oslo for generating and sending one-time password (OTP) codes for password reset. It uses `resend` to send emails and `oslo/crypto` to generate random numeric tokens. Requires `AUTH_RESEND_KEY` environment variable.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import Resend from "@auth/core/providers/resend";
import { Resend as ResendAPI } from "resend";
import { alphabet, generateRandomString } from "oslo/crypto";

export const ResendOTPPasswordReset = Resend({
  id: "resend-otp",
  apiKey: process.env.AUTH_RESEND_KEY,
  async generateVerificationToken() {
    return generateRandomString(8, alphabet("0-9"));
  },
  async sendVerificationRequest({ identifier: email, provider, token }) {
    const resend = new ResendAPI(provider.apiKey);
    const { error } = await resend.emails.send({
      from: "My App <onboarding@resend.dev>",
      to: [email],
      subject: `Reset your password in My App`,
      text: "Your password reset code is " + token,
    });

    if (error) {
      throw new Error("Could not send");
    }
  },
});
```

----------------------------------------

TITLE: Implementing OAuth Sign-In in React Native
DESCRIPTION: React Native component code for handling OAuth sign-in flow, including opening an in-app browser and processing the redirect.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { makeRedirectUri } from "expo-auth-session";
import { openAuthSessionAsync } from "expo-web-browser";
import { Button, Platform } from "react-native";

const redirectTo = makeRedirectUri();

function SignIn() {
  const { signIn } = useAuthActions();
  const handleSignIn = async () => {
    const { redirect } = await signIn("github", { redirectTo });
    if (Platform.OS === "web") {
      return;
    }
    const result = await openAuthSessionAsync(redirect!.toString(), redirectTo);
    if (result.type === "success") {
      const { url } = result;
      const code = new URL(url).searchParams.get("code")!;
      await signIn("github", { code });
    }
  };
  return <Button onPress={handleSignIn} title="Sign in with GitHub" />;
}
```

----------------------------------------

TITLE: Calling Authenticated Mutations in Next.js Server Actions with Convex
DESCRIPTION: This snippet illustrates how to call authenticated Convex mutations from Next.js Server Actions. It includes a form submission handler that creates a new task using an authenticated mutation call.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { convexAuthNextjsToken } from "@convex-dev/auth/nextjs/server";
import { api } from "@/convex/_generated/api";
import { fetchMutation, fetchQuery } from "convex/nextjs";
import { revalidatePath } from "next/cache";

export default async function PureServerPage() {
  const tasks = await fetchQuery(api.tasks.list, { list: "default" });
  async function createTask(formData: FormData) {
    "use server";

    await fetchMutation(
      api.tasks.create,
      {
        text: formData.get("text") as string,
      },
      { token: await convexAuthNextjsToken() },
    );
    revalidatePath("/example");
  }
  // render tasks and task creation form
  return <form action={createTask}>...</form>;
}
```

----------------------------------------

TITLE: Getting Auth Session ID in Convex Mutation
DESCRIPTION: Example of using the getAuthSessionId function in a Convex mutation to verify user authentication and access the current session information.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { getAuthSessionId } from "@convex-dev/auth/server";

export const doSomething = mutation({
  args: {/* ... */},
  handler: async (ctx, args) => {
    const sessionId = await getAuthSessionId(ctx);
    if (sessionId === null) {
      throw new Error("Client is not authenticated!")
    }
    const session = await ctx.db.get(sessionId);
    // ...
  },
});
```

----------------------------------------

TITLE: Creating New Convex Project with Auth
DESCRIPTION: Run this command to initialize a new Convex project. During the interactive setup, select your desired framework (React/Vite, Next.js, etc.) and then choose the 'Convex Auth' option to include authentication setup from the start.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm create convex@latest
```

----------------------------------------

TITLE: Installing Convex Auth Packages
DESCRIPTION: Install the main Convex Auth library along with a specific version of `@auth/core`, which is required for provider configuration later in the setup process.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npm install @convex-dev/auth @auth/core@0.37.0
```

----------------------------------------

TITLE: Implementing Magic Link Sign-in Form
DESCRIPTION: React component implementation for the Magic Link sign-in form using Convex Auth actions.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";

export function SignIn() {
  const { signIn } = useAuthActions();
  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        void signIn("resend", formData);
      }}
    >
      <input name="email" placeholder="Email" type="text" />
      <button type="submit">Send sign-in link</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables in Convex
DESCRIPTION: Shell commands to set the GitHub OAuth client ID and secret as environment variables in a Convex project.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npx convex env set AUTH_GITHUB_ID yourgithubclientid
npx convex env set AUTH_GITHUB_SECRET yourgithubsecret
```

----------------------------------------

TITLE: Running Convex Auth Initialization
DESCRIPTION: Execute this command in your project directory after installing the package. It performs necessary setup steps to configure your project for using the Convex Auth library.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx @convex-dev/auth
```

----------------------------------------

TITLE: Setting Environment Variable (Shell)
DESCRIPTION: Demonstrates how to set the environment variable for the Resend API key on the Convex backend using the npx convex env set command. This variable is required for the Resend email provider to function correctly.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npx convex env set AUTH_RESEND_KEY yourresendkey
```

----------------------------------------

TITLE: Setting Resend API Key Environment Variable
DESCRIPTION: Command to set the Resend API key as an environment variable in the Convex backend.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx convex env set AUTH_RESEND_KEY yourresendkey
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. Shows proper parameter passing.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that modifies data in the database. The function accepts two string arguments, inserts a document into the 'messages' table, and returns the inserted document.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Setting Apple Secret Environment Variable in Convex
DESCRIPTION: Command to set the Apple JWT secret as an environment variable in Convex. This secret is required for server-side authentication with Apple's services.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_APPLE_SECRET <yourapplesecret>
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Setting Apple Client ID Environment Variable in Convex
DESCRIPTION: Command to set the Apple Service Identifier as an environment variable in Convex. This identifier is used to authenticate with Apple's services.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_APPLE_ID <yourappleserviceidentifier>
```

----------------------------------------

TITLE: Customizing Sign-In Redirect with redirectTo Parameter
DESCRIPTION: Example of using the redirectTo parameter with the signIn function to specify a custom destination after authentication. This can be used to redirect users to specific pages or even different sites after they sign in.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
signIn("google", { redirectTo: "/dashboard" })
```

----------------------------------------

TITLE: Validating Password Requirements (TypeScript)
DESCRIPTION: This example shows how to use the `validatePasswordRequirements` option of the `Password` provider to enforce custom password policies. It checks for minimum length (8 characters) and requires the password to contain digits, lowercase letters, and uppercase letters, throwing a `ConvexError` if requirements are not met.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_10

LANGUAGE: ts
CODE:
```
import { ConvexError } from "convex/values";
import { Password } from "@convex-dev/auth/providers/Password";

export default Password({
  validatePasswordRequirements: (password: string) => {
    if (
      password.length < 8 ||
      !/\d/.test(password) ||
      !/[a-z]/.test(password) ||
      !/[A-Z]/.test(password)
    ) {
      throw new ConvexError("Invalid password.");
    }
  },
});
```

----------------------------------------

TITLE: Customizing User Profile Fields (TypeScript)
DESCRIPTION: This snippet illustrates how to add custom fields, such as a `role`, to the user document during the sign-up process by returning them from the `profile` method of the `Password` provider. It requires customizing your Convex schema to include these fields and parametrizing the provider with your `DataModel` for type safety.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import { Password } from "@convex-dev/auth/providers/Password";
import { DataModel } from "./_generated/dataModel";

export default Password<DataModel>({
  profile(params) {
    return {
      email: params.email as string,
      name: params.name as string,
      role: params.role as string,
    };
  },
});
```

----------------------------------------

TITLE: Defining Custom OTP Email Provider with Resend and Oslo (TypeScript)
DESCRIPTION: This snippet defines a custom Auth.js email provider named `ResendOTP`. It uses the `@auth/core/providers/resend` adapter, the `resend` SDK to send emails, and `oslo/crypto` to generate random numeric tokens. It implements the `generateVerificationToken` and `sendVerificationRequest` methods required by Auth.js email providers.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import Resend from "@auth/core/providers/resend";
import { Resend as ResendAPI } from "resend";
import { alphabet, generateRandomString } from "oslo/crypto";

export const ResendOTP = Resend({
  id: "resend-otp",
  apiKey: process.env.AUTH_RESEND_KEY,
  async generateVerificationToken() {
    return generateRandomString(8, alphabet("0-9"));
  },
  async sendVerificationRequest({ identifier: email, provider, token }) {
    const resend = new ResendAPI(provider.apiKey);
    const { error } = await resend.emails.send({
      from: "My App <onboarding@resend.dev>",
      to: [email],
      subject: `Sign in to My App`,
      text: "Your code is " + token,
    });

    if (error) {
      throw new Error("Could not send");
    }
  },
});
```

----------------------------------------

TITLE: Customizing OAuth Profile Information in Convex
DESCRIPTION: TypeScript code demonstrating how to customize the user profile information retrieved from the OAuth provider and stored in the Convex users table.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    GitHub({
      profile(githubProfile, tokens) {
        return {
          id: githubProfile.id,
          name: githubProfile.name,
          email: githubProfile.email,
          image: githubProfile.picture,
          githubId: githubProfile.id,
        };
      },
    }),
  ],
});
```

----------------------------------------

TITLE: Configuring GitHub OAuth Provider in Convex Auth
DESCRIPTION: Implementation of the GitHub OAuth provider configuration in the Convex auth.ts file. This code imports the GitHub provider and adds it to the convexAuth configuration.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [GitHub],
});
```

----------------------------------------

TITLE: Configuring GitHub OAuth Provider in Convex
DESCRIPTION: TypeScript code snippet showing how to configure the GitHub OAuth provider in the Convex auth configuration file.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [GitHub],
});
```

----------------------------------------

TITLE: Validating Email Format with Zod (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `profile` option of the `Password` provider to implement custom email validation logic using the Zod library. It defines a schema for the input parameters and throws a `ConvexError` if validation fails.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_9

LANGUAGE: ts
CODE:
```
import { ConvexError } from "convex/values";
import { Password } from "@convex-dev/auth/providers/Password";
import { z } from "zod";

const ParamsSchema = z.object({
  email: z.string().email(),
});

export default Password({
  profile(params) {
    const { error, data } = ParamsSchema.safeParse(params);
    if (error) {
      throw new ConvexError(error.format());
    }
    return { email: data.email };
  },
});
```

----------------------------------------

TITLE: Configuring Convex Auth with OTP Provider (TypeScript)
DESCRIPTION: Integrates the custom Resend OTP provider into the main Convex Auth server configuration located in `convex/auth.ts`. This makes the `ResendOTP` sign-in method available for use in the application's authentication flow.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { convexAuth } from "@convex-dev/auth/server";
import { ResendOTP } from "./ResendOTP";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [ResendOTP],
});
```

----------------------------------------

TITLE: Implementing Apple Authentication Provider in Convex
DESCRIPTION: TypeScript implementation of the Apple authentication provider in the Convex auth.ts file. This code handles the authentication flow and user profile creation when users sign in with Apple.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import Apple from "@auth/core/providers/apple";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    Apple({
      profile: (appleInfo) => {
        const name = appleInfo.user
          ? `${appleInfo.user.name.firstName} ${appleInfo.user.name.lastName}`
          : undefined;
        return {
          id: appleInfo.sub,
          name: name,
          email: appleInfo.email,
        };
      },
    }),
  ],
});
```

----------------------------------------

TITLE: Implement React Native Sign-in/Sign-up Form
DESCRIPTION: Create a React Native component that uses the useAuthActions hook to handle email and password sign-in and sign-up. It manages email and password state and triggers the signIn action with the 'password' provider and flow ('signIn' or 'signUp') on button press.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useState } from "react";
import { Button, TextInput, View } from "react-native";

export function SignIn() {
  const { signIn } = useAuthActions();
  const [step, setStep] = useState<"signUp" | "signIn">("signIn");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  return (
    <View>
      <TextInput
        placeholder="Email"
        onChangeText={setEmail}
        value={email}
        inputMode="email"
        autoCapitalize="none"
      />
      <TextInput
        placeholder="Password"
        onChangeText={setPassword}
        value={password}
        secureTextEntry
      />
      <Button
        title={step === "signIn" ? "Sign in" : "Sign up"}
        onPress={() => {
          void signIn("password", { email, password, flow: step });
        }}
      />
      <Button
        title={step === "signIn" ? "Sign up instead" : "Sign in instead"}
        onPress={() => setStep(step === "signIn" ? "signUp" : "signIn")}
      />
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring ConvexCredentials Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to set up the ConvexCredentials provider with a custom authorization function. It shows the basic structure for configuring Convex Auth with this provider.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/ConvexCredentials.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import ConvexCredentials from "@convex-dev/auth/providers/ConvexCredentials";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    ConvexCredentials({
      authorize: async (credentials, ctx) => {
        // Your custom logic here...
      },
    }),
  ],
});
```

----------------------------------------

TITLE: Configuring Email Provider with Custom Authorization in TypeScript
DESCRIPTION: This snippet demonstrates how to configure an email authentication provider with custom authorization behavior. It overrides the default email check during token verification, allowing for a 'magic link' style authentication where only the token is required.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Email.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import Email from "@convex-dev/auth/providers/Email";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    Email({ authorize: undefined }),
  ],
});
```

----------------------------------------

TITLE: Implementing Anonymous Sign-in in React Component
DESCRIPTION: React component implementation showing how to trigger anonymous sign-in before performing an authenticated action like sending a message.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

export function SendMessage() {
  const { signIn } = useAuthActions();
  const sendMessage = useMutation(api.messages.send);
  return (
    <form
      onSubmit={(event) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        const message = formData.get("message") as string;
        void signIn("anonymous").then(() => sendMessage({ message }));
      }}
    >
      <input name="message" placeholder="Some text..." type="text" />
      <button type="submit">Send</button>
    </form>
  );
```

----------------------------------------

TITLE: Setting GitHub OAuth Callback URL Format
DESCRIPTION: A template showing the format for the GitHub OAuth callback URL to be used with Convex applications. The URL combines the Convex actions URL with the specific GitHub callback path.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
https://fast-horse-123.convex.site/api/auth/callback/github
```

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that accepts two arguments (a number and a string) and reads data from the database. The function includes argument validation and returns the retrieved documents.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Example of creating a query function that accepts numeric and string arguments, demonstrating database querying and argument validation using Convex's query helper
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});
```

----------------------------------------

TITLE: Setting Google OAuth Client Secret in Convex Environment
DESCRIPTION: Command to set the Google OAuth Client Secret as an environment variable in Convex. This secret is obtained from the Google Cloud Console and is used to authenticate the application with Google's OAuth service.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_GOOGLE_SECRET <yourgooglesecret>
```

----------------------------------------

TITLE: Setting Google OAuth Client ID in Convex Environment
DESCRIPTION: Command to set the Google OAuth Client ID as an environment variable in Convex. This ID is obtained from the Google Cloud Console and is used to identify the application to Google's OAuth service.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_GOOGLE_ID <yourgoogleclientid>
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a Promise.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Implementing Custom Redirect Callback in Convex Auth
DESCRIPTION: Example of implementing a custom redirect callback to control which URLs are allowed as destinations after OAuth sign-in or for magic links. This allows for customizing the post-authentication redirect behavior.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [GitHub],
  callbacks: {
    async redirect({ redirectTo }) {
      // Check that `redirectTo` is valid
      // and return the relative or absolute URL
      // to redirect to.
    },
  },
});
```

----------------------------------------

TITLE: Configuring shouldHandleCode in Next.js Middleware (TypeScript)
DESCRIPTION: This snippet shows how to configure the `shouldHandleCode` option for the `convexAuthNextjsMiddleware`. This function is executed in the middleware when an OAuth redirect with a `code` parameter is detected. It receives the request object and allows developers to decide whether the middleware should handle the code or leave it for a custom handler, useful for preventing conflicts with other OAuth flows.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export default convexAuthNextjsMiddleware(
  (request, { convexAuth }) => {
    // ... route protection logic
  },
  {
    shouldHandleCode: (request) => {
      // Skip handling code parameter for Figma OAuth callback
      if (
        request.nextUrl.pathname.startsWith(
          "/settings/profile/figma-auth-callback",
        )
      ) {
        return false;
      }
      // Handle all other code parameters
      return true;
    },
  },
);
```

----------------------------------------

TITLE: Configuring shouldHandleCode in React Provider (TSX)
DESCRIPTION: This snippet demonstrates how to pass a `shouldHandleCode` callback to the `ConvexAuthProvider` in a React application. This function is called on the client side when an OAuth redirect with a `code` parameter occurs. It allows developers to selectively prevent Convex Auth from handling the code based on criteria like the current URL path, enabling custom OAuth flow handling for specific routes.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
import { ConvexAuthProvider } from "@convex-dev/auth/react";

<ConvexAuthProvider
  client={convex}
  shouldHandleCode={() => {
    // Skip handling code parameter on specific paths
    return location.pathname.startsWith("/auth");
  }}
>
  {children}
</ConvexAuthProvider>;
```

----------------------------------------

TITLE: Customizing Redirect Callback in Convex Auth Configuration
DESCRIPTION: TypeScript code showing how to override the redirect callback in the Convex auth configuration to support multiple redirect URIs.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import GitHub from "@auth/core/providers/github";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [GitHub],
  callbacks: {
    async redirect({ redirectTo }) {
      if (
        redirectTo !== "exp://10.0.1.30:8081" &&
        redirectTo !== "http://localhost:3000"
      ) {
        throw new Error(`Invalid redirectTo URI ${redirectTo}`);
      }
      return redirectTo;
    },
  },
});
```

----------------------------------------

TITLE: Configuring Anonymous Provider for Convex Auth in TypeScript
DESCRIPTION: This code demonstrates how to import and configure the Anonymous authentication provider for Convex Auth. It sets up authentication functions including signIn, signOut, and isAuthenticated that can be used throughout the application.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Anonymous.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Anonymous } from "@convex-dev/auth/providers/Anonymous";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Anonymous],
});
```

----------------------------------------

TITLE: Implementing CAPTCHA Validation for Anonymous Auth
DESCRIPTION: Example of implementing CAPTCHA validation using Cloudflare Turnstile to prevent abuse of anonymous authentication.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { Anonymous } from "@convex-dev/auth/providers/Anonymous";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    Anonymous({
      profile({ token }) {
        let formData = new FormData();
        formData.append("secret", process.env.CLOUDFLARE_TURNSTILE_SECRET);
        formData.append("response", token);
        const url = "https://challenges.cloudflare.com/turnstile/v0/siteverify";
        const response = await fetch(url, {
          body: formData,
          method: "POST",
        });
        const { success } = await response.json();
        if (!success) {
          throw new Error("Didn't pass CAPTCHA");
        }
        return { isAnonymous: true };
      },
    }),
  ],
});
```

----------------------------------------

TITLE: Configuring Cookie Expiration for Convex Auth in Next.js
DESCRIPTION: This snippet shows how to configure the expiration time for the authentication cookie used by Convex Auth in a Next.js application. It sets the cookie to expire after 30 days.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
export default convexAuthNextjsMiddleware(
  (request, { convexAuth }) => {
    // ...
  },
  { cookieConfig: { maxAge: 60 * 60 * 24 * 30 } },
); // 30 days
```

----------------------------------------

TITLE: Installing React Native Storage Dependency
DESCRIPTION: Install `expo-secure-store` using `npx expo install`. This library provides a secure way to store sensitive information like authentication tokens on React Native devices.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#_snippet_11

LANGUAGE: sh
CODE:
```
npx expo install expo-secure-store
```

----------------------------------------

TITLE: Configuring Anonymous Provider in Convex Auth
DESCRIPTION: Sets up the anonymous authentication provider in the Convex auth configuration file. This enables anonymous user sessions in the application.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Anonymous } from "@convex-dev/auth/providers/Anonymous";
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [Anonymous],
});
```

----------------------------------------

TITLE: Enabling Verbose Logging for ConvexReactClient in TypeScript
DESCRIPTION: This snippet demonstrates how to enable verbose logging when instantiating the ConvexReactClient. Verbose logging helps in spotting potential issues and understanding the auth flow.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const client = new ConvexReactClient(process.env.CONVEX_URL, {
  verbose: true,
});
```

----------------------------------------

TITLE: Generating JWT Keys for Convex (Node.js)
DESCRIPTION: A Node.js script that uses the `jose` library to generate an RS256 key pair. It exports the private key in PKCS8 format and the public key as a JWK, then prints them formatted as shell environment variable assignments (JWT_PRIVATE_KEY and JWKS) suitable for copying into the Convex dashboard. Requires the `jose` library to be installed.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import { exportJWK, exportPKCS8, generateKeyPair } from "jose";

const keys = await generateKeyPair("RS256", {
  extractable: true,
});
const privateKey = await exportPKCS8(keys.privateKey);
const publicKey = await exportJWK(keys.publicKey);
const jwks = JSON.stringify({ keys: [{ use: "sig", ...publicKey }] });

process.stdout.write(
  `JWT_PRIVATE_KEY="${privateKey.trimEnd().replace(/\n/g, " ")}"`,
);
process.stdout.write("\n");
process.stdout.write(`JWKS=${jwks}`);
process.stdout.write("\n");
```

----------------------------------------

TITLE: Initializing Convex Auth Helper (TypeScript)
DESCRIPTION: Imports and initializes the convexAuth function from the @convex-dev/auth/server package. It destructures and exports essential functions like auth, signIn, signOut, store, and isAuthenticated which are used throughout the Convex backend for managing authentication state and actions. The providers array is initially empty here, presumably configured elsewhere or dynamically.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { convexAuth } from "@convex-dev/auth/server";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [],
});
```

----------------------------------------

TITLE: Modifying tsconfig.json for Convex Auth (TypeScript Diff)
DESCRIPTION: Shows a diff highlighting necessary changes in the convex/tsconfig.json file. It adds the skipLibCheck: true compiler option and changes moduleResolution from "Node" to "Bundler", which might be required for compatibility with the Convex Auth library and its dependencies.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_4

LANGUAGE: diff
CODE:
```
+    "skipLibCheck": true,
+    "moduleResolution": "Bundler",
-    "moduleResolution": "Node",
```

----------------------------------------

TITLE: Rotating Authentication Keys in Convex Deployment
DESCRIPTION: This command rotates the private and public keys on a production Convex deployment. It's an important step for invalidating existing access tokens after discovering a security vulnerability.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/security.mdx#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx @convex-dev/auth --prod
```

----------------------------------------

TITLE: Exporting isAuthenticated in Convex Auth
DESCRIPTION: This snippet shows how to include the `isAuthenticated` function in the list of exported endpoints from `convexAuth`. This is required for Next.js integration starting from version 0.0.76.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/CHANGELOG.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth(...

```

----------------------------------------

TITLE: Enabling Verbose Logging in Next.js Middleware for Convex Auth
DESCRIPTION: This code snippet shows how to enable verbose logging in the Next.js middleware for Convex Auth. It passes the verbose option to the convexAuthNextjsMiddleware function, which will output logs to the Next.js runtime environment.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
export default convexAuthNextjsMiddleware(optionalHandler, {
  verbose: true,
});
```

----------------------------------------

TITLE: Implementing Sign Out with Convex Auth in React
DESCRIPTION: A React component that uses the useAuthActions hook from @convex-dev/auth/react to provide sign-out functionality. This component renders a button that triggers the signOut function when clicked.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { useAuthActions } from "@convex-dev/auth/react";

export function SignOut() {
  const { signOut } = useAuthActions();
  return <button onClick={() => void signOut()}>Sign out</button>;
}
```

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Example of creating a mutation function that writes data to the database, showing argument validation and database operations using Convex's mutation helper
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Setting SITE_URL for Convex (React Vite)
DESCRIPTION: Configures the SITE_URL environment variable in Convex for a local React project using Vite, pointing to the default development server URL (http://localhost:5173). This variable is used for OAuth redirects and magic links.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npx convex env set SITE_URL http://localhost:5173
```

----------------------------------------

TITLE: Setting Convex GitHub OAuth Client Secret Environment Variable
DESCRIPTION: Command to set the GitHub OAuth client secret as a Convex environment variable using the Convex CLI.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_GITHUB_SECRET <yourgithubsecret>
```

----------------------------------------

TITLE: Creating New Convex Project with Next.js and shadcn/ui Template
DESCRIPTION: Command to create a new Convex project using the Next.js and shadcn/ui template. This is used when starting a new project from scratch.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm create convex@latest -- -t nextjs-shadcn
```

----------------------------------------

TITLE: Setting Convex GitHub OAuth Client ID Environment Variable
DESCRIPTION: Command to set the GitHub OAuth client ID as a Convex environment variable using the Convex CLI.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_GITHUB_ID <yourgithubclientid>
```

----------------------------------------

TITLE: Running Playwright Tests for Convex Auth
DESCRIPTION: This command executes the Playwright end-to-end tests for Convex authentication. It should be run after setting up the test user and environment secret.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
playwright test
```

----------------------------------------

TITLE: Setting up Convex Auth Example Project
DESCRIPTION: Commands to install dependencies and start the development server for the Convex Auth example project.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Configuring Return URL for Apple Authentication with Convex
DESCRIPTION: Example URL format for the Apple authentication callback endpoint. This URL must be registered with Apple for the Sign in with Apple service.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
https://fast-horse-123.convex.site/api/auth/callback/apple
```

----------------------------------------

TITLE: Installing and Running Convex Project with Next.js
DESCRIPTION: Commands to install dependencies and start the development server for a Convex project with Next.js. This is used when cloning an existing codebase.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Setting AUTH_LOG_LEVEL for Convex Functions using Shell Command
DESCRIPTION: This command sets the AUTH_LOG_LEVEL environment variable to DEBUG for Convex functions. This enables verbose logging in the Convex dashboard, which is useful for debugging but should be used cautiously as it may log sensitive information.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
npx convex env set AUTH_LOG_LEVEL DEBUG
```

----------------------------------------

TITLE: Installing and Running Convex Auth Example Project
DESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex Auth example project. It uses npm for package management and running scripts.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Setting Placeholder SITE_URL for Convex (React Native OTP)
DESCRIPTION: Assigns a placeholder value to the SITE_URL environment variable in Convex for React Native projects using OTP providers. Although the specific value is not utilized in this context, the variable must be set to satisfy requirements.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx convex env set SITE_URL http://localhost:3000
```

----------------------------------------

TITLE: Initializing Test User in Convex
DESCRIPTION: This command runs a Convex function to initialize a test user for the end-to-end tests. It should be executed after setting up the Convex deployment for authentication.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx convex run tests:init
```

----------------------------------------

TITLE: Configuring GitHub OAuth Callback URL
DESCRIPTION: Example of the callback URL format for GitHub OAuth integration with Convex. This URL is based on the project's HTTP Actions URL.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
https://fast-horse-123.convex.site/api/auth/callback/github
```

----------------------------------------

TITLE: Setting Convex Environment Secret for E2E Tests
DESCRIPTION: This command sets the AUTH_E2E_TEST_SECRET environment variable in the Convex backend. The secret value should match the one specified in the .env.test file.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx convex env set AUTH_E2E_TEST_SECRET <something>
```

----------------------------------------

TITLE: Running E2E Tests with Local Backend in Bash
DESCRIPTION: This command runs the end-to-end tests using a local Convex backend. It requires setting the CONVEX_LOCAL_BACKEND_PATH environment variable to the path of your local convex-backend repository.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
CONVEX_LOCAL_BACKEND_PATH=/path/to/your/convex-backend npm run test
```

----------------------------------------

TITLE: Listing Convex Auth Modules in Markdown
DESCRIPTION: This snippet lists the available modules in the @convex-dev/auth package, including Next.js integrations, authentication providers, and React and server utilities.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# @convex-dev/auth

## Modules

- [nextjs](api_reference/nextjs.mdx)
- [nextjs/server](api_reference/nextjs/server.mdx)
- [providers/Anonymous](api_reference/providers/Anonymous.mdx)
- [providers/ConvexCredentials](api_reference/providers/ConvexCredentials.mdx)
- [providers/Email](api_reference/providers/Email.mdx)
- [providers/Password](api_reference/providers/Password.mdx)
- [providers/Phone](api_reference/providers/Phone.mdx)
- [react](api_reference/react.mdx)
- [server](api_reference/server.mdx)
```

----------------------------------------

TITLE: Implementing Next.js App Component with Global CSS
DESCRIPTION: This code defines the main App component for a Next.js application. It imports global CSS styles and renders the current page component with its props. This is a standard pattern in Next.js applications for providing a consistent layout or global state.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/_app.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import "./global.css";

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />;
}
```

----------------------------------------

TITLE: Starting Local Development Server for Convex Auth Docs
DESCRIPTION: This command starts the local development server for Convex Auth documentation. It uses npm to run the 'dev' script defined in the project's package.json file.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Importing Image Components in Next.js
DESCRIPTION: This code snippet imports an example image and the Next.js Image component. It's used to display authentication form examples in the documentation.
SOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import exampleForms from "../public/exampleForms.png";
import Image from "next/image";
```

TITLE: Demonstrating Deprecated Direct Convex Function Call - TypeScript
DESCRIPTION: This snippet illustrates a deprecated pattern where a Convex function (`foo`) is called directly from within another Convex function (`bar`). This practice is discouraged because it bypasses argument validation, breaks transactional isolation and atomicity, and can lead to issues like deadlocks, especially with custom functions or triggers. Developers are advised to refactor shared logic into helper functions or use `ctx.runMutation`, `ctx.runQuery`, or `ctx.runAction` for subtransactions.
SOURCE: https://github.com/get-convex/convex-js/blob/main/CHANGELOG.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const foo = mutation(...);

export const bar = mutation({
  args: v.any(),
  returns: v.any(),
  handler: (ctx, args) => {
    const result = await foo();
  })
}
```

----------------------------------------

TITLE: Inserting New Document - Convex.js TypeScript
DESCRIPTION: Inserts a new document into the specified table. The `value` should be the document content without system-managed fields. Returns a Promise resolving to the ID of the newly inserted document.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_18

LANGUAGE: TypeScript
CODE:
```
insert<TableName extends TableNamesInDataModel<DataModel>>(table: TableName, value: WithoutSystemFields<DocumentByName<DataModel, TableName>>): Promise<Id<TableName>>;
```

----------------------------------------

TITLE: Defining Database Schema - Convex.js TypeScript
DESCRIPTION: A function used to define the schema for your Convex database. It takes a schema object and optional configuration, returning a `SchemaDefinition` that guides type generation and validation for your tables.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
export function defineSchema<Schema extends GenericSchema, StrictTableNameTypes extends boolean = true>(schema: Schema, options?: DefineSchemaOptions<StrictTableNameTypes>): SchemaDefinition<Schema, StrictTableNameTypes>;
```

----------------------------------------

TITLE: Deriving Data Model from Schema - Convex.js TypeScript
DESCRIPTION: A utility type that constructs a Convex `DataModel` type based on a provided `SchemaDefinition`. This type is crucial for ensuring type safety across your database interactions by mapping schema definitions to concrete document and field path types.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_21

LANGUAGE: TypeScript
CODE:
```
export type DataModelFromSchemaDefinition<SchemaDef extends SchemaDefinition<any, boolean>> = MaybeMakeLooseDataModel<{
    [TableName in keyof SchemaDef["tables"] & string]: SchemaDef["tables"][TableName] extends TableDefinition<infer Document, infer FieldPaths, infer Indexes, infer SearchIndexes, infer VectorIndexes> ? {
        document: Expand<IdField<TableName> & Document>;
        fieldPaths: keyof IdField<TableName> | FieldPaths;
        indexes: Expand<Indexes & SystemIndexes>;
        searchIndexes: SearchIndexes;
        vectorIndexes: VectorIndexes;
    } : never;
}, SchemaDef["strictTableNameTypes"]>;
```

----------------------------------------

TITLE: Convex Generic Mutation Context Interface
DESCRIPTION: The `GenericMutationCtx` interface defines the context object available within a Convex mutation function. It provides access to authentication information, a database writer for modifying data, a scheduler for deferred tasks, and a storage writer for file operations.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_49

LANGUAGE: TypeScript
CODE:
```
export interface GenericMutationCtx<DataModel extends GenericDataModel> {
    auth: Auth;
    db: GenericDatabaseWriter<DataModel>;
    scheduler: Scheduler;
    storage: StorageWriter;
}
```

----------------------------------------

TITLE: Convex Generic Query Context Interface
DESCRIPTION: The `GenericQueryCtx` interface defines the context object available within a Convex query function. It provides access to authentication information, a database reader for fetching data, and a storage reader for accessing files.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_50

LANGUAGE: TypeScript
CODE:
```
export interface GenericQueryCtx<DataModel extends GenericDataModel> {
    auth: Auth;
    db: GenericDatabaseReader<DataModel>;
    storage: StorageReader;
}
```

----------------------------------------

TITLE: Initializing Table Query - Convex.js TypeScript
DESCRIPTION: Initializes a query builder for a specific table. This is the starting point for constructing database queries, allowing chaining of methods like `filter`, `order`, and `limit`.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
query<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName): QueryInitializer<NamedTableInfo<DataModel, TableName>>;
```

----------------------------------------

TITLE: Defining Auth Interface for User Identity in Convex TypeScript
DESCRIPTION: The `Auth` interface provides a method to retrieve the current user's identity. The `getUserIdentity()` method returns a Promise that resolves to a `UserIdentity` object if a user is authenticated, or `null` otherwise. This is fundamental for implementing authentication and authorization logic.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
export interface Auth {
    getUserIdentity(): Promise<UserIdentity | null>;
}
```

----------------------------------------

TITLE: Retrieving Document by ID - Convex.js TypeScript
DESCRIPTION: Retrieves a single document from the database by its unique ID. Returns a Promise that resolves to the document if found, or `null` otherwise. Requires the table name to infer the document type.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
get<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>): Promise<DocumentByName<DataModel, TableName> | null>;
```

----------------------------------------

TITLE: Replacing Existing Document - Convex.js TypeScript
DESCRIPTION: Completely replaces an existing document with new content. The `value` must include all fields, and system fields can be optionally included. Returns a Promise that resolves upon completion.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_20

LANGUAGE: TypeScript
CODE:
```
replace<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>, value: WithOptionalSystemFields<DocumentByName<DataModel, TableName>>): Promise<void>;
```

----------------------------------------

TITLE: Deleting Document by ID - Convex.js TypeScript
DESCRIPTION: Deletes a document from the database given its ID. This operation is asynchronous and returns a Promise that resolves when the deletion is complete.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
delete(id: Id<TableNamesInDataModel<DataModel>>): Promise<void>;
```

----------------------------------------

TITLE: Defining Ordered Query Interface (TypeScript)
DESCRIPTION: The `OrderedQuery` interface represents a query that can be ordered and provides methods for data retrieval and manipulation. It includes methods for collecting all results, filtering, retrieving the first item, pagination, taking a specific number of items, and retrieving unique items.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_76

LANGUAGE: TypeScript
CODE:
```
export interface OrderedQuery<TableInfo extends GenericTableInfo> extends AsyncIterable<DocumentByInfo<TableInfo>> {
    collect(): Promise<Array<DocumentByInfo<TableInfo>>>;
    filter(predicate: (q: FilterBuilder<TableInfo>) => ExpressionOrValue<boolean>): this;
    first(): Promise<DocumentByInfo<TableInfo> | null>;
    paginate(paginationOpts: PaginationOptions): Promise<PaginationResult<DocumentByInfo<TableInfo>>>;
    take(n: number): Promise<Array<DocumentByInfo<TableInfo>>>;
    unique(): Promise<DocumentByInfo<TableInfo> | null>;
}
```

----------------------------------------

TITLE: Normalizing Document ID - Convex.js TypeScript
DESCRIPTION: Normalizes a string ID into a type-safe `Id` for a given table. This function helps in converting raw string IDs into the correct Convex `Id` type, returning `null` if the ID is invalid.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
normalizeId<TableName extends TableNamesInDataModel<DataModel>>(tableName: TableName, id: string): Id<TableName> | null;
```

----------------------------------------

TITLE: Defining Function References in Convex JS
DESCRIPTION: The `FunctionReference` type defines the structure for referencing Convex functions, including their type (query, mutation, action), visibility (public, internal), argument types, and return type. This allows for strong typing of function calls within the Convex ecosystem.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_38

LANGUAGE: TypeScript
CODE:
```
export type FunctionReference<Type extends FunctionType, Visibility extends FunctionVisibility = "public", Args extends DefaultFunctionArgs = any, ReturnType = any> = {
    _type: Type;
    _visibility: Visibility;
    _args: Args;
    _returnType: ReturnType;
};
```

----------------------------------------

TITLE: Defining Filter Operations in Convex JS
DESCRIPTION: The `FilterBuilder` interface provides a set of methods for constructing complex query expressions. These methods allow for arithmetic operations, logical operations (AND, OR, NOT), comparisons (equality, greater than, less than), and field access, enabling powerful data filtering.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_36

LANGUAGE: TypeScript
CODE:
```
export interface FilterBuilder<TableInfo extends GenericTableInfo> {
    add<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
    and(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;
    div<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
    eq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;
    field<FieldPath extends FieldPaths<TableInfo>>(fieldPath: FieldPath): Expression<FieldTypeFromFieldPath<DocumentByInfo<TableInfo>, FieldPath>>;
    gt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;
    gte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;
    lt<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;
    lte<T extends Value>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
    mod<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
    mul<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
    neg<T extends NumericValue>(x: ExpressionOrValue<T>): Expression<T>;
    neq<T extends Value | undefined>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<boolean>;
    not(x: ExpressionOrValue<boolean>): Expression<boolean>;
    or(...exprs: Array<ExpressionOrValue<boolean>>): Expression<boolean>;
    sub<T extends NumericValue>(l: ExpressionOrValue<T>, r: ExpressionOrValue<T>): Expression<T>;
}
```

----------------------------------------

TITLE: Convex Generic Database Reader Interface
DESCRIPTION: This interface extends `DatabaseReader` to provide read-only access to the database for a generic data model. It's used within query contexts to fetch data.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_43

LANGUAGE: TypeScript
CODE:
```
export interface GenericDatabaseReader<DataModel extends GenericDataModel> extends DatabaseReader<DataModel> { }
```

----------------------------------------

TITLE: Defining TableDefinition Class in Convex
DESCRIPTION: The `TableDefinition` class is used to define the structure and indexes of a single table within a Convex schema. It allows specifying the document type, field paths, and various index types (generic, search, vector).
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_106

LANGUAGE: TypeScript
CODE:
```
export class TableDefinition<Document extends GenericDocument = GenericDocument, FieldPaths extends string = string, Indexes extends GenericTableIndexes = {}, SearchIndexes extends GenericTableSearchIndexes = {}, VectorIndexes extends GenericTableVectorIndexes = {}> {
}
```

----------------------------------------

TITLE: Defining Generic Data Model in Convex JS
DESCRIPTION: The `GenericDataModel` type represents the overall structure of a Convex database, defined as a record where keys are table names and values are `GenericTableInfo` objects describing each table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_45

LANGUAGE: TypeScript
CODE:
```
export type GenericDataModel = Record<string, GenericTableInfo>;
```

----------------------------------------

TITLE: Defining Generic Schema in Convex JS
DESCRIPTION: The `GenericSchema` type represents a Convex schema as a record where keys are table names and values are `TableDefinition` objects, outlining the structure and indexes of each table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_51

LANGUAGE: TypeScript
CODE:
```
export type GenericSchema = Record<string, TableDefinition>;
```

----------------------------------------

TITLE: Defining Generic Document in Convex JS
DESCRIPTION: The `GenericDocument` type defines the basic structure of any document stored in Convex, where keys are string field names and values can be any valid Convex `Value` type.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_46

LANGUAGE: TypeScript
CODE:
```
export type GenericDocument = Record<string, Value>;
```

----------------------------------------

TITLE: Convex Generic Database Writer Interface
DESCRIPTION: This interface extends `DatabaseWriter` to provide read and write access to the database for a generic data model. It's used within mutation contexts to modify data.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_44

LANGUAGE: TypeScript
CODE:
```
export interface GenericDatabaseWriter<DataModel extends GenericDataModel> extends DatabaseWriter<DataModel> { }
```

----------------------------------------

TITLE: Defining Table Indexes in Convex.js TypeScript
DESCRIPTION: These methods define standard and search indexes for a Convex table. `index` creates a B-tree index on specified fields, optionally including a tiebreaker. `searchIndex` configures a full-text search index on a `searchField` with optional `filterFields`.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_107

LANGUAGE: TypeScript
CODE:
```
index<IndexName extends string, FirstFieldPath extends FieldPaths, RestFieldPaths extends FieldPaths[]>(name: IndexName, fields: [FirstFieldPath, ...RestFieldPaths]): TableDefinition<Document, FieldPaths, Expand<Indexes & Record<IndexName, [
FirstFieldPath,
...RestFieldPaths,
IndexTiebreakerField
]>>, SearchIndexes, VectorIndexes>;
searchIndex<IndexName extends string, SearchField extends FieldPaths, FilterFields extends FieldPaths = never>(name: IndexName, indexConfig: Expand<SearchIndexConfig<SearchField, FilterFields>>): TableDefinition<Document, FieldPaths, Indexes, Expand<SearchIndexes & Record<IndexName, {
    searchField: SearchField;
    filterFields: FilterFields;
}>>, VectorIndexes>;
```

----------------------------------------

TITLE: Convex User Identity Interface Definition in TypeScript
DESCRIPTION: This interface defines the structure for a user's identity information, typically obtained from an authentication provider. It includes common fields like email, name, issuer, and subject, along with optional personal details.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_110

LANGUAGE: TypeScript
CODE:
```
export interface UserIdentity {
    readonly address?: string;
    readonly birthday?: string;
    readonly email?: string;
    readonly emailVerified?: boolean;
    readonly familyName?: string;
    readonly gender?: string;
    readonly givenName?: string;
    readonly issuer: string;
    readonly language?: string;
    readonly name?: string;
    readonly nickname?: string;
    readonly phoneNumber?: string;
    readonly phoneNumberVerified?: boolean;
    readonly pictureUrl?: string;
    readonly preferredUsername?: string;
    readonly profileUrl?: string;
    readonly subject: string;
    readonly timezone?: string;
    readonly tokenIdentifier: string;
    readonly updatedAt?: string;
}
```

----------------------------------------

TITLE: Defining StorageWriter Interface in Convex
DESCRIPTION: The `StorageWriter` interface extends `StorageReader` and adds methods for writing and managing stored files in Convex. It includes functionality to delete files by `StorageId` and generate upload URLs for new files.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_105

LANGUAGE: TypeScript
CODE:
```
export interface StorageWriter extends StorageReader {
    delete(storageId: StorageId): Promise<void>;
    generateUploadUrl(): Promise<string>;
}
```

----------------------------------------

TITLE: Defining StorageReader Interface in Convex
DESCRIPTION: The `StorageReader` interface provides methods for reading metadata and URLs for stored files in Convex. It allows retrieving file metadata by `StorageId` and generating a public URL for a stored file.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_104

LANGUAGE: TypeScript
CODE:
```
export interface StorageReader {
    getMetadata(storageId: StorageId): Promise<FileMetadata | null>;
    getUrl(storageId: StorageId): Promise<string | null>;
}
```

----------------------------------------

TITLE: Defining QueryInitializer Interface in Convex
DESCRIPTION: The `QueryInitializer` interface extends `Query<TableInfo>` and provides methods for initializing and refining database queries. It includes `fullTableScan()` for unindexed scans, `withIndex()` for indexed queries, and `withSearchIndex()` for full-text search queries.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_87

LANGUAGE: TypeScript
CODE:
```
export interface QueryInitializer<TableInfo extends GenericTableInfo> extends Query<TableInfo> {
    fullTableScan(): Query<TableInfo>;
    withIndex<IndexName extends IndexNames<TableInfo>>(indexName: IndexName, indexRange?: (q: IndexRangeBuilder<DocumentByInfo<TableInfo>, NamedIndex<TableInfo, IndexName>>) => IndexRange): Query<TableInfo>;
    withSearchIndex<IndexName extends SearchIndexNames<TableInfo>>(indexName: IndexName, searchFilter: (q: SearchFilterBuilder<DocumentByInfo<TableInfo>, NamedSearchIndex<TableInfo, IndexName>>) => SearchFilter): OrderedQuery<TableInfo>;
}
```

----------------------------------------

TITLE: Defining StorageActionWriter Interface in Convex
DESCRIPTION: The `StorageActionWriter` interface extends `StorageWriter` and provides methods for interacting with Convex storage within an action context. It allows retrieving blobs by `StorageId` and storing new blobs with optional SHA-256 hashes.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_102

LANGUAGE: TypeScript
CODE:
```
export interface StorageActionWriter extends StorageWriter {
    get(storageId: StorageId): Promise<Blob | null>;
    store(blob: Blob, options?: {
        sha256?: string;
    }): Promise<StorageId>;
}
```

----------------------------------------

TITLE: Defining Validated Convex Function Interface in TypeScript
DESCRIPTION: This interface defines a Convex function that includes explicit argument validation. It requires an `args` property specifying the validators for input arguments and a `handler` function that receives the validated arguments as an object.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_111

LANGUAGE: TypeScript
CODE:
```
export interface ValidatedFunction<Ctx, ArgsValidator extends PropertyValidators, Output> {
    args: ArgsValidator;
    handler: (ctx: Ctx, args: ObjectType<ArgsValidator>) => Output;
}
```

----------------------------------------

TITLE: Patching Existing Document - Convex.js TypeScript
DESCRIPTION: Applies a partial update to an existing document identified by its ID. Only the fields specified in `value` will be updated, leaving other fields unchanged. Returns a Promise that resolves upon completion.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_19

LANGUAGE: TypeScript
CODE:
```
patch<TableName extends TableNamesInDataModel<DataModel>>(id: Id<TableName>, value: Partial<DocumentByName<DataModel, TableName>>): Promise<void>;
```

----------------------------------------

TITLE: Defining Convex Function Types
DESCRIPTION: This type defines the distinct categories of functions supported by Convex: 'query' for read-only operations, 'mutation' for write operations, and 'action' for operations with side effects or external calls.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_40

LANGUAGE: TypeScript
CODE:
```
export type FunctionType = "query" | "mutation" | "action";
```

----------------------------------------

TITLE: Declaring Public Generic Action Builder in Convex TypeScript
DESCRIPTION: This constant, `actionGeneric`, is a public instance of `ActionBuilder` configured for any data model and public visibility. It serves as a general-purpose builder for defining public Convex actions without specific data model constraints.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export const actionGeneric: ActionBuilder<any, "public">;
```

----------------------------------------

TITLE: Generic HTTP Action Constant in Convex JS
DESCRIPTION: This constant provides a generic way to define public HTTP actions in Convex. It simplifies the creation of HTTP endpoints by providing a pre-configured builder that accepts an action function and returns a `PublicHttpAction`.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_58

LANGUAGE: TypeScript
CODE:
```
export const httpActionGeneric: (func: (ctx: ActionCtx<GenericDataModel>, request: Request) => Promise<Response>) => PublicHttpAction;
```

----------------------------------------

TITLE: Declaring queryGeneric Constant in Convex
DESCRIPTION: The `queryGeneric` constant is a public `QueryBuilder` instance, likely used for defining generic public queries in Convex applications. Its type is `QueryBuilder<any, "public">`.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_86

LANGUAGE: TypeScript
CODE:
```
export const queryGeneric: QueryBuilder<any, "public">;
```

----------------------------------------

TITLE: Defining Table with Validator - Convex.js TypeScript
DESCRIPTION: Defines a database table using a document schema validated by a `Validator` type. This overload is used when your document structure is defined with a specific validation schema, ensuring type safety and data integrity.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
export function defineTable<DocumentSchema extends Validator<Record<string, any>, false, any>>(documentSchema: DocumentSchema): TableDefinition<ExtractDocument<DocumentSchema>, ExtractFieldPaths<DocumentSchema>>;
```

----------------------------------------

TITLE: Document Type by Table Name - Convex.js TypeScript
DESCRIPTION: A utility type that retrieves the document type for a specific table name within a given `DataModel`. This allows for strong typing of documents based on their table context.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_28

LANGUAGE: TypeScript
CODE:
```
export type DocumentByName<DataModel extends GenericDataModel, TableName extends TableNamesInDataModel<DataModel>> = DataModel[TableName]["document"];
```

----------------------------------------

TITLE: Convex Generic Action Context Interface
DESCRIPTION: The `GenericActionCtx` interface defines the context object available within a Convex action function. It provides access to authentication information, methods to run other Convex functions (actions, mutations, queries), a scheduler for deferred tasks, and a storage writer for interacting with files.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_42

LANGUAGE: TypeScript
CODE:
```
export interface GenericActionCtx<DataModel extends GenericDataModel> {
    auth: Auth;
    runAction<Action extends FunctionReference<"action", "public" | "internal">>(action: Action, ...args: OptionalRestArgs<Action>): Promise<FunctionReturnType<Action>>;
    runMutation<Mutation extends FunctionReference<"mutation", "public" | "internal">>(mutation: Mutation, ...args: OptionalRestArgs<Mutation>): Promise<FunctionReturnType<Mutation>>;
    runQuery<Query extends FunctionReference<"query", "public" | "internal">>(query: Query, ...args: OptionalRestArgs<Query>): Promise<FunctionReturnType<Query>>;
    scheduler: Scheduler;
    storage: StorageActionWriter;
}
```

----------------------------------------

TITLE: Defining HTTP Action Builder in Convex JS
DESCRIPTION: The `HttpActionBuilder` type defines a function signature for creating public HTTP actions. It takes a function that handles an HTTP request and returns a Promise of a Response, encapsulating the logic for an HTTP endpoint.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_57

LANGUAGE: TypeScript
CODE:
```
export type HttpActionBuilder = (func: (ctx: GenericActionCtx<any>, request: Request) => Promise<Response>) => PublicHttpAction;
```

----------------------------------------

TITLE: Defining Query Interface (TypeScript)
DESCRIPTION: The `Query` interface extends `OrderedQuery` and adds the capability to specify the order of query results. The `order` method allows sorting results in ascending or descending order based on a specified field.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_82

LANGUAGE: TypeScript
CODE:
```
export interface Query<TableInfo extends GenericTableInfo> extends OrderedQuery<TableInfo> {
    order(order: "asc" | "desc"): OrderedQuery<TableInfo>;
}
```

----------------------------------------

TITLE: Deriving API from Modules Type in Convex TypeScript
DESCRIPTION: The `ApiFromModules` type constructs an API type from a collection of modules. It filters out non-function references, ensuring that the resulting API only includes executable functions. This is crucial for type-safe interaction with Convex functions defined across multiple modules.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export type ApiFromModules<AllModules extends Record<string, object>> = FilterApi<ApiFromModulesAllowEmptyNodes<AllModules>, FunctionReference<any, any, any, any>>;
```

----------------------------------------

TITLE: Defining Table with Object Validator - Convex.js TypeScript
DESCRIPTION: Defines a database table using a document schema composed of a record of `Validator` types. This overload is suitable for defining tables where each field's schema is specified individually using a validator.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_26

LANGUAGE: TypeScript
CODE:
```
export function defineTable<DocumentSchema extends Record<string, Validator<any, any, any>>>(documentSchema: DocumentSchema): TableDefinition<ExtractDocument<ObjectValidator<DocumentSchema>>, ExtractFieldPaths<ObjectValidator<DocumentSchema>>>;
```

----------------------------------------

TITLE: Defining AnyDataModel Type for Convex in TypeScript
DESCRIPTION: The `AnyDataModel` type defines a generic structure for any Convex data model. It specifies that a data model is a record where keys are table names, and each table contains a document type, generic field paths, and definitions for indexes, search indexes, and vector indexes. This allows for flexible data model definitions.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
export type AnyDataModel = {
    [tableName: string]: {
        document: any;
        fieldPaths: GenericFieldPaths;
        indexes: {};
        searchIndexes: {};
        vectorIndexes: {};
    };
};
```

----------------------------------------

TITLE: Crons Class for Scheduling Jobs in Convex TypeScript
DESCRIPTION: The `Crons` class provides methods for defining and managing various types of scheduled cron jobs. It includes methods like `cron`, `daily`, `hourly`, `interval`, `monthly`, and `weekly` to schedule functions with different granularities. The `crons` property stores the defined cron jobs.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
export class Crons {
    constructor();
    cron<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, cron: CronString, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
    crons: Record<string, CronJob>;
    daily<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Daily, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
    hourly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Hourly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
    interval<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Interval, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
    isCrons: true;
    monthly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Monthly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
    weekly<FuncRef extends SchedulableFunctionReference>(cronIdentifier: string, schedule: Weekly, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): void;
}
```

----------------------------------------

TITLE: Field Type from Path - Convex.js TypeScript
DESCRIPTION: A recursive utility type that infers the type of a field within a document given its string path. It supports nested paths (e.g., 'user.address.street'), providing precise type inference for deep properties.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_32

LANGUAGE: TypeScript
CODE:
```
export type FieldTypeFromFieldPath<Document extends GenericDocument, FieldPath extends string> = FieldPath extends `${infer First}.${infer Second}` ? First extends keyof Document ? Document[First] extends GenericDocument ? FieldTypeFromFieldPath<Document[First], Second> : undefined : undefined : FieldPath extends keyof Document ? Document[FieldPath] : undefined;
```

----------------------------------------

TITLE: Defining AnyApi Type for Convex Modules in TypeScript
DESCRIPTION: The `AnyApi` type represents the structure of any Convex API, mapping module names to records of function or directory names, which in turn map to `AnyModuleDirOrFunc`. This type is used for generic API access and introspection within the Convex system.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export type AnyApi = Record<string, Record<string, AnyModuleDirOrFunc>>;
```

----------------------------------------

TITLE: Extending Object Validators with .fields Property - TypeScript
DESCRIPTION: This snippet demonstrates how to extend an existing object validator by leveraging the new `.fields` property. The `message.fields` property exposes the individual validators for each property, allowing them to be spread into a new validator definition. This enables the creation of new validators that build upon existing ones, facilitating modular and reusable validation logic.
SOURCE: https://github.com/get-convex/convex-js/blob/main/CHANGELOG.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const message = v.object({ user: v.string(), body: v.string() });
const imageMessage = v.object({ ...message.fields, })
```

----------------------------------------

TITLE: Convex HTTP Router Class
DESCRIPTION: The `HttpRouter` class is likely used to define and manage HTTP routes within a Convex application, allowing developers to map incoming HTTP requests to specific Convex action functions.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_59

LANGUAGE: TypeScript
CODE:
```
export class HttpRouter { }
```

----------------------------------------

TITLE: Defining QueryBuilder Overloads in Convex
DESCRIPTION: This snippet defines the `QueryBuilder` type, which is used to register Convex query functions. It includes two overloads: one for validated functions using `ArgsValidator` and another for unvalidated functions using `ArgsArray`.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_84

LANGUAGE: TypeScript
CODE:
```
<Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericQueryCtx<DataModel>, ArgsValidator, Output>): RegisteredQuery<Visibility, ObjectType<ArgsValidator>, Output>;
<Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericQueryCtx<DataModel>, Args, Output>): RegisteredQuery<Visibility, ArgsArrayToObject<Args>, Output>;
```

----------------------------------------

TITLE: Defining Mutation Builder Type (TypeScript)
DESCRIPTION: The `MutationBuilder` type defines a factory for creating registered mutations, supporting both validated and unvalidated function signatures. It allows developers to define how mutations interact with the data model and their visibility.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_69

LANGUAGE: TypeScript
CODE:
```
export type MutationBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {
    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericMutationCtx<DataModel>, ArgsValidator, Output>): RegisteredMutation<Visibility, ObjectType<ArgsValidator>, Output>;
    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericMutationCtx<DataModel>, Args, Output>): RegisteredMutation<Visibility, ArgsArrayToObject<Args>, Output>;
};
```

----------------------------------------

TITLE: Defining Public Mutation Builder (TypeScript)
DESCRIPTION: This constant, `mutationGeneric`, is a `MutationBuilder` configured for public mutations. It's used to define and register mutations that are accessible from client applications.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_71

LANGUAGE: TypeScript
CODE:
```
export const mutationGeneric: MutationBuilder<any, "public">;
```

----------------------------------------

TITLE: Schema Definition Options Interface - Convex.js TypeScript
DESCRIPTION: Defines the optional parameters for the `defineSchema` function. It allows configuring schema validation and strictness of table name types, influencing how the schema is enforced and types are generated.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_24

LANGUAGE: TypeScript
CODE:
```
export interface DefineSchemaOptions<StrictTableNameTypes extends boolean> {
    schemaValidation?: boolean;
    strictTableNameTypes?: StrictTableNameTypes;
}
```

----------------------------------------

TITLE: Defining Public HTTP Action Type (TypeScript)
DESCRIPTION: The `PublicHttpAction` type defines the signature for a public HTTP action in Convex. It specifies that the action is a function taking a context and a request, returning a response, and includes flags indicating it's an HTTP action and optionally registered.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_81

LANGUAGE: TypeScript
CODE:
```
export type PublicHttpAction = {
    (ctx: GenericActionCtx<any>, request: Request): Response;
    isHttp: true;
    isRegistered?: true;
};
```

----------------------------------------

TITLE: Defining Scheduler Interface in Convex
DESCRIPTION: The `Scheduler` interface provides methods for scheduling Convex functions to run at a future time. It includes `runAfter` to schedule a function after a specified delay and `runAt` to schedule it at a specific timestamp or Date object.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_94

LANGUAGE: TypeScript
CODE:
```
export interface Scheduler {
    runAfter<FuncRef extends SchedulableFunctionReference>(delayMs: number, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;
    runAt<FuncRef extends SchedulableFunctionReference>(timestamp: number | Date, functionReference: FuncRef, ...args: OptionalRestArgs<FuncRef>): Promise<void>;
}
```

----------------------------------------

TITLE: Defining SchemaDefinition Class in Convex
DESCRIPTION: The `SchemaDefinition` class is used to define the schema for a Convex database. It holds the `tables` definition, which is a `GenericSchema`, and a `strictTableNameTypes` boolean flag to enforce strict type checking for table names.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_95

LANGUAGE: TypeScript
CODE:
```
export class SchemaDefinition<Schema extends GenericSchema, StrictTableTypes extends boolean> {
    // (undocumented)
    strictTableNameTypes: StrictTableTypes;
    // (undocumented)
    tables: Schema;
}
```

----------------------------------------

TITLE: Defining HttpRouter Function Reference (TypeScript)
DESCRIPTION: This snippet defines `httpRouter`, a public constant that is a function reference returning an `HttpRouter` instance. It's used to access the HTTP router functionality within the Convex application.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_60

LANGUAGE: TypeScript
CODE:
```
export const httpRouter: () => HttpRouter;
```

----------------------------------------

TITLE: Defining ActionBuilder Type in Convex TypeScript
DESCRIPTION: This type definition describes `ActionBuilder`, a utility for creating Convex actions. It supports both validated and unvalidated functions, allowing developers to define actions with specific input argument validation or more flexible argument handling. It returns a `RegisteredAction` type.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type ActionBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {
    <Output, ArgsValidator extends PropertyValidators>(func: ValidatedFunction<GenericActionCtx<DataModel>, ArgsValidator, Output>): RegisteredAction<Visibility, ObjectType<ArgsValidator>, Output>;
    <Output, Args extends ArgsArray = OneArgArray>(func: UnvalidatedFunction<GenericActionCtx<DataModel>, Args, Output>): RegisteredAction<Visibility, ArgsArrayToObject<Args>, Output>;
};
```

----------------------------------------

TITLE: Defining Generic Table Information in Convex JS
DESCRIPTION: The `GenericTableInfo` type provides a comprehensive definition of a Convex table, including its document structure, available field paths, and configurations for regular, search, and vector indexes.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_54

LANGUAGE: TypeScript
CODE:
```
export type GenericTableInfo = {
    document: GenericDocument;
    fieldPaths: GenericFieldPaths;
    indexes: GenericTableIndexes;
    searchIndexes: GenericTableSearchIndexes;
    vectorIndexes: GenericTableVectorIndexes;
};
```

----------------------------------------

TITLE: Defining Pagination Result Interface (TypeScript)
DESCRIPTION: The `PaginationResult` interface defines the structure of the response from a paginated query. It includes a `continueCursor` for the next page, an `isDone` flag indicating if there are more pages, and the `page` array containing the current batch of items.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_79

LANGUAGE: TypeScript
CODE:
```
export interface PaginationResult<T> {
    continueCursor: Cursor;
    isDone: boolean;
    page: T[];
}
```

----------------------------------------

TITLE: Removing System Fields from Convex Document Type in TypeScript
DESCRIPTION: This type utility creates a new document type by omitting Convex's internal system fields (like `_id` and other `SystemFields`) from a `GenericDocument`. It's useful for defining document structures without exposing internal metadata.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_112

LANGUAGE: TypeScript
CODE:
```
export type WithoutSystemFields<Document extends GenericDocument> = Expand<BetterOmit<Document, keyof SystemFields | "_id">>;
```

----------------------------------------

TITLE: Defining Query Builder Type (TypeScript)
DESCRIPTION: The `QueryBuilder` type defines a factory for creating registered queries, similar to `MutationBuilder`. It allows developers to define how queries interact with the data model and their visibility, enabling both validated and unvalidated function signatures.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_83

LANGUAGE: TypeScript
CODE:
```
export type QueryBuilder<DataModel extends GenericDataModel, Visibility extends FunctionVisibility> = {
```

----------------------------------------

TITLE: Defining SchedulableFunctionReference Type in Convex
DESCRIPTION: The `SchedulableFunctionReference` type defines a reference to a Convex function that can be scheduled for future execution. It specifies that only 'mutation' or 'action' functions with 'public' or 'internal' visibility can be scheduled.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_93

LANGUAGE: TypeScript
CODE:
```
export type SchedulableFunctionReference = FunctionReference<"mutation" | "action", "public" | "internal">;
```

----------------------------------------

TITLE: Defining CronJob Interface in Convex TypeScript
DESCRIPTION: The `CronJob` interface defines the structure for a scheduled background task in Convex. It includes `args` for the job's input parameters (as `JSONValue`), a unique `name` for identification, and a `schedule` defining when the job should run. This interface is used for managing automated tasks.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
export interface CronJob {
    args: JSONValue;
    name: string;
    schedule: Schedule;
}
```

----------------------------------------

TITLE: Defining Named Table Info Type (TypeScript)
DESCRIPTION: The `NamedTableInfo` type extracts the type information for a specific table from the `DataModel` based on its name. This allows for strongly typed access to the schema and properties of a particular table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_74

LANGUAGE: TypeScript
CODE:
```
export type NamedTableInfo<DataModel extends GenericDataModel, TableName extends keyof DataModel> = DataModel[TableName];
```

----------------------------------------

TITLE: Document Type by Table Info - Convex.js TypeScript
DESCRIPTION: A utility type that extracts the document type from a `GenericTableInfo` object. This is useful for inferring the exact shape of documents when working with table metadata.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_27

LANGUAGE: TypeScript
CODE:
```
export type DocumentByInfo<TableInfo extends GenericTableInfo> = TableInfo["document"];
```

----------------------------------------

TITLE: Defining Pagination Options Interface (TypeScript)
DESCRIPTION: The `PaginationOptions` interface defines the parameters required for paginating query results. It includes `cursor` for continuing from a previous page and `numItems` to specify the number of items per page.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_77

LANGUAGE: TypeScript
CODE:
```
export interface PaginationOptions {
    cursor: Cursor | null;
    numItems: number;
}
```

----------------------------------------

TITLE: Defining RegisteredQuery Type in Convex
DESCRIPTION: The `RegisteredQuery` type represents a Convex query function that has been registered. It defines the function signature, including the `GenericQueryCtx` context and arguments, along with boolean flags (`isConvexFunction`, `isQuery`, `isRegistered`) and visibility properties.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_90

LANGUAGE: TypeScript
CODE:
```
export type RegisteredQuery<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {
    (ctx: GenericQueryCtx<any>, args: Args): Output;
    isConvexFunction: true;
    isQuery: true;
    isRegistered?: true;
} & VisibilityProperties<Visibility>;
```

----------------------------------------

TITLE: Defining RegisteredAction Type in Convex
DESCRIPTION: The `RegisteredAction` type represents a Convex action function that has been registered. It defines the function signature, including the `GenericActionCtx` context and arguments, along with boolean flags (`isConvexFunction`, `isAction`, `isRegistered`) and visibility properties.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_88

LANGUAGE: TypeScript
CODE:
```
export type RegisteredAction<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {
    (ctx: GenericActionCtx<any>, args: Args): Output;
    isConvexFunction: true;
    isAction: true;
    isRegistered?: true;
} & VisibilityProperties<Visibility>;
```

----------------------------------------

TITLE: Defining SearchIndexConfig Interface in Convex
DESCRIPTION: The `SearchIndexConfig` interface defines the structure for configuring a search index in Convex. It specifies the `searchField` for full-text search and optional `filterFields` for additional filtering capabilities.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_99

LANGUAGE: TypeScript
CODE:
```
export interface SearchIndexConfig<SearchField extends string, FilterFields extends string> {
    filterFields?: FilterFields[];
    searchField: SearchField;
}
```

----------------------------------------

TITLE: Defining Cursor Type in Convex TypeScript
DESCRIPTION: The `Cursor` type is defined as a string. In Convex, a cursor is typically used for pagination in database queries, allowing retrieval of data in chunks by marking a specific point in a result set. It helps in efficiently fetching large datasets.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
export type Cursor = string;
```

----------------------------------------

TITLE: Defining Generic Table Search Indexes in Convex JS
DESCRIPTION: This type defines the structure for generic table search indexes, represented as a record where keys are search index names and values are `GenericSearchIndexConfig` objects, detailing the configuration for each search index.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_55

LANGUAGE: TypeScript
CODE:
```
export type GenericTableSearchIndexes = Record<string, GenericSearchIndexConfig>;
```

----------------------------------------

TITLE: Defining Generic Search Index Configuration in Convex JS
DESCRIPTION: This type defines the configuration for a generic search index, specifying the primary field used for searching (`searchField`) and additional fields that can be used for filtering search results (`filterFields`).
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_52

LANGUAGE: TypeScript
CODE:
```
export type GenericSearchIndexConfig = {
    searchField: string;
    filterFields: string;
};
```

----------------------------------------

TITLE: Defining Pagination Options Validator (TypeScript)
DESCRIPTION: This constant, `paginationOptsValidator`, is an `ObjectValidator` used to validate the structure and types of `PaginationOptions`. It ensures that `numItems` is a number, `cursor` is a string or null, and `id` is an optional number.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_78

LANGUAGE: TypeScript
CODE:
```
export const paginationOptsValidator: ObjectValidator<    {
numItems: Validator<number, false, never>;
cursor: Validator<string | null, false, never>;
id: Validator<number | undefined, true, never>;
}>;
```

----------------------------------------

TITLE: Defining RoutableMethod Type in Convex
DESCRIPTION: The `RoutableMethod` type is a union type derived from `ROUTABLE_HTTP_METHODS`, representing any single HTTP method that can be used for routing in Convex. This provides type safety for HTTP method declarations.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_92

LANGUAGE: TypeScript
CODE:
```
export type RoutableMethod = (typeof ROUTABLE_HTTP_METHODS)[number];
```

----------------------------------------

TITLE: Defining SearchFilterBuilder Interface in Convex
DESCRIPTION: The `SearchFilterBuilder` interface provides a method to initiate a search query. The `search` method takes a field name and a query string, returning a `SearchFilterFinalizer` to further refine the search.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_97

LANGUAGE: TypeScript
CODE:
```
export interface SearchFilterBuilder<Document extends GenericDocument, SearchIndexConfig extends GenericSearchIndexConfig> {
    search(fieldName: SearchIndexConfig["searchField"], query: string): SearchFilterFinalizer<Document, SearchIndexConfig>;
}
```

----------------------------------------

TITLE: Defining Convex Function Visibility
DESCRIPTION: This type specifies the visibility of Convex functions, categorizing them as either 'public' (callable from clients) or 'internal' (callable only from other Convex functions).
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_41

LANGUAGE: TypeScript
CODE:
```
export type FunctionVisibility = "public" | "internal";
```

----------------------------------------

TITLE: Declaring ROUTABLE_HTTP_METHODS Constant in Convex
DESCRIPTION: The `ROUTABLE_HTTP_METHODS` constant is a `readonly` array that lists all HTTP methods supported for routing in Convex. This ensures consistency and limits the allowed methods for HTTP endpoints.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_91

LANGUAGE: TypeScript
CODE:
```
export const ROUTABLE_HTTP_METHODS: readonly ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"];
```

----------------------------------------

TITLE: Extracting Function Return Type in Convex JS
DESCRIPTION: This type alias allows for extracting the return type of any Convex function reference. It's crucial for maintaining type safety when working with the results of Convex function calls.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_39

LANGUAGE: TypeScript
CODE:
```
export type FunctionReturnType<FuncRef extends AnyFunctionReference> = FuncRef["_returnType"];
```

----------------------------------------

TITLE: Creating Function Reference (TypeScript)
DESCRIPTION: The `makeFunctionReference` function creates a reference to a Convex function by its name. It allows specifying the function's type, arguments, and return type, making it callable from other parts of the application.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_68

LANGUAGE: TypeScript
CODE:
```
export function makeFunctionReference<type extends FunctionType, args extends DefaultFunctionArgs = any, ret = any>(name: string): FunctionReference<type, "public", args, ret>;
```

----------------------------------------

TITLE: Declaring CronJobs Factory Function in Convex TypeScript
DESCRIPTION: The `cronJobs` constant is a public factory function that returns an instance of the `Crons` class. This function provides the entry point for defining and managing scheduled cron jobs within a Convex application.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
export const cronJobs: () => Crons;
```

----------------------------------------

TITLE: Defining Internal Mutation Builder (TypeScript)
DESCRIPTION: This constant, `internalMutationGeneric`, is a `MutationBuilder` configured for internal mutations. It's used to define and register mutations that are not exposed publicly and are intended for internal system use.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_66

LANGUAGE: TypeScript
CODE:
```
export const internalMutationGeneric: MutationBuilder<any, "internal">;
```

----------------------------------------

TITLE: Defining Internal Action Builder (TypeScript)
DESCRIPTION: This constant, `internalActionGeneric`, is an `ActionBuilder` configured for internal actions. It's used to define and register actions that are not exposed publicly and are intended for internal system use.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_65

LANGUAGE: TypeScript
CODE:
```
export const internalActionGeneric: ActionBuilder<any, "internal">;
```

----------------------------------------

TITLE: Defining Internal Query Builder (TypeScript)
DESCRIPTION: This constant, `internalQueryGeneric`, is a `QueryBuilder` configured for internal queries. It's used to define and register queries that are not exposed publicly and are intended for internal system use.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_67

LANGUAGE: TypeScript
CODE:
```
export const internalQueryGeneric: QueryBuilder<any, "internal">;
```

----------------------------------------

TITLE: Defining SearchIndexes Type in Convex
DESCRIPTION: The `SearchIndexes` type extracts the search index definitions from a given `TableInfo` type. It provides a way to access the configured search indexes for a specific table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_100

LANGUAGE: TypeScript
CODE:
```
export type SearchIndexes<TableInfo extends GenericTableInfo> = TableInfo["searchIndexes"];
```

----------------------------------------

TITLE: Defining ArgsAndOptions Type for Function Calls in Convex TypeScript
DESCRIPTION: The `ArgsAndOptions` type defines the expected arguments and options for calling a Convex function. It conditionally types the `args` parameter: if the function takes no arguments (`EmptyObject`), `args` is optional; otherwise, it's required. This provides type safety for function invocations.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
export type ArgsAndOptions<FuncRef extends AnyFunctionReference, Options> = FuncRef["_args"] extends EmptyObject ? [args?: EmptyObject, options?: Options] : [args: FuncRef["_args"], options?: Options];
```

----------------------------------------

TITLE: Default Function Arguments Type - Convex.js TypeScript
DESCRIPTION: Defines a generic type for default function arguments, representing a record where keys are strings and values can be of any unknown type. This is commonly used for defining the shape of arguments passed to Convex functions.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
export type DefaultFunctionArgs = Record<string, unknown>;
```

----------------------------------------

TITLE: Declaring Generic AnyApi Constant in Convex TypeScript
DESCRIPTION: This constant, `anyApi`, is a public instance of the `AnyApi` type. It provides a generic reference to the entire Convex API surface, useful for operations that need to interact with any part of the API without specific type constraints.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export const anyApi: AnyApi;
```

----------------------------------------

TITLE: Field Paths Type by Table Info - Convex.js TypeScript
DESCRIPTION: A utility type that extracts the field paths available for a document within a given `GenericTableInfo`. This is useful for type-checking and auto-completion when specifying document fields in queries or updates.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_31

LANGUAGE: TypeScript
CODE:
```
export type FieldPaths<TableInfo extends GenericTableInfo> = TableInfo["fieldPaths"];
```

----------------------------------------

TITLE: File Metadata Type - Convex.js TypeScript
DESCRIPTION: Defines the structure for metadata associated with files stored in Convex. It includes essential information like storage ID, SHA256 hash, file size, and content type, useful for managing uploaded files.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_33

LANGUAGE: TypeScript
CODE:
```
export type FileMetadata = {
    storageId: StorageId;
    sha256: string;
    size: number;
    contentType: string | null;
};
```

----------------------------------------

TITLE: Defining ArgsArray Type in Convex TypeScript
DESCRIPTION: The `ArgsArray` type represents the possible forms of argument arrays for Convex functions. It can be either `OneArgArray` (for functions taking a single argument) or `NoArgsArray` (for functions taking no arguments). This type helps in defining flexible function signatures.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
export type ArgsArray = OneArgArray | NoArgsArray;
```

----------------------------------------

TITLE: Extracting Table Names from Convex Data Model TypeScript
DESCRIPTION: This type utility extracts the names of all tables defined within a `GenericDataModel`. It ensures that the returned table names are valid string keys from the data model.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_108

LANGUAGE: TypeScript
CODE:
```
export type TableNamesInDataModel<DataModel extends GenericDataModel> = keyof DataModel & string;
```

----------------------------------------

TITLE: Extracting Function Arguments in Convex JS
DESCRIPTION: This type alias provides a convenient way to extract the argument types of any Convex function reference. It's useful for ensuring type safety when calling Convex functions dynamically or when defining higher-order functions that operate on Convex function references.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_37

LANGUAGE: TypeScript
CODE:
```
export type FunctionArgs<FuncRef extends AnyFunctionReference> = FuncRef["_args"];
```

----------------------------------------

TITLE: Defining RegisteredMutation Type in Convex
DESCRIPTION: The `RegisteredMutation` type represents a Convex mutation function that has been registered. It defines the function signature, including the `GenericMutationCtx` context and arguments, along with boolean flags (`isConvexFunction`, `isMutation`, `isRegistered`) and visibility properties.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_89

LANGUAGE: TypeScript
CODE:
```
export type RegisteredMutation<Visibility extends FunctionVisibility, Args extends DefaultFunctionArgs, Output> = {
    (ctx: GenericMutationCtx<any>, args: Args): Output;
    isConvexFunction: true;
    isMutation: true;
    isRegistered?: true;
} & VisibilityProperties<Visibility>;
```

----------------------------------------

TITLE: Retrieving Function Name in Convex JS
DESCRIPTION: This utility function extracts the string name of a Convex function from its `AnyFunctionReference`. It's useful for logging, debugging, or dynamic function invocation where the string name is required.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_56

LANGUAGE: TypeScript
CODE:
```
export function getFunctionName(functionReference: AnyFunctionReference): string;
```

----------------------------------------

TITLE: Defining StorageId Type in Convex
DESCRIPTION: The `StorageId` type is a simple string alias used to represent a unique identifier for stored files or blobs in Convex storage. It ensures type consistency when referencing stored data.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_103

LANGUAGE: TypeScript
CODE:
```
export type StorageId = string;
```

----------------------------------------

TITLE: Defining Table Indexes Type (TypeScript)
DESCRIPTION: This type alias, `Indexes`, extracts the 'indexes' property from a `GenericTableInfo` type. It's used to represent the collection of indexes available for a specific table in the data model.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_61

LANGUAGE: TypeScript
CODE:
```
export type Indexes<TableInfo extends GenericTableInfo> = TableInfo["indexes"];
```

----------------------------------------

TITLE: Defining Generic Field Paths in Convex JS
DESCRIPTION: This type specifies that generic field paths within a Convex document are represented as strings, typically using dot notation for nested fields.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_47

LANGUAGE: TypeScript
CODE:
```
export type GenericFieldPaths = string;
```

----------------------------------------

TITLE: Defining Table Index Names Type (TypeScript)
DESCRIPTION: This type alias, `IndexNames`, derives the union of string literal keys from the `Indexes` type for a given `TableInfo`. It provides a way to refer to the names of indexes defined on a table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_62

LANGUAGE: TypeScript
CODE:
```
export type IndexNames<TableInfo extends GenericTableInfo> = keyof Indexes<TableInfo>;
```

----------------------------------------

TITLE: Defining Generic Table Indexes in Convex JS
DESCRIPTION: This type defines the structure for generic table indexes, represented as a record where keys are index names and values are `GenericIndexFields` arrays, specifying the fields included in each index.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_53

LANGUAGE: TypeScript
CODE:
```
export type GenericTableIndexes = Record<string, GenericIndexFields>;
```

----------------------------------------

TITLE: Defining SearchIndexNames Type in Convex
DESCRIPTION: The `SearchIndexNames` type extracts the names of all search indexes defined for a given `TableInfo`. It provides a convenient way to get a union of all available search index names for a table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_101

LANGUAGE: TypeScript
CODE:
```
export type SearchIndexNames<TableInfo extends GenericTableInfo> = keyof SearchIndexes<TableInfo>;
```

----------------------------------------

TITLE: Filtering API with Convex JS
DESCRIPTION: This function provides a type-safe way to filter an API based on a given predicate. It's typically used to narrow down the available functions or data structures within a larger API.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_35

LANGUAGE: TypeScript
CODE:
```
export function filterApi<API, Predicate>(api: API): FilterApi<API, Predicate>;
```

----------------------------------------

TITLE: Filtering API by Predicate - Convex.js TypeScript
DESCRIPTION: A utility type that filters an API object, retaining only modules or functions that match a given `Predicate` type. It recursively traverses the API structure, useful for generating subsets of an API based on specific criteria.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_34

LANGUAGE: TypeScript
CODE:
```
export type FilterApi<API, Predicate> = Expand<{
    [mod in keyof API as API[mod] extends Predicate ? mod : API[mod] extends FunctionReference<any, any, any, any> ? never : FilterApi<API[mod], Predicate> extends Record<string, never> ? never : mod]: API[mod] extends Predicate ? API[mod] : FilterApi<API[mod], Predicate>;
}>;
```

----------------------------------------

TITLE: Defining Generic Index Fields in Convex JS
DESCRIPTION: This type defines generic index fields as an array of strings, where each string represents a field path included in an index.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_48

LANGUAGE: TypeScript
CODE:
```
export type GenericIndexFields = string[];
```

----------------------------------------

TITLE: Defining IndexRangeBuilder Interface (TypeScript)
DESCRIPTION: The `IndexRangeBuilder` interface extends `LowerBoundIndexRangeBuilder` and provides methods for constructing index range queries. The `eq` method allows specifying an exact equality match for a given field within the index.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_64

LANGUAGE: TypeScript
CODE:
```
export interface IndexRangeBuilder<Document extends GenericDocument, IndexFields extends GenericIndexFields, FieldNum extends number = 0> extends LowerBoundIndexRangeBuilder<Document, IndexFields[FieldNum]> {
    eq(fieldName: IndexFields[FieldNum], value: FieldTypeFromFieldPath<Document, IndexFields[FieldNum]>): NextIndexRangeBuilder<Document, IndexFields, FieldNum>;
}
```

----------------------------------------

TITLE: Defining SearchFilterFinalizer Interface in Convex
DESCRIPTION: The `SearchFilterFinalizer` interface extends `SearchFilter` and allows for further refinement of a search query. The `eq` method can be used to add equality filters on specified fields, returning another `SearchFilterFinalizer` for chaining.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_98

LANGUAGE: TypeScript
CODE:
```
export interface SearchFilterFinalizer<Document extends GenericDocument, SearchIndexConfig extends GenericSearchIndexConfig> extends SearchFilter {
    eq<FieldName extends SearchIndexConfig["filterFields"]>(fieldName: FieldName, value: FieldTypeFromFieldPath<Document, FieldName>): SearchFilterFinalizer<Document, SearchIndexConfig>;
}
```

----------------------------------------

TITLE: Defining Named Index Type (TypeScript)
DESCRIPTION: The `NamedIndex` type extracts a specific index definition from the `Indexes` type based on its name. It allows for strongly typed access to individual index configurations for a given table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_72

LANGUAGE: TypeScript
CODE:
```
export type NamedIndex<TableInfo extends GenericTableInfo, IndexName extends IndexNames<TableInfo>> = Indexes<TableInfo>[IndexName];
```

----------------------------------------

TITLE: Abstract Expression Class - Convex.js TypeScript
DESCRIPTION: An abstract base class for expressions, typically used in query building or data manipulation. It represents a value or an operation that evaluates to a value, allowing for flexible query construction.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_29

LANGUAGE: TypeScript
CODE:
```
export abstract class Expression<T extends Value | undefined> {
}
```

----------------------------------------

TITLE: Defining Named Search Index Type (TypeScript)
DESCRIPTION: The `NamedSearchIndex` type extracts a specific search index definition from the `SearchIndexes` type based on its name. It provides strongly typed access to individual search index configurations for a given table.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_73

LANGUAGE: TypeScript
CODE:
```
export type NamedSearchIndex<TableInfo extends GenericTableInfo, IndexName extends SearchIndexNames<TableInfo>> = SearchIndexes<TableInfo>[IndexName];
```

----------------------------------------

TITLE: Defining SearchFilter Abstract Class in Convex
DESCRIPTION: The `SearchFilter` is an abstract class that serves as the base for all search filter implementations in Convex. It provides a common interface for defining search criteria.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_96

LANGUAGE: TypeScript
CODE:
```
export abstract class SearchFilter {
}
```

----------------------------------------

TITLE: Expression or Value Type - Convex.js TypeScript
DESCRIPTION: A union type representing either an `Expression` or a direct `Value`. This type is used in contexts where a parameter can accept either a literal value or a computed expression, providing flexibility in API usage.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_30

LANGUAGE: TypeScript
CODE:
```
export type ExpressionOrValue<T extends Value | undefined> = Expression<T> | T;
```

----------------------------------------

TITLE: Defining Unvalidated Convex Function Type in TypeScript
DESCRIPTION: This type represents a Convex function that does not have explicit argument validation defined. It can be a direct handler function or an object containing a `handler` property, accepting a context and an array of arguments.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_109

LANGUAGE: TypeScript
CODE:
```
export type UnvalidatedFunction<Ctx, Args extends ArgsArray, Output> = ((ctx: Ctx, ...args: Args) => Output) | {
    handler: (ctx: Ctx, ...args: Args) => Output;
};
```

----------------------------------------

TITLE: Defining Partial API Type (TypeScript)
DESCRIPTION: The `PartialApi` type creates a partial representation of an API structure, making all properties optional. It recursively applies this transformation, allowing for flexible API definitions where not all modules or functions are required.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_80

LANGUAGE: TypeScript
CODE:
```
export type PartialApi<API> = {
    [mod in keyof API]?: API[mod] extends FunctionReference<any, any, any, any> ? API[mod] : PartialApi<API[mod]>;
};
```

----------------------------------------

TITLE: Defining Optional Rest Arguments Type (TypeScript)
DESCRIPTION: The `OptionalRestArgs` type conditionally defines the argument tuple for a function reference. If the function takes no arguments (`EmptyObject`), it makes the arguments optional; otherwise, it requires the specified arguments.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_75

LANGUAGE: TypeScript
CODE:
```
export type OptionalRestArgs<FuncRef extends AnyFunctionReference> = FuncRef["_args"] extends EmptyObject ? [args?: EmptyObject] : [args: FuncRef["_args"]];
```

----------------------------------------

TITLE: Defining Abstract IndexRange Class (TypeScript)
DESCRIPTION: This abstract class, `IndexRange`, serves as a base class for defining ranges within an index. It likely provides common structure or methods for index range operations, but cannot be instantiated directly.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_63

LANGUAGE: TypeScript
CODE:
```
export abstract class IndexRange {
}
```

----------------------------------------

TITLE: Defining QueryCtx Interface in Convex
DESCRIPTION: The `QueryCtx` interface extends `GenericQueryCtx` and provides the context available within a Convex query function. It is marked as deprecated, indicating a potential future removal or replacement.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_85

LANGUAGE: TypeScript
CODE:
```
export interface QueryCtx<DataModel extends GenericDataModel> extends GenericQueryCtx<DataModel> {
}
```

----------------------------------------

TITLE: Deprecated ActionCtx Interface in Convex TypeScript
DESCRIPTION: This interface, `ActionCtx`, extends `GenericActionCtx` and is marked as deprecated. It provides the context available within a Convex action function, typically including access to the database and other utilities. Users should migrate to `GenericActionCtx` or its specific implementations.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export interface ActionCtx<DataModel extends GenericDataModel = GenericDataModel> extends GenericActionCtx<DataModel> {
}
```

----------------------------------------

TITLE: Defining Mutation Context Interface (TypeScript)
DESCRIPTION: The `MutationCtx` interface extends `GenericMutationCtx` and provides the context available within a Convex mutation function. This interface is deprecated and `GenericMutationCtx` should be used instead.
SOURCE: https://github.com/get-convex/convex-js/blob/main/api-extractor-configs/reports/server.api.md#_snippet_70

LANGUAGE: TypeScript
CODE:
```
export interface MutationCtx<DataModel extends GenericDataModel> extends GenericMutationCtx<DataModel> {
}
```

----------------------------------------

TITLE: Running Client Tests - npm
DESCRIPTION: This command executes the client-side tests for the convex-js project. It's important to note that this only runs a subset of the total tests, as other integration, end-to-end, and proptests are located in separate repositories.
SOURCE: https://github.com/get-convex/convex-js/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm test
```

TITLE: Defining a Basic Schema in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a basic schema in Convex using `defineSchema` and `defineTable`. It showcases various validator types like `v.id`, `v.string`, `v.number`, `v.boolean`, and `v.object` for structuring document types within a table. This schema ensures data consistency and provides TypeScript type safety for the 'documents' table.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  documents: defineTable({
    id: v.id("documents"),
    string: v.string(),
    number: v.number(),
    boolean: v.boolean(),
    nestedObject: v.object({
      property: v.string(),
    }),
  }),
});
```

----------------------------------------

TITLE: Defining Schema with Multiple Tables in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a Convex schema in `schema.ts` using `defineSchema` and `defineTable` to structure multiple tables. It shows how to define fields with specific types using `v` validators, including an `id` reference and an index on a `tokenIdentifier` field.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_436

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  messages: defineTable({
    body: v.string(),
    user: v.id("users")
  }),
  users: defineTable({
    name: v.string(),
    tokenIdentifier: v.string()
  }).index("by_token", ["tokenIdentifier"])
});

```

----------------------------------------

TITLE: Securing Convex Functions: Implementing Argument Validators (TypeScript)
DESCRIPTION: This snippet illustrates the importance of using argument validators for public Convex functions to prevent security vulnerabilities. The insecure example allows arbitrary document updates, while the secure version restricts updates to specific fields (`body`, `author`) within the `messages` table, ensuring data integrity and preventing malicious operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_388

LANGUAGE: TypeScript
CODE:
```
// ❌ -- could be used to update any document (not just `messages`)
export const updateMessage = mutation({
  handler: async (ctx, { id, update }) => {
    await ctx.db.patch(id, update);
  }
});

// ✅ -- can only be called with an ID from the messages table, and can only update
// the `body` and `author` fields
export const updateMessage = mutation({
  args: {
    id: v.id("messages"),
    update: v.object({
      body: v.optional(v.string()),
      author: v.optional(v.string())
    })
  },
  handler: async (ctx, { id, update }) => {
    await ctx.db.patch(id, update);
  }
});
```

----------------------------------------

TITLE: Inconsistent Sequential `ctx.runQuery` Calls in Convex
DESCRIPTION: This example illustrates an anti-pattern where two `ctx.runQuery` calls are made sequentially. Since each query runs in its own transaction, there's a risk of data inconsistency if the underlying data changes between the two calls, potentially leading to assertion failures or incorrect logic.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_403

LANGUAGE: TypeScript
CODE:
```
// ❌ -- this assertion could fail if the team changed between running the two queries
const team = await ctx.runQuery(internal.teams.getTeam, { teamId });
const teamOwner = await ctx.runQuery(internal.teams.getTeamOwner, { teamId });
assert(team.owner === teamOwner._id);
```

----------------------------------------

TITLE: Checking Convex Authentication Status with useConvexAuth Hook (TypeScript)
DESCRIPTION: This React component utilizes the `useConvexAuth` hook from `convex/react` to determine the user's authentication state. It provides `isLoading` and `isAuthenticated` flags, allowing the UI to conditionally render content based on whether the user is logged in, logged out, or if the authentication status is still being determined.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_345

LANGUAGE: TypeScript
CODE:
```
import { useConvexAuth } from "convex/react";

function App() {
  const { isLoading, isAuthenticated } = useConvexAuth();

  return (
    <div className="App">
      {isAuthenticated ? "Logged in" : "Logged out or still loading"}
    </div>
  );
}
```

----------------------------------------

TITLE: Optimizing Convex Queries: Implementing Pagination (TypeScript)
DESCRIPTION: This snippet illustrates the use of pagination for handling potentially large result sets in Convex. The '❌' example shows an unbounded `.collect` call for all watched movies by a user. The '✅' example demonstrates how to use `.paginate` with an index and ordering to retrieve data in manageable chunks, which is crucial for performance and user experience with large datasets.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_72

LANGUAGE: TypeScript
CODE:
```
// ❌ -- potentially unbounded
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .collect();

// ✅ -- using pagination, showing recently watched movies first
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .order("desc")
  .paginate(paginationOptions);
```

----------------------------------------

TITLE: Preventing Data Races with Optimistic Concurrency Control (Pseudocode)
DESCRIPTION: This pseudocode demonstrates how Optimistic Concurrency Control (OCC) prevents the data race shown previously. Each transaction reads a version of the data. When the $5 transfer attempts to commit, it checks if the versions it read (Alice.v1, Bob.v7) are still the latest. Since Alice's version changed due to the $3 debit, the transfer fails, preventing the inconsistency.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_263

LANGUAGE: Pseudocode
CODE:
```
$5 Transfer                           $3 Debit Card Charge
----------------------------------------------------------
(v1, $14) <- READ Alice
(v7, $11) <- READ Bob
                                        (v1, $14) <- READ Alice
                                        WRITE Alice $11
                                        IF Alice.v = v1

WRITE Alice = $9, Bob = $16
    IF Alice.v = v1, Bob.v = v7 // Fails! Alice is = v2
```

----------------------------------------

TITLE: Implementing Robust Argument Validation for Convex Mutations (TypeScript)
DESCRIPTION: This example highlights the necessity of using argument validators for public Convex functions to enhance security and data integrity. The "❌" section shows a vulnerable `updateMessage` mutation that allows patching any document with arbitrary data. In contrast, the "✅" section demonstrates a secure implementation using `v.id("messages")` and `v.object` to restrict updates to specific fields of documents within the `messages` table, preventing malicious attacks and ensuring expected data shapes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_75

LANGUAGE: TypeScript
CODE:
```
// ❌ -- could be used to update any document (not just `messages`)
export const updateMessage = mutation({
  handler: async (ctx, { id, update }) => {
    await ctx.db.patch(id, update);
  }
});

// ✅ -- can only be called with an ID from the messages table, and can only update
// the `body` and `author` fields
export const updateMessage = mutation({
  args: {
    id: v.id("messages"),
    update: v.object({
      body: v.optional(v.string()),
      author: v.optional(v.string())
    })
  },
  handler: async (ctx, { id, update }) => {
    await ctx.db.patch(id, update);
  }
});
```

----------------------------------------

TITLE: Filtering by Comparison (Greater Than or Equal To) in Convex TypeScript
DESCRIPTION: This snippet shows how to filter documents using a comparison operator. It uses `q.gte` to find documents in the `users` table where the `age` field is greater than or equal to 18, effectively selecting adult users. The `q.field` method accesses the document's `age` property.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Get all users with an age of 18 or higher.
const adults = await ctx.db
  .query("users")
  .filter((q) => q.gte(q.field("age"), 18))
  .collect();
```

----------------------------------------

TITLE: Handling Exceptions with Partial Rollback in Convex TypeScript
DESCRIPTION: This TypeScript mutation demonstrates how to handle exceptions with partial rollback in Convex. It uses `ctx.runMutation` to execute an internal function, `sendMessage`, and catches any errors. Upon an error, it records the failure in a 'failures' table while ensuring that any writes from `sendMessage` are rolled back, providing atomicity for the `sendMessage` operation itself but allowing the error logging to persist.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_95

LANGUAGE: TypeScript
CODE:
```
export const trySendMessage = mutation({
  args: {
    body: v.string(),
    author: v.string(),
  },
  handler: async (ctx, { body, author }) => {
    try {
      await ctx.runMutation(internal.messages.sendMessage, { body, author });
    } catch (e) {
      // Record the failure, but rollback any writes from `sendMessage`
      await ctx.db.insert("failures", {
        kind: "MessageFailed",
        body,
        author,
        error: `Error: ${e}`,
      });
    }
  },
});
```

----------------------------------------

TITLE: Convex Query and Mutation Functions - TypeScript
DESCRIPTION: Example TypeScript server functions for reading (query) and writing (mutation) data in a Convex database. The query function `getAllOpenTasks` retrieves incomplete tasks, while the mutation function `setTaskCompleted` updates a task's completion status.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// A Convex query function
export const getAllOpenTasks = query({
  args: {},
  handler: async (ctx, args) => {
    // Query the database to get all items that are not completed
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("by_completed", (q) => q.eq("completed", false))
      .collect();
    return tasks;
  },
});

// A Convex mutation function
export const setTaskCompleted = mutation({
  args: { taskId: v.id("tasks"), completed: v.boolean() },
  handler: async (ctx, { taskId, completed }) => {
    // Update the database using TypeScript
    await ctx.db.patch(taskId, { completed });
  },
});
```

----------------------------------------

TITLE: Starting Convex Development Server
DESCRIPTION: This command is used by team members to start their individual development server and obtain a personal development deployment. It automatically creates a project if it's the first time running it for that project.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/production.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Set Up Convex Development Deployment
DESCRIPTION: Run the Convex development command to log in, create a project, and start syncing backend functions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Starting Convex Development Deployment
DESCRIPTION: This shell command initiates a Convex development deployment, allowing local development and testing of the Convex backend. It starts the Convex development server and provides command-line instructions for further interaction.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_207

LANGUAGE: Shell
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database using `ctx.db.query` and returns the collected documents. It demonstrates how to access client-provided arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the documents. Query functions are used for reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database using `ctx.db.query` and logs client-provided arguments. Query functions are designed for reading data and can perform arbitrary JavaScript logic before returning results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Batch Inserting Users Atomically in Convex (Best Practice)
DESCRIPTION: This example demonstrates the recommended best practice for inserting multiple users in Convex. It uses a single `ctx.runMutation` call to insert all `teamMembers` within the same transaction, ensuring atomicity and consistency. This approach is more efficient and guarantees that all insertions succeed or fail together.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_406

LANGUAGE: TypeScript
CODE:
```
import * as Users from './model/users';

export const importTeams = action({
  args: {
    teamId: v.id("teams"),
  },
  handler: async (ctx, { teamId }) => {
    // Fetch team members from an external API
    const teamMembers = await fetchTeamMemberData(teamId);

    // ✅ This action runs a single mutation that inserts all users in the same transaction.
    await ctx.runMutation(internal.teams.insertUsers, teamMembers);
  },
});
export const insertUsers = internalMutation({
  args: { users: v.array(v.object({ name: v.string(), email: v.string() })) },
  handler: async (ctx, { users }) => {
    for (const { name, email } of users) {
      await Users.insert(ctx, { name, email });
    }
  },
});
```

----------------------------------------

TITLE: Conditionally Calling useQuery (Error Example) in React
DESCRIPTION: This snippet demonstrates an incorrect way to conditionally invoke a React hook like `useQuery`. Placing hooks inside conditionals violates React's Rules of Hooks, leading to errors because hooks must be called in the exact same order on every component render.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_313

LANGUAGE: TypeScript
CODE:
```
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  // the URL `param` might be null
  const param = new URLSearchParams(window.location.search).get("param");
  // ERROR! React Hook "useQuery" is called conditionally. React Hooks must
  // be called in the exact same order in every component render.
  const data = param !== null ? useQuery(api.functions.read, { param }) : null;
  //...
}
```

----------------------------------------

TITLE: Defining Cron Jobs in Convex
DESCRIPTION: This snippet demonstrates how to define cron jobs in the `convex/crons.ts` file using the `cronJobs` function. Each cron job requires a unique identifier, a schedule definition (using `crons.cron`, `crons.interval`, or helpers), and the name of the internal or public function (mutation or action) to execute.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/scheduling/cron-jobs.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { cronJobs } from "convex/server";
import { internal } from "./_generated/api";

export const crons = cronJobs({
  // Run every minute using cron syntax
  everyMinuteCron: crons.cron("*/1 * * * *", internal.myFunctions.runEveryMinuteCron),

  // Run daily at 3:00 AM UTC using cron syntax
  dailyCleanupCron: crons.cron("0 3 * * *", internal.myFunctions.dailyCleanupCron),

  // Run every 5 minutes using interval syntax
  fiveMinuteInterval: crons.interval({ minutes: 5 }, internal.myFunctions.anotherFunction),

  // Run weekly on Saturday at 10:00 AM UTC using helper
  weeklyReportHelper: crons.weekly({ dayOfWeek: "Saturday", hourUTC: 10, minuteUTC: 0 }, internal.myFunctions.generateWeeklyReport),

  // Example using hourly helper
  hourlyTask: crons.hourly({ minuteUTC: 30 }, internal.myFunctions.runHourlyTask),
});
```

LANGUAGE: JavaScript
CODE:
```
import { cronJobs } from "convex/server";
import { internal } from "./_generated/api";

export const crons = cronJobs({
  // Run every minute using cron syntax
  everyMinuteCron: crons.cron("*/1 * * * *", internal.myFunctions.runEveryMinuteCron),

  // Run daily at 3:00 AM UTC using cron syntax
  dailyCleanupCron: crons.cron("0 3 * * *", internal.myFunctions.dailyCleanupCron),

  // Run every 5 minutes using interval syntax
  fiveMinuteInterval: crons.interval({ minutes: 5 }, internal.myFunctions.anotherFunction),

  // Run weekly on Saturday at 10:00 AM UTC using helper
  weeklyReportHelper: crons.weekly({ dayOfWeek: "Saturday", hourUTC: 10, minuteUTC: 0 }, internal.myFunctions.generateWeeklyReport),

  // Example using hourly helper
  hourlyTask: crons.hourly({ minuteUTC: 30 }, internal.myFunctions.runHourlyTask),
});
```

----------------------------------------

TITLE: Exporting Project Schema in Convex (TypeScript)
DESCRIPTION: This snippet shows the standard way to export the entire project schema in a Convex application. It should be placed in a `schema.ts` file within the `convex/` directory, serving as the central definition for all tables and their structures.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_202

LANGUAGE: TypeScript
CODE:
```
export default defineSchema({
  ...
});
```

----------------------------------------

TITLE: Asserting Errors with .rejects.toThrowError() in Convex Tests (TypeScript)
DESCRIPTION: Illustrates how to test that a Convex function correctly throws an expected error using Vitest's `expect(...).rejects.toThrowError()`. This is important for validating input or state checks.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { convexTest } from "convex-test";
import { expect, test } from "vitest";
import { api } from "./_generated/api";
import schema from "./schema";

test("messages validation", async () => {
  const t = convexTest(schema);
  expect(async () => {
    await t.mutation(api.messages.send, { body: "", author: "James" });
  }).rejects.toThrowError("Empty message body is not allowed");
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates `first` and `second` as strings. The handler inserts a new message document into the 'messages' table with the provided arguments and then returns the newly created document by its ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Wrapping Application with React Error Boundary (TSX)
DESCRIPTION: This snippet demonstrates how to wrap an entire React application within a single ErrorBoundary component. This setup catches any errors thrown in child components, including those originating from Convex query functions, providing a centralized mechanism to render fallback UI and report errors to an exception handling service.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/error-handling.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<StrictMode>
  <ErrorBoundary>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </ErrorBoundary>
</StrictMode>,
```

----------------------------------------

TITLE: Storing Current User Mutation in Convex (TypeScript)
DESCRIPTION: This Convex mutation, `store`, is designed to persist user identity information (name and tokenIdentifier) in the `users` table. It checks if the user already exists based on `tokenIdentifier` and either updates their name if changed or inserts a new user record. It requires authentication context (`ctx.auth.getUserIdentity()`).
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_479

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const store = mutation({
  args: {},
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Called storeUser without authentication present");
    }

    // Check if we've already stored this identity before.
    // Note: If you don't want to define an index right away, you can use
    // ctx.db.query("users")
    //  .filter(q => q.eq(q.field("tokenIdentifier"), identity.tokenIdentifier))
    //  .unique();
    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) =>
        q.eq("tokenIdentifier", identity.tokenIdentifier),
      )
      .unique();
    if (user !== null) {
      // If we've seen this identity before but the name has changed, patch the value.
      if (user.name !== identity.name) {
        await ctx.db.patch(user._id, { name: identity.name });
      }
      return user._id;
    }
    // If it's a new identity, create a new `User`.
    return await ctx.db.insert("users", {
      name: identity.name ?? "Anonymous",
      tokenIdentifier: identity.tokenIdentifier,
    });
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection, logs the arguments, and returns the documents. It demonstrates server-side data retrieval and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining Convex Action with Arguments in TypeScript
DESCRIPTION: This snippet demonstrates how to define a Convex action that accepts arguments. It uses the `args` property with `convex/values` to specify the expected types of arguments (`a` and `b` as numbers). The `handler` function receives the context as the first argument (ignored here with `_`) and the typed arguments as the second argument.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_59

LANGUAGE: TypeScript
CODE:
```
import { action } from "./_generated/server";
import { v } from "convex/values";

export const doSomething = action({
  args: { a: v.number(), b: v.number() },
  handler: (_, args) => {
    // do something with `args.a` and `args.b`

    // optionally return a value
    return "success";
  },
});
```

----------------------------------------

TITLE: Avoiding Multiple `ctx.runQuery` Calls in Convex Actions (TypeScript)
DESCRIPTION: This snippet demonstrates the anti-pattern of executing multiple `ctx.runQuery` calls sequentially, which can result in inconsistent data due to separate transactions and incur additional function call costs. It then shows the recommended approach of consolidating these operations into a single `ctx.runQuery` call for improved consistency and efficiency.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_69

LANGUAGE: TypeScript
CODE:
```
// ❌
const foo = await ctx.runQuery(...)
const bar = await ctx.runQuery(...)

// ✅
const fooAndBar = await ctx.runQuery(...)
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates `first` and `second` arguments as strings and implements a handler that inserts a new document into the 'messages' table. Mutations can modify the database and optionally return a value, as shown by fetching the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and its handler asynchronously queries a 'tablename' in the database, logs the arguments, and returns the collected documents. It demonstrates reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and demonstrates reading data from the database using `ctx.db.query` and `collect()`. It also logs the input arguments and returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines `myQueryFunction`, a Convex query function. It validates `first` as a number and `second` as a string, reads documents from 'tablename' using `ctx.db.query`, logs the arguments, and returns the collected documents. Query functions are used for reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction` using TypeScript. It validates `first` and `second` arguments as strings, then demonstrates inserting a new document into the 'messages' table and optionally returning the newly created document by its ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining Relational Schema with Convex (TypeScript)
DESCRIPTION: This snippet defines the database schema for a multi-channel messaging application using Convex. It establishes two tables: `channels` with a `name` field, and `messages` with `author`, `body`, and a `channel` field that references the `channels` table using a Convex ID, demonstrating a one-to-many relational model.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  channels: defineTable({
    name: v.string(),
  }),
  messages: defineTable({
    author: v.string(),
    body: v.string(),
    channel: v.id("channels"),
  }),
});
```

----------------------------------------

TITLE: Insecure Team Update Mutation (No Access Control) - TypeScript
DESCRIPTION: This Convex mutation function `updateTeam` allows anyone to update any team if they know its ID, as it lacks any access control checks. This is a significant security vulnerability.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_389

LANGUAGE: TypeScript
CODE:
```
// ❌ -- no checks! anyone can update any team if they get the ID
export const updateTeam = mutation({
  args: {
    id: v.id("teams"),
    update: v.object({
      name: v.optional(v.string()),
      owner: v.optional(v.id("users")),
    }),
  },
  handler: async (ctx, { id, update }) => {
    await ctx.db.patch(id, update);
  }
});
```

----------------------------------------

TITLE: Use Convex query in React frontend (TypeScript)
DESCRIPTION: Demonstrates how to call a Convex query function from a React component using the `useQuery` hook provided by the `convex/react` library. It fetches data and displays a loading state.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const data = useQuery(api.tasks.getTaskList);
  return data ?? "Loading...";
}
```

----------------------------------------

TITLE: Complete Vector Search Action with Result Loading in Convex
DESCRIPTION: This updated `similarFoods` Convex action integrates all three steps of a vector search. It first generates an embedding, then performs the vector search using `ctx.vectorSearch`. Finally, it uses `ctx.runQuery` to call the `fetchResults` internal query, passing the IDs from the vector search results to load the complete food documents, which are then returned.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_469

LANGUAGE: TypeScript
CODE:
```
export const similarFoods = action({
  args: {
    descriptionQuery: v.string(),
  },
  handler: async (ctx, args) => {
    // 1. Generate an embedding from you favorite third party API:
    const embedding = await embed(args.descriptionQuery);
    // 2. Then search for similar foods!
    const results = await ctx.vectorSearch("foods", "by_embedding", {
      vector: embedding,
      limit: 16,
      filter: (q) => q.eq("cuisine", "French"),
    });
    // 3. Fetch the results
    const foods: Array<Doc<"foods">> = await ctx.runQuery(
      internal.foods.fetchResults,
      { ids: results.map((result) => result._id) },
    );
    return foods;
  },
});
```

----------------------------------------

TITLE: Querying with Compound Index for Exact Author and Title (Convex TypeScript)
DESCRIPTION: This snippet demonstrates using the 'by_author_title' compound index to perform a highly efficient query for a book with a specific author and title. By including both fields in the `withIndex` clause, the query leverages the index to directly locate the single matching document, resulting in optimal performance.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
const foundation = await ctx.db
  .query("books")
  .withIndex("by_author_title", (q) =>
    q.eq("author", "Isaac Asimov").eq("title", "Foundation")
  )
  .unique();
```

----------------------------------------

TITLE: Scheduling a Convex Action via a Mutation (TypeScript)
DESCRIPTION: This snippet illustrates the recommended pattern for triggering actions: a client calls a mutation, which then schedules an internal action. This approach allows the mutation to enforce invariants and ensures actions are executed after relevant database writes, preventing direct client-to-action anti-patterns.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_68

LANGUAGE: TypeScript
CODE:
```
import { v } from "convex/values";
import { internal } from "./_generated/api";
import { internalAction, mutation } from "./_generated/server";

export const mutationThatSchedulesAction = mutation({
  args: { text: v.string() },
  handler: async (ctx, { text }) => {
    const taskId = await ctx.db.insert("tasks", { text });
    await ctx.scheduler.runAfter(0, internal.myFunctions.actionThatCallsAPI, {
      taskId,
      text,
    });
  },
});

export const actionThatCallsAPI = internalAction({
  args: { taskId: v.id("tasks"), text: v.string() },
  handler: (_, args): void => {
    // do something with `taskId` and `text`, like call an API
    // then run another mutation to store the result
  },
});
```

----------------------------------------

TITLE: Setting Up Convex Development Deployment
DESCRIPTION: This command starts the Convex development server, which prompts for GitHub login, project creation, and saves deployment URLs. It also creates a 'convex/' folder for backend API functions and continuously syncs them with the cloud deployment, enabling real-time development.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_119

LANGUAGE: Shell
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Optimizing Multiple Convex Query/Mutation Calls in TypeScript
DESCRIPTION: This snippet illustrates the best practice for executing multiple database operations in Convex. It shows that making separate ctx.runQuery or ctx.runMutation calls can lead to inconsistency and performance overhead. The recommended approach is to consolidate these operations into a single query or mutation to ensure data consistency within a single transaction and reduce function call costs.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/actions.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// ❌
const foo = await ctx.runQuery(...)
const bar = await ctx.runQuery(...)

// ✅
const fooAndBar = await ctx.runQuery(...)
```

----------------------------------------

TITLE: Declaring a Query using the `query` Constructor in Convex
DESCRIPTION: This snippet demonstrates the fundamental way to declare a Convex query using the `query` constructor. It takes an object with a `handler` function, which contains the core logic for fetching and returning data from the backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const myQuery = query({
  handler: async (ctx) => {
    // Query logic here
    return "Hello from query!";
  }
});
```

----------------------------------------

TITLE: Setting Team Owner (Secure ctx.auth Access Control) - Convex TypeScript
DESCRIPTION: This Convex mutation securely sets a team's owner by enforcing access control using `ctx.auth.getUserIdentity()`. It verifies that the user is authenticated and has the necessary permissions (e.g., is the current owner or an admin) before allowing the ownership transfer.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_79

LANGUAGE: TypeScript
CODE:
```
export const setTeamOwner = mutation({
  args: {
    id: v.id("teams"),
    owner: v.id("users"),
  },
  handler: async (ctx, { id, owner }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    const isTeamOwner = /* check if user is the owner of the team */
    if (!isTeamOwner) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, { owner: owner });
  },
});
```

----------------------------------------

TITLE: Display Data in React App using useQuery
DESCRIPTION: Use the `useQuery` hook from `convex/react` in `src/App.tsx` or `src/App.jsx` to fetch data from the `api.tasks.get` endpoint and render the task list.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { useQuery } from 'convex/react';
import { api } from '../convex/_generated/api';
import './App.css';

function App() {
  const tasks = useQuery(api.tasks.get);

  return (
    <main>
      <h1>Convex Tasks</h1>
      {tasks?.map((task) => (
        <div key={task._id}>{task.text}</div>
      ))}
    </main>
  );
}

export default App;
```

LANGUAGE: jsx
CODE:
```
import { useQuery } from 'convex/react';
import { api } from '../convex/_generated/api';
import './App.css';

function App() {
  const tasks = useQuery(api.tasks.get);

  return (
    <main>
      <h1>Convex Tasks</h1>
      {tasks?.map((task) => (
        <div key={task._id}>{task.text}</div>
      ))}
    </main>
  );
}

export default App;
```

----------------------------------------

TITLE: Convex Query Fetching Data from Database in TypeScript
DESCRIPTION: This snippet shows a Convex query that fetches a document from the database. The `getTask` query accepts an `id` argument validated as a Convex ID for the "tasks" table. The handler uses `ctx.db.get()` to retrieve the document, demonstrating asynchronous database interaction within a query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_359

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getTask = query({
    args: { id: v.id("tasks") },
    handler: async (ctx, args) => {
      return await ctx.db.get(args.id);
    },
});
```

----------------------------------------

TITLE: Reading Single Document - Convex `db.get` - TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates how to retrieve a single document from a Convex database using its ID with the `db.get` method. It defines a query function that takes a `documentId` as an argument and returns the corresponding document. The `v.id` validator ensures type safety and prevents exposure of unintended data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getDocumentById = query({
  args: { documentId: v.id("tasks") },
  handler: async (ctx, args) => {
    // Note: You should use the v.id validator to make sure you are not
    // exposing data from tables other than the ones you intended.
    return await ctx.db.get(args.documentId);
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getDocumentById = query({
  args: { documentId: v.id("tasks") },
  handler: async (ctx, args) => {
    // Note: You should use the v.id validator to make sure you are not
    // exposing data from tables other than the ones you intended.
    return await ctx.db.get(args.documentId);
  }
});
```

----------------------------------------

TITLE: Initializing Convex Client and Handling Messages (JavaScript)
DESCRIPTION: Initializes a Convex client connected to a local backend, subscribes to the 'messages:list' query for real-time updates, updates a list element with received messages, and adds an event listener to a form to send new messages using the 'messages:send' mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/index.html#_snippet_0

LANGUAGE: javascript
CODE:
```
const CONVEX_URL = "http://localhost:8000";
const client = new convex.ConvexClient(CONVEX_URL);

client.onUpdate("messages:list", {}, (messages) => {
  const container = document.querySelector(".messages");
  container.innerHTML = "";
  for (const message of messages.reverse()) {
    const li = document.createElement("li");
    li.textContent = `${message.author}: ${message.body}`;
    container.appendChild(li);
  }
});

document.querySelector("form").addEventListener("submit", (e) => {
  e.preventDefault();
  client.mutation("messages:send", {
    body: e.target.querySelector("input").value,
    author: "me",
  });
  e.target.querySelector("input").value = "";
});
```

----------------------------------------

TITLE: Querying Top Liked Messages with Index (TypeScript)
DESCRIPTION: This snippet demonstrates how to efficiently retrieve the top 20 most liked messages using a database index. It queries the "messages" table, specifies the "by_likes" index, orders the results in descending order, and uses `.take(20)` to limit the results to the top 20, optimizing performance for large datasets.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
// Get the top 20 most liked messages of all time, using the "by_likes" index.
const messages = await ctx.db
  .query("messages")
  .withIndex("by_likes")
  .order("desc")
  .take(20);
```

----------------------------------------

TITLE: Define Convex query function (TypeScript)
DESCRIPTION: Defines a server-side query function in TypeScript for Convex. This function retrieves the last 100 tasks associated with a given task list ID, demonstrating database interaction and indexing.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/workflow.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

// Return the last 100 tasks in a given task list.
export const getTaskList = query({
  args: { taskListId: v.id("taskLists") },
  handler: async (ctx, args) => {
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("taskListId", (q) => q.eq("taskListId", args.taskListId))
      .order("desc")
      .take(100);
    return tasks;
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows two ways to use the mutation: a 'fire and forget' approach and an approach that processes the result once the mutation completes. Mutations are typically triggered by user interactions like button presses.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation in React with useMutation
DESCRIPTION: This snippet demonstrates how to use the `useMutation` hook in a React component to call the `myMutationFunction` defined in Convex. It shows two ways to use the mutation: a 'fire and forget' approach and handling the result with a `.then()` callback.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook to call `myMutationFunction` from a React component. It shows two patterns: 'fire and forget' for simple execution and handling the promise resolution to process the mutation's result. This is used for operations that modify data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Integrating User Storage Hook in React App (TypeScript)
DESCRIPTION: This `App` component demonstrates how to use the `useStoreUserEffect` hook to manage the application's authentication state and conditionally render content. It displays a loading message, a sign-in button if not authenticated, or user controls and authenticated content once the user is stored, effectively replacing `useConvexAuth` for more granular control.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_481

LANGUAGE: TypeScript
CODE:
```
import { SignInButton, UserButton } from "@clerk/clerk-react";
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";
import { useStoreUserEffect } from "./useStoreUserEffect.js";

function App() {
  const { isLoading, isAuthenticated } = useStoreUserEffect();
  return (
    <main>
      {isLoading ? (
        <>Loading...</>
      ) : !isAuthenticated ? (
        <SignInButton />
      ) : (
        <>
          <UserButton />
          <Content />
        </>
      )}
    </main>
  );
}

function Content() {
  const messages = useQuery(api.messages.getForCurrentUser);
  return <div>Authenticated content: {messages?.length}</div>;
}

export default App;
```

----------------------------------------

TITLE: Calling a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook provided by Convex. It passes an object with `first` (number) and `second` (string) as arguments, and the returned data will be available in the `data` variable. This hook automatically handles data fetching and re-fetching.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Using a Convex Query Function with React's useQuery Hook
DESCRIPTION: This snippet demonstrates how to consume a Convex query function (`myQueryFunction`) within a React component using the `useQuery` hook. It passes required arguments (`first` and `second`) to the function and stores the returned data in the `data` variable. This is the client-side integration for fetching data from Convex.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This example shows how to use the `useQuery` hook from Convex in a React component to call the `myQueryFunction`. It passes an object containing the required arguments (`first` and `second`) to the query, and the returned data is assigned to the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: React Hook to Store User on Authentication (JavaScript)
DESCRIPTION: This React hook uses `useEffect` to call the `storeUser` mutation from Convex whenever the user becomes authenticated. It tracks whether the user document has been successfully stored and returns a boolean indicating the status. This is useful for ensuring the user exists in your database before rendering components that depend on the user document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { useEffect, useState } from "react";
import { useMutation, useConvexAuth } from "convex/react";
import { api } from "../convex/_generated/api";

export function useStoreUserEffect() {
  const { isAuthenticated } = useConvexAuth();
  const storeUser = useMutation(api.users.storeUser);
  const [userStored, setUserStored] = useState(false);

  useEffect(() => {
    if (isAuthenticated) {
      // Call the mutation to store the user
      storeUser()
        .then(() => setUserStored(true))
        .catch((error) => {
          console.error("Failed to store user:", error);
          // Handle error appropriately
        });
    }
  }, [isAuthenticated, storeUser]);

  return userStored;
}
```

----------------------------------------

TITLE: Convex Query Function with Clerk Authentication Check
DESCRIPTION: A Convex query function that demonstrates how to check if the user is authenticated using ctx.auth.isAuthenticated before proceeding to fetch data from the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const list = query({
  handler: async (ctx) => {
    // Check if the user is authenticated via Clerk
    if (!ctx.auth.isAuthenticated) {
      throw new Error("Not authenticated");
    }
    // Fetch messages - potentially filter by user if needed
    return await ctx.db.query("messages").collect();
  }
});
```

----------------------------------------

TITLE: Inserting Documents with db.insert (Convex)
DESCRIPTION: Demonstrates how to insert a new document into a Convex database table using the `db.insert` method within a mutation function. It shows passing an object containing the document data and notes that the method returns the ID of the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/writing-data.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const insertTask = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const taskId = await ctx.db.insert("tasks", { text: args.text });
    return taskId;
  },
});
```

LANGUAGE: javascript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const insertTask = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const taskId = await ctx.db.insert("tasks", { text: args.text });
    return taskId;
  },
});
```

----------------------------------------

TITLE: Displaying Convex Data in React Component (TypeScript)
DESCRIPTION: This React component, defined in `app/routes/index.tsx`, fetches data from the Convex backend using `useSuspenseQuery` and `convexQuery(api.tasks.get, {})`. It then maps over the retrieved `tasks` data and renders each task's `text` in a `div`, demonstrating live updates from the Convex sync engine.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_300

LANGUAGE: TypeScript
CODE:
```
import { convexQuery } from "@convex-dev/react-query";
import { useSuspenseQuery } from "@tanstack/react-query";
import { createFileRoute } from "@tanstack/react-router";
import { api } from "../../convex/_generated/api";

export const Route = createFileRoute("/")({
  component: Home,
});

function Home() {
  const { data } = useSuspenseQuery(convexQuery(api.tasks.get, {}));

  return (
    <div>
      {data.map(({ _id, text }) => (
        <div key={_id}>{text}</div>
      ))}
    </div>
  );
}
```

----------------------------------------

TITLE: Connecting React App to Convex Backend
DESCRIPTION: This TypeScript snippet in `src/main.tsx` initializes a `ConvexReactClient` using the Convex URL from environment variables. It then wraps the main `App` component with `ConvexProvider`, making the Convex client available throughout the React application's component tree for data fetching and mutations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_133

LANGUAGE: TypeScript
CODE:
```
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>,
);
```

----------------------------------------

TITLE: Storing Convex Client in React Context (JavaScript)
DESCRIPTION: This snippet demonstrates how to wrap a React application with `ConvexProvider` to make the Convex client available throughout the component tree. It requires an initialized `convex` client instance.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_496

LANGUAGE: JavaScript
CODE:
```
import { ConvexProvider } from "convex/react";

<ConvexProvider client={convex}>
  <App />
</ConvexProvider>
```

----------------------------------------

TITLE: Defining Current User Authentication Hook in Convex (TypeScript)
DESCRIPTION: This TypeScript hook, `useCurrentUser`, combines Convex's authentication state (`useConvexAuth`) with a query for the current user's document (`api.users.current`). It provides a unified loading and authentication status, ensuring that `isAuthenticated` is true only when the user is authenticated and their document exists in the database. It depends on `convex/react` and a `users.current` query defined in `api`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_489

LANGUAGE: TypeScript
CODE:
```
import { useConvexAuth, useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function useCurrentUser() {
  const { isLoading, isAuthenticated } = useConvexAuth();
  const user = useQuery(api.users.current);
  // Combine the authentication state with the user existence check
  return {
    isLoading: isLoading || (isAuthenticated && user === null),
    isAuthenticated: isAuthenticated && user !== null,
  };
}
```

----------------------------------------

TITLE: Connect React App to Convex Backend
DESCRIPTION: Initialize a `ConvexReactClient` with the Convex deployment URL and wrap the main application component (`App`) with `ConvexProvider` in `src/main.tsx` or `src/main.jsx` to make the client available via context.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/react.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { ConvexProvider, ConvexReactClient } from 'convex/react';

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>,
);
```

LANGUAGE: jsx
CODE:
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { ConvexProvider, ConvexReactClient } from 'convex/react';

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>,
);
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `myQueryFunction` defined previously within a React component using the `useQuery` hook. It passes specific arguments (`first: 10`, `second: 'hello'`) to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes required arguments (`first` as a number, `second` as a string) to fetch data from the Convex backend. The `useQuery` hook automatically manages loading states and data updates.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This example shows how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments to the function and retrieves the returned data, demonstrating client-side integration with Convex queries.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes `first` (number) and `second` (string) arguments to the query, and the returned data will be available in the `data` variable. This is a common pattern for fetching read-only data in a React frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-ai-chat/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: React Hook to Store User on Authentication (TypeScript)
DESCRIPTION: This React hook uses `useEffect` to call the `storeUser` mutation from Convex whenever the user becomes authenticated. It tracks whether the user document has been successfully stored and returns a boolean indicating the status. This is useful for ensuring the user exists in your database before rendering components that depend on the user document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { useEffect, useState } from "react";
import { useMutation, useConvexAuth } from "convex/react";
import { api } from "../convex/_generated/api";

export function useStoreUserEffect() {
  const { isAuthenticated } = useConvexAuth();
  const storeUser = useMutation(api.users.storeUser);
  const [userStored, setUserStored] = useState(false);

  useEffect(() => {
    if (isAuthenticated) {
      // Call the mutation to store the user
      storeUser()
        .then(() => setUserStored(true))
        .catch((error) => {
          console.error("Failed to store user:", error);
          // Handle error appropriately
        });
    }
  }, [isAuthenticated, storeUser]);

  return userStored;
}
```

----------------------------------------

TITLE: Filtering Query with Index - Convex `withIndex` - TypeScript
DESCRIPTION: This snippet shows how to filter a Convex database query using a defined index. It queries the 'messages' table, applies the `by_channel` index, and filters messages where the `channel` field matches a specified `channel` ID. This explicit use of `withIndex` ensures efficient data retrieval.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getMessagesByChannel = query({
  args: { channel: v.id("channels") },
  handler: async (ctx, args) => {
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_channel", (q) => q.eq("channel", args.channel))
      .collect();
    return messages;
  }
});
```

----------------------------------------

TITLE: Sending Messages with User ID in Convex (TypeScript)
DESCRIPTION: This mutation handles sending a message by first authenticating the user and retrieving their document ID from the 'users' table using their 'tokenIdentifier'. It then inserts a new message document into the 'messages' table, linking it to the user's ID as a foreign key. This requires the user to be authenticated and pre-stored in the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_482

LANGUAGE: TypeScript
CODE:
```
import { v } from "convex/values";
import { mutation } from "./_generated/server";

export const send = mutation({
  args: { body: v.string() },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthenticated call to mutation");
    }
    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) =>
        q.eq("tokenIdentifier", identity.tokenIdentifier),
      )
      .unique();
    if (!user) {
      throw new Error("Unauthenticated call to mutation");
    }
    await ctx.db.insert("messages", { body: args.body, user: user._id });
  },
});
```

----------------------------------------

TITLE: Retrieving Current User Document ID in Convex
DESCRIPTION: This code snippet demonstrates how to retrieve the document ID of the currently authenticated user from the 'users' table within a Convex function handler. It first gets the identity from `ctx.auth`, then queries the 'users' table using the 'by_token' index to find the corresponding user document, throwing an error if the user is not authenticated or not found in the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Not authenticated");
    }
    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) =>
        q.eq("tokenIdentifier", identity.tokenIdentifier)
      )
      .unique();
    if (!user) {
      throw new Error("User not found in database");
    }
    // do something with `user`...
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction` for writing data to the database. It includes argument validation for `first` and `second` (both strings) and demonstrates inserting a new document into the 'messages' table using `ctx.db.insert` and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, then inserts a new document into the 'messages' table with these arguments. It demonstrates writing data to the Convex database and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/mounted/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and demonstrates writing data to the database using `ctx.db.insert`. Mutation functions are used for operations that modify the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It illustrates argument validation and demonstrates how to write data to the Convex database by inserting a new document into the 'messages' table. The function returns the newly created document after insertion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, then inserts a new document into the 'messages' table using these arguments. It also demonstrates how mutations can read from the database and optionally return a value after the operation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Installing Convex Client and Server Library
DESCRIPTION: This command navigates into the newly created Next.js application directory and then installs the `convex` npm package. This package provides the necessary client and server interfaces for interacting with Convex from a React application.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_273

LANGUAGE: Shell
CODE:
```
cd my-app && npm install convex
```

----------------------------------------

TITLE: Potentially Inefficient Querying with filter().first()
DESCRIPTION: This Convex query pattern can be inefficient as it might scan an entire table to find the first document that matches the given filter. Without proper indexing, this can lead to scanning a large number of documents, potentially exceeding read limits and impacting performance, especially in production environments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_220

LANGUAGE: JavaScript
CODE:
```
db.query("table").filter(...).first()
```

----------------------------------------

TITLE: Importing Users with Bulk Mutation - Convex TypeScript
DESCRIPTION: This Convex action showcases the recommended best practice for importing multiple team members. By passing the entire teamMembers array to a single ctx.runMutation call, all user insertions are performed within one atomic transaction, ensuring data consistency and improved performance.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_94

LANGUAGE: TypeScript
CODE:
```
import * as Users from './model/users';

export const importTeams = action({
  args: {
    teamId: v.id("teams")
  },
  handler: async (ctx, { teamId }) => {
    // Fetch team members from an external API
    const teamMembers = await fetchTeamMemberData(teamId);

    // ✅ This action runs a single mutation that inserts all users in the same transaction.
    await ctx.runMutation(internal.teams.insertUsers, teamMembers);
  }
});
export const insertUsers = internalMutation({
  args: { users: v.array(v.object({ name: v.string(), email: v.string() })) },
  handler: async (ctx, { users }) => {
    for (const { name, email } of users) {
      await Users.insert(ctx, { name, email });
    }
  }
});
```

----------------------------------------

TITLE: Convex User Mutations and Helpers (TypeScript)
DESCRIPTION: This file defines internal Convex mutations for managing user data (creation, update, deletion) based on events received from Clerk webhooks. It also includes helper functions to retrieve user information, either for client exposure or internal processing, by querying the Convex database using the external Clerk user ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_485

LANGUAGE: TypeScript
CODE:
```
import { internalMutation, query, QueryCtx } from "./_generated/server";
import { UserJSON } from "@clerk/backend";
import { v, Validator } from "convex/values";

export const current = query({
  args: {},
  handler: async (ctx) => {
    return await getCurrentUser(ctx);
  },
});

export const upsertFromClerk = internalMutation({
  args: { data: v.any() as Validator<UserJSON> }, // no runtime validation, trust Clerk
  async handler(ctx, { data }) {
    const userAttributes = {
      name: `${data.first_name} ${data.last_name}`,
      externalId: data.id,
    };

    const user = await userByExternalId(ctx, data.id);
    if (user === null) {
      await ctx.db.insert("users", userAttributes);
    } else {
      await ctx.db.patch(user._id, userAttributes);
    }
  },
});

export const deleteFromClerk = internalMutation({
  args: { clerkUserId: v.string() },
  async handler(ctx, { clerkUserId }) {
    const user = await userByExternalId(ctx, clerkUserId);

    if (user !== null) {
      await ctx.db.delete(user._id);
    } else {
      console.warn(
        `Can't delete user, there is none for Clerk user ID: ${clerkUserId}`,
      );
    }
  },
});

export async function getCurrentUserOrThrow(ctx: QueryCtx) {
  const userRecord = await getCurrentUser(ctx);
  if (!userRecord) throw new Error("Can't get current user");
  return userRecord;
}

export async function getCurrentUser(ctx: QueryCtx) {
  const identity = await ctx.auth.getUserIdentity();
  if (identity === null) {
    return null;
  }
  return await userByExternalId(ctx, identity.subject);
}

async function userByExternalId(ctx: QueryCtx, externalId: string) {
  return await ctx.db
    .query("users")
    .withIndex("byExternalId", (q) => q.eq("externalId", externalId))
    .unique();
}
```

----------------------------------------

TITLE: Handling POST Request with Convex HTTP Action
DESCRIPTION: This example defines an HTTP action `postMessage` that processes an incoming POST request. It parses JSON from the request body, then uses `ctx.runMutation` to call an internal Convex mutation (`internal.messages.sendOne`) to store the message, and finally returns a 200 OK response.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_232

LANGUAGE: TypeScript
CODE:
```
import { httpAction } from "./_generated/server";
import { internal } from "./_generated/api";

export const postMessage = httpAction(async (ctx, request) => {
  const { author, body } = await request.json();

  await ctx.runMutation(internal.messages.sendOne, {
    body: `Sent via HTTP action: ${body}`,
    author,
  });

  return new Response(null, {
    status: 200,
  });
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in the Convex backend. It passes required arguments `first` (10) and `second` ('hello') to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex query function (`myQueryFunction`) within a React component using the `useQuery` hook. It passes required arguments (`first`, `second`) to the function, and the returned data will be available in the `data` variable. This hook automatically handles data fetching and re-fetching.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Declaring a Basic Convex Mutation - TypeScript/JavaScript
DESCRIPTION: This snippet shows the fundamental structure for defining a Convex mutation using the `mutation` constructor. It takes an object with a `handler` function, which encapsulates the mutation's logic. Unlike queries, mutations are not required to return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutation = mutation({
  handler: async () => {
    // Mutation logic here
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutation = mutation({
  handler: async () => {
    // Mutation logic here
  }
});
```

----------------------------------------

TITLE: Sending Messages with Current User ID in Convex (TypeScript)
DESCRIPTION: This snippet defines a Convex mutation `send` that allows a logged-in user to send a message. It retrieves the current user's document using `getCurrentUserOrThrow` and then inserts a new message into the `messages` table, associating it with the user's ID as a foreign key.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_487

LANGUAGE: TypeScript
CODE:
```
import { v } from "convex/values";
import { mutation } from "./_generated/server";
import { getCurrentUserOrThrow } from "./users";

export const send = mutation({
  args: { body: v.string() },
  handler: async (ctx, args) => {
    const user = await getCurrentUserOrThrow(ctx);
    await ctx.db.insert("messages", { body: args.body, userId: user._id });
  },
});
```

----------------------------------------

TITLE: Configuring ConvexProviderWithClerk in React
DESCRIPTION: This code sets up the main React application entry point to use Clerk for authentication alongside Convex. It replaces the standard `ConvexProvider` with `ConvexProviderWithClerk`, wrapping it with `ClerkProvider` and passing the Clerk `useAuth` hook and a publishable key.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_341

LANGUAGE: TypeScript
CODE:
```
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import { ClerkProvider, useAuth } from "@clerk/clerk-react";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ClerkProvider publishableKey="pk_test_...">
      <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
        <App />
      </ConvexProviderWithClerk>
    </ClerkProvider>
  </React.StrictMode>
);
```

----------------------------------------

TITLE: Reading Entire Table and Inserting Task with Convex Mutations
DESCRIPTION: This snippet defines two Convex mutations: `writeCount` which reads the entire `tasks` table and patches a `counts` document, and `addTask` which inserts a new task into the `tasks` table. It illustrates how `writeCount` can conflict with `addTask` if both are called concurrently, as any change to the `tasks` table invalidates `writeCount`'s read set, leading to optimistic concurrency errors.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const writeCount = mutation({
  args: {
    target: v.id("counts")
  },
  handler: async (ctx, args) => {
    const tasks = await ctx.db.query("tasks").collect();
    await ctx.db.patch(args.target, { value: tasks });
  }
});

export const addTask = mutation({
  args: {
    text: v.string()
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("tasks", { text: args.text });
  }
});
```

----------------------------------------

TITLE: Calling Convex Mutations from React Client (TypeScript)
DESCRIPTION: Shows how to invoke a Convex mutation from a React client application using the `useMutation` hook and the generated `api` object. This hook provides a convenient way to trigger backend operations and handle their results, including success and error states.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import React from "react";
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api"; // Adjust path as needed

function CallMutationButton() {
  // Use the generated hook for your mutation
  const sendData = useMutation(api.myFunctions.processDataMutation); // Assuming processDataMutation from above

  const handleClick = async () => {
    try {
      const result = await sendData({ input: "Hello from client!" });
      alert(`Mutation successful: ${JSON.stringify(result)}`);
    } catch (error) {
      alert(`Mutation failed: ${error.message}`);
      console.error("Mutation error:", error);
    }
  };

  return (
    <button onClick={handleClick}>
      Call Backend Mutation
    </button>
  );
}

export default CallMutationButton;
```

----------------------------------------

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, and its handler inserts a new document into the 'messages' collection in the database using the provided arguments. It then retrieves and returns the newly inserted document, showcasing database write operations and optional return values.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators and a handler that performs a database write operation, specifically inserting a new document into the 'messages' table. It also shows how to optionally return a value after the mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and implements a handler that inserts a new document into the 'messages' table using the provided arguments. It demonstrates how to perform write operations and optionally return data from a Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Accessing Mutation Context in Convex - TypeScript/JavaScript
DESCRIPTION: This example shows how the `MutationCtx` object is passed as the first parameter to the mutation handler function. This context object provides access to various Convex features like `db` for database operations, `auth` for authentication, `storage` for file management, and `scheduler` for scheduling functions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutationWithContext = mutation({
  handler: async (ctx) => {
    // Use ctx.db, ctx.auth, etc.
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutationWithContext = mutation({
  handler: async (ctx) => {
    // Use ctx.db, ctx.auth, etc.
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table, logs arguments, and returns the collected documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and its handler reads documents from a 'tablename' collection in the database. It logs the arguments and returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-importer/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining Users Table Schema in Convex
DESCRIPTION: This snippet defines the schema for a 'users' table in Convex using `defineTable`. It includes fields for `name` and `tokenIdentifier`, and creates an index on `tokenIdentifier` for efficient user lookups. This schema is crucial for storing user-specific data directly in the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_478

LANGUAGE: TypeScript
CODE:
```
users: defineTable({
  name: v.string(),
  tokenIdentifier: v.string(),
}).index("by_token", ["tokenIdentifier"]),
```

----------------------------------------

TITLE: Setting Team Name (Secure ctx.auth Access Control) - Convex TypeScript
DESCRIPTION: This Convex mutation securely updates a team's name by implementing access control with `ctx.auth.getUserIdentity()`. It ensures that only authenticated users who are authorized (e.g., team members) can modify the team's name.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_80

LANGUAGE: TypeScript
CODE:
```
export const setTeamName = mutation({
  args: {
    id: v.id("teams"),
    name: v.string(),
  },
  handler: async (ctx, { id, name }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    const isTeamMember = /* check if user is a member of the team */
    if (!isTeamMember) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, { name: name });
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that performs a database write operation by inserting a new document into the 'messages' table. Mutations can modify data and optionally return a value, demonstrating transactional backend operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex mutation function named `myMutationFunction`. It validates `first` and `second` as strings, then inserts a new document into the 'messages' table with these arguments. Mutations can modify the database and optionally return a value, such as the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and implements a handler that inserts a new document into the 'messages' table in the database. Mutation functions are used for writing data and can also read from the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Displaying Convex Data in Remix Component - TypeScript
DESCRIPTION: This Remix component snippet (`app/routes/_index.tsx`) demonstrates how to fetch and display data from a Convex backend using the `useQuery` hook. It subscribes to the `api.tasks.get` query, which retrieves task data, and conditionally renders content based on the data's availability.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_28

LANGUAGE: TypeScript
CODE:
```
import type { MetaFunction } from "@remix-run/node";
import { api } from "convex/_generated/api";
import { useQuery } from "convex/react";

export const meta: MetaFunction = () => {
     return [\\
       { title: "New Remix App" },\\
       { name: "description", content: "Welcome to Remix!" },\\
     ];
};

export default function Index() {
     const tasks = useQuery(api.tasks.get);
     return (
       <div style={{ fontFamily: "system-ui, sans-serif", lineHeight: "1.8" }}>
         <h1>Welcome to Remix</h1>
         {tasks === undefined
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and implements a handler that inserts a new document into the 'messages' collection using `ctx.db.insert`. The function demonstrates writing data to the database and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex query function, `myQueryFunction`, within a React component using the `useQuery` hook. It shows how to pass arguments to the query and retrieve the returned data, enabling real-time data fetching from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in the Convex backend. It passes required arguments (`first` and `second`) to the query, and the `data` variable will hold the result returned by the Convex function. This is the client-side integration for reading data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It passes `first` (number) and `second` (string) as arguments to fetch data from the backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Initializing a New Convex Project with Convex Auth using npm - Shell
DESCRIPTION: This command initializes a new Convex project using `npm create convex@latest`. Users are prompted to select `React (Vite)` and `Convex Auth` during the setup process to include authentication capabilities from the start.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_594

LANGUAGE: Shell
CODE:
```
npm create convex@latest
```

----------------------------------------

TITLE: Displaying Convex Data in Svelte Page (TypeScript)
DESCRIPTION: This Svelte page component uses the `useQuery` hook from `convex-svelte` to subscribe to the `api.tasks.get` Convex API function. It handles different states of the query (loading, error, success) and displays a list of tasks, showing their completion status, text, and assigner. This demonstrates how to fetch and render data from a Convex backend in a Svelte frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_463

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
	import { useQuery } from 'convex-svelte';
	import { api } from '../convex/_generated/api.js';

	const query = useQuery(api.tasks.get, {});
</script>

{#if query.isLoading}
	Loading...
{:else if query.error}
	failed to load: {query.error.toString()}
{:else}
	<ul>
		{#each query.data as task}
			<li>
				{task.isCompleted ? '☑' : '☐'}
				<span>{task.text}</span>
				<span>assigned by {task.assigner}</span>
			</li>
		{/each}
	</ul>
{/if}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React with useMutation
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two patterns: a 'fire and forget' approach for immediate execution and a promise-based approach to handle the mutation's asynchronous result, enabling data modification from the frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` Convex mutation within a React component. It obtains the mutation function via the `useMutation` hook and provides two ways to invoke it: a 'fire and forget' approach and one that handles the returned promise to process the result upon completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It demonstrates how to validate input arguments using `convex/values` and how to interact with the Convex database to read data. The function retrieves documents from 'tablename' and logs the provided arguments before returning the documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining Convex Database Schema in TypeScript
DESCRIPTION: This TypeScript snippet defines the schema for a `tasks` table in Convex. It uses `defineSchema` and `defineTable` to specify that each task record will have a `text` field (string) and an `isCompleted` field (boolean), enabling type-checking and runtime enforcement.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_131

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  tasks: defineTable({
    text: v.string(),
    isCompleted: v.boolean(),
  }),
});
```

----------------------------------------

TITLE: Setting Up Convex Development Deployment
DESCRIPTION: This command initializes a Convex development deployment, prompting for GitHub login and project creation. It also creates a `convex/` folder for backend API functions and continuously syncs local changes to the cloud development environment.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_458

LANGUAGE: Shell
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Defining Schema with Various Data Types in Convex (TypeScript)
DESCRIPTION: This example illustrates how to define a Convex schema table (`documents`) using a variety of `v` validators to specify different data types for document fields. It includes examples for `id`, `string`, `number`, `boolean`, and a `nestedObject` with its own properties.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_437

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  documents: defineTable({
    id: v.id("documents"),
    string: v.string(),
    number: v.number(),
    boolean: v.boolean(),
    nestedObject: v.object({
      property: v.string()
    })
  })
});

```

----------------------------------------

TITLE: Wiring Up Convex Client Provider in Next.js Layout
DESCRIPTION: This snippet from `app/layout.tsx` imports the `ConvexClientProvider` and sets up font loading. It demonstrates the necessary imports to integrate the Convex provider into the root layout of a Next.js application, ensuring all child components have access to the Convex client.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_279

LANGUAGE: TypeScript
CODE:
```
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ConvexClientProvider } from "./ConvexClientProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"]
});

const geistMono = Geist_Mono({

```

----------------------------------------

TITLE: Define Paginated Query Function (Convex, TS/JS)
DESCRIPTION: This snippet shows the basic structure of a paginated query function in Convex. It accepts a `paginationOpts` argument, validates it, and calls `.paginate()` on an ordered database query to return a single page of results along with a cursor.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { paginationOptsValidator } from "convex/server";

export const list = query({
  args: {
    paginationOpts: paginationOptsValidator,
  },
  handler: async (ctx, args) => {
    return await ctx.db.query("messages").order("desc").paginate(args.paginationOpts);
  },
});
```

LANGUAGE: javascript
CODE:
```
import { query } from "./_generated/server";
import { paginationOptsValidator } from "convex/server";

export const list = query({
  args: {
    paginationOpts: paginationOptsValidator,
  },
  handler: async (ctx, args) => {
    return await ctx.db.query("messages").order("desc").paginate(args.paginationOpts);
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two common patterns: a 'fire and forget' call where the mutation is executed without waiting for a result, and a pattern where the `.then()` method is used to process the result once the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Calling a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It demonstrates both 'fire and forget' usage, where the mutation is called without waiting for a result, and handling the promise result once the mutation has completed.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Installing Convex CLI
DESCRIPTION: This command installs the Convex command-line interface globally or locally within your project, making `convex` commands available for managing Convex projects.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_2

LANGUAGE: shell
CODE:
```
npm install convex
```

----------------------------------------

TITLE: Avoiding .filter on Convex Database Queries (TypeScript/JavaScript)
DESCRIPTION: This snippet demonstrates how to avoid using .filter directly on Convex database queries for better performance. Instead of filtering large datasets in code or with .filter, it's more efficient to use .withIndex for indexed fields or perform filtering in application code for smaller, unindexed sets. This approach reduces database bandwidth and re-runs.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// convex/messages.ts
import { query } from "./_generated/server";

// BAD: Filtering in code after collect (inefficient for large sets)
export const getMessagesFilteredInCodeBad = query({
  handler: async (ctx) => {
    const allMessages = await ctx.db.query("messages").collect();
    return allMessages.filter(message => message.author === "Alice");
  }
});

// BAD: Using .filter() on a query (less efficient than withIndex)
export const getMessagesWithFilterBad = query({
  handler: async (ctx) => {
    return await ctx.db.query("messages")
      .filter((q) => q.eq(q.field("author"), "Alice"))
      .collect();
  }
});

// GOOD: Using .withIndex() for efficient filtering (requires index)
// Add index: db.defineTable("messages").index("by_author", ["author"]);
export const getMessagesWithIndexGood = query({
  handler: async (ctx) => {
    return await ctx.db.query("messages")
      .withIndex("by_author", (q) => q.eq("author", "Alice"))
      .collect();
  }
});
```

LANGUAGE: JavaScript
CODE:
```
// convex/messages.js
import { query } from "./_generated/server";

// BAD: Filtering in code after collect (inefficient for large sets)
export const getMessagesFilteredInCodeBad = query({
  handler: async (ctx) => {
    const allMessages = await ctx.db.query("messages").collect();
    return allMessages.filter(message => message.author === "Alice");
  }
});

// BAD: Using .filter() on a query (less efficient than withIndex)
export const getMessagesWithFilterBad = query({
  handler: async (ctx) => {
    return await ctx.db.query("messages")
      .filter((q) => q.eq(q.field("author"), "Alice"))
      .collect();
  }
});

// GOOD: Using .withIndex() for efficient filtering (requires index)
// Add index: db.defineTable("messages").index("by_author", ["author"]);
export const getMessagesWithIndexGood = query({
  handler: async (ctx) => {
    return await ctx.db.query("messages")
      .withIndex("by_author", (q) => q.eq("author", "Alice"))
      .collect();
  }
});
```

----------------------------------------

TITLE: Defining Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named myMutationFunction. It validates its arguments (first and second as strings) and inserts a new document into the "messages" collection using ctx.db.insert(). The document's body and author fields are populated from the input arguments. The function returns the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#_snippet_2

LANGUAGE: ts
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and demonstrates reading data from the database using `ctx.db.query` and accessing client-provided arguments. The function returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments and implements a handler that performs write operations to the database, specifically inserting a new document into the 'messages' table. Mutation functions are used for modifying data and can optionally return a value after completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new 'message' document into the 'messages' table using the provided arguments. It then retrieves and returns the newly inserted document, showcasing database write operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and demonstrates reading data from the database using `ctx.db.query`. The function logs arguments and returns collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Correct: Using Internal Convex Mutation and Helper Functions (TypeScript)
DESCRIPTION: This snippet demonstrates the recommended pattern for Convex functions. It introduces `sendMessageHelper` for shared logic, a public `sendMessage` mutation with access control, and an `internalMutation` (`sendInternalMessage`) for internal calls (e.g., from cron jobs). This ensures that internal calls bypass unnecessary public checks, improving security and reusability. The `crons.ts` now correctly calls the `internal.messages.sendInternalMessage`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_82

LANGUAGE: TypeScript
CODE:
```
// ✅ Using `internal`
import { MutationCtx } from './_generated/server';
async function sendMessageHelper(
  ctx: MutationCtx,
  args: { body: string; author: string }
) {
  // add message to the database
}

export const sendMessage = mutation({
  args: {
    body: v.string()
  },
  handler: async (ctx, { body }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    await sendMessageHelper(ctx, { body, author: user.name ?? "Anonymous" });
  }
});

export const sendInternalMessage = internalMutation({
  args: {
    body: v.string(),
    // don't need to worry about `author` being spoofed since this is an internal function
    author: v.string()
  },
  handler: async (ctx, { body, author }) => {
    await sendMessageHelper(ctx, { body, author });
  }
});

// crons.ts
crons.daily(
  "send daily reminder",
  { hourUTC: 17, minuteUTC: 30 },
  internal.messages.sendInternalMessage,
  { author: "System", body: "Share your daily update!" }
);
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction` that reads data from the database. It specifies argument validators using `convex/values` and demonstrates how to access arguments and perform database reads using `ctx.db.query`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database. It demonstrates accessing client-provided arguments and returning data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/1-smileys/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table, logs arguments, and returns the collected documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Generating Convex Application Code
DESCRIPTION: This command initiates the Convex code generation process, which creates app-specific JavaScript and TypeScript type definition files in the `convex/_generated` directory. Running this command is crucial for leveraging improved autocompletion and type safety within your development environment.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke a Convex mutation function (`myMutationFunction`) from a React component using the `useMutation` hook. It shows both a 'fire and forget' approach and handling the promise result after the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/bun/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Passing Arguments to Mutation in React (TSX)
DESCRIPTION: This snippet illustrates how to pass arguments to a Convex mutation function when calling the async function returned by the `useMutation` hook. It shows passing an object `{ a, b }` containing the required parameters for the mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export function App() {
  const a = "Hello world";
  const b = 4;
  const doSomething = useMutation(api.functions.doSomething);
  return <button onClick={() => doSomething({ a, b })}>Click me</button>;
}
```

----------------------------------------

TITLE: Integrating an AI Agent into a Convex Workflow
DESCRIPTION: This code illustrates how to expose an agent as a callable step ('asAction') for integration into a Convex 'WorkflowManager'. It defines a durable workflow that uses the agent to generate suggestions, adapts them for a specific user, and then sends a message, showcasing multi-step AI processes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/agents.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
export const supportAgentStep = supportAgent.asAction({ maxSteps: 10 });

const workflow = new WorkflowManager(components.workflow);
const s = internal.example; // where steps are defined

export const supportAgentWorkflow = workflow.define({
  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },
  handler: async (step, { prompt, userId, threadId }) => {
    const suggestion = await step.runAction(s.supportAgentStep, {
      threadId,
      generateText: { prompt }
    });
    const polished = await step.runAction(s.adaptSuggestionForUser, {
      suggestion,
      userId
    });
    await step.runMutation(s.sendUserMessage, {
      userId,
      message: polished.message
    });
  }
});
```

----------------------------------------

TITLE: Defining Indexes in Convex Schema (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to define a table schema in Convex with multiple indexes. It uses `defineSchema` and `defineTable` from `convex/server` and `v` from `convex/values`. The `messages` table is defined with fields for channel, body, and user, and includes two indexes: `by_channel` and `by_channel_user` to facilitate querying and ordering by these fields.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// Define a messages table with two indexes.
export default defineSchema({
  messages: defineTable({
    channel: v.id("channels"),
    body: v.string(),
    user: v.id("users"),
  })
    .index("by_channel", ["channel"])
    .index("by_channel_user", ["channel", "user"]),
});
```

----------------------------------------

TITLE: Defining an Example Convex Mutation - TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates a basic Convex mutation. It accepts `name` and `age` as arguments, inserts a new 'users' document into the database using `db.insert()`, and returns an object indicating success and the ID of the newly created document. The handler function is `async` to allow `await`ing database operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const exampleMutation = mutation({
  handler: async ({ db }, { name, age }) => {
    const id = await db.insert("users", { name, age });
    return { success: true, id };
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { mutation } from "./_generated/server";

export const exampleMutation = mutation({
  handler: async ({ db }, { name, age }) => {
    const id = await db.insert("users", { name, age });
    return { success: true, id };
  }
});
```

----------------------------------------

TITLE: Filtering by Equality in Convex TypeScript
DESCRIPTION: This snippet demonstrates how to filter documents in a Convex database query based on an exact equality condition. It uses `q.eq` to find documents in the `users` table where the `name` field is exactly 'Alex'. The `q.field` method is used to reference the document property.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Get all users named "Alex".
const usersNamedAlex = await ctx.db
  .query("users")
  .filter((q) => q.eq(q.field("name"), "Alex"))
  .collect();
```

----------------------------------------

TITLE: Displaying UI Based on Clerk Authentication State
DESCRIPTION: This component demonstrates how to conditionally render UI elements based on the user's authentication status using Clerk's `SignInButton`, `UserButton`, and Convex's `Authenticated` and `Unauthenticated` components. It also shows how to call a Convex query that requires authentication within an `Authenticated` context.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_342

LANGUAGE: TypeScript
CODE:
```
import { SignInButton, UserButton } from "@clerk/clerk-react";
import { Authenticated, Unauthenticated, useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

function App() {
  return (
    <main>
      <Unauthenticated>
        <SignInButton />
      </Unauthenticated>
      <Authenticated>
        <UserButton />
        <Content />
      </Authenticated>
    </main>
  );
}

function Content() {
  const messages = useQuery(api.messages.getForCurrentUser);
  return <div>Authenticated content: {messages?.length}</div>;
}

export default App;
```

----------------------------------------

TITLE: Example Usage of Convex Data Types in TS/JS
DESCRIPTION: Examples demonstrating how various Convex data types are represented and used within TypeScript or JavaScript code.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/_convexValues.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
doc._id
null
3n
3.1
true
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call `myMutationFunction`. It shows two common patterns: a 'fire and forget' invocation and an invocation that processes the returned promise result once the mutation completes. Mutations are used for database writes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows two ways to use the mutation: a 'fire and forget' approach and handling the result with a `.then()` callback after the mutation completes. It demonstrates client-side interaction with backend mutations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using useMutation Hook in React (TSX)
DESCRIPTION: This example shows how to use the `useMutation` React hook provided by `convex/react` to call a Convex mutation function (`api.functions.doSomething`). The hook returns an async function that is triggered on a button click to perform data modifications.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  return <button onClick={() => doSomething()}>Click me</button>;
}
```

----------------------------------------

TITLE: Calling a Convex Action from a React Client (TypeScript)
DESCRIPTION: This example demonstrates how to invoke a Convex action from a React client application using the `useAction` hook provided by `convex/react`. It integrates with the generated `api` object to reference the action. Actions from a single client are parallelized, unlike mutations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_67

LANGUAGE: TypeScript
CODE:
```
import { useAction } from "convex/react";
import { api } from "../convex/_generated/api";

export function MyApp() {
  const performMyAction = useAction(api.myFunctions.doSomething);
  const handleClick = () => {
    performMyAction({ a: 1 });
  };
  // pass `handleClick` to a button
  // ...
}
```

----------------------------------------

TITLE: Using Indexes with .collect for Efficient Queries (TypeScript/JavaScript)
DESCRIPTION: This snippet illustrates the best practice of using an index to filter results before calling .collect in Convex. This prevents loading a large number of documents into memory, reducing database bandwidth and minimizing query re-runs or mutation conflicts, especially when dealing with potentially large datasets.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// convex/movies.ts
import { query } from "./_generated/server";

// GOOD: Using an index to limit results before .collect
// Add index: db.defineTable("movies").index("by_release_year", ["releaseYear"]);
export const getMoviesByYearIndexed = query({
  handler: async (ctx) => {
    return await ctx.db.query("movies")
      .withIndex("by_release_year", (q) => q.eq("releaseYear", 2023))
      .collect();
  }
});
```

LANGUAGE: JavaScript
CODE:
```
// convex/movies.js
import { query } from "./_generated/server";

// GOOD: Using an index to limit results before .collect
// Add index: db.defineTable("movies").index("by_release_year", ["releaseYear"]);
export const getMoviesByYearIndexed = query({
  handler: async (ctx) => {
    return await ctx.db.query("movies")
      .withIndex("by_release_year", (q) => q.eq("releaseYear", 2023))
      .collect();
  }
});
```

----------------------------------------

TITLE: Efficiently Collecting Data with Indexes in Convex (TypeScript)
DESCRIPTION: This example illustrates the importance of using indexes to filter large datasets before calling `.collect` in Convex. It contrasts an inefficient approach that collects all movies and then filters in code with an optimized method that uses `withIndex` to narrow down results server-side, reducing bandwidth and re-run conflicts.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_384

LANGUAGE: TypeScript
CODE:
```
// ❌ -- potentially unbounded
const allMovies = await ctx.db.query("movies").collect();
const moviesByDirector = allMovies.filter(
  (m) => m.director === "Steven Spielberg",
);

// ✅ -- small number of results, so `collect` is fine
const moviesByDirector = await ctx.db
  .query("movies")
  .withIndex("by_director", (q) => q.eq("director", "Steven Spielberg"))
  .collect();
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction` that writes data to the database. It includes argument validation, demonstrates inserting a new document into a 'messages' table, and optionally returning the newly created document. Mutation functions can modify the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining User Table Schema in Convex
DESCRIPTION: This schema defines a 'users' table in Convex with fields for 'tokenIdentifier' and 'name'. It includes an index on 'tokenIdentifier' for efficient lookups, typically used to find a user based on their authentication provider's unique identifier.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    tokenIdentifier: v.string(),
    name: v.string(),
    // Add other user fields here
  }).index("by_token", ["tokenIdentifier"]),
  // ... other tables
});
```

----------------------------------------

TITLE: Combining Filters with AND Operator in Convex TypeScript
DESCRIPTION: This snippet demonstrates how to combine multiple filter conditions using the logical AND operator. It uses `q.and` to find documents in the `users` table where both the `name` is 'Alex' and the `age` is greater than or equal to 18. This allows for precise multi-condition filtering.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Get all users named "Alex" whose age is at least 18.
const adultAlexes = await ctx.db
  .query("users")
  .filter((q) =>
    q.and(q.eq(q.field("name"), "Alex"), q.gte(q.field("age"), 18))
  )
  .collect();
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This example illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows both a 'fire and forget' approach and handling the asynchronous result of the mutation, demonstrating how to interact with Convex mutations from the client.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' call and a call that processes the returned result using a `.then()` callback, demonstrating client-side data modification.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use a Convex mutation function, `myMutationFunction`, within a React component via the `useMutation` hook. It demonstrates two common patterns: 'fire and forget' for immediate execution and handling the asynchronous result using a Promise, allowing for actions upon mutation completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This example demonstrates how to invoke `myMutationFunction` from a React component using the `useMutation` hook. It shows two patterns: a 'fire and forget' call and a call that processes the returned result using a Promise. Mutations are used for writing data to the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app-clerk/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Defining a Read-Only Convex Query Function (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a read-only Convex query function using the `query` wrapper. Query functions receive a `db` object implementing `GenericDatabaseReader` for read operations. It's typically used with generated server code from `npx convex dev`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_140

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export default query({
  handler: async ({ db }, { arg1, arg2 }) => {
    // Your (read-only) code here!
  },
});
```

----------------------------------------

TITLE: Calling a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myMutationFunction` from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' call and a call that processes the result once the mutation completes, typically used within an event handler.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` Convex mutation within a React component. It uses the `useMutation` hook to get a callable function. The example shows both 'fire and forget' invocation and handling the asynchronous result of the mutation using a Promise.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows both a 'fire and forget' approach and handling the promise result after the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and implements a handler that inserts a new document into the 'messages' table. Mutation functions can modify the database and optionally return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/empty/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and demonstrates how to read data from the database using `ctx.db.query` and access client-provided arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It demonstrates argument validation using `convex/values`, reading data from the database via `ctx.db.query`, and processing arguments passed from the client. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and its handler asynchronously queries a 'tablename' collection from the database, logs the arguments, and returns the collected documents. It demonstrates reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Limiting Results or Denormalizing Before .collect (TypeScript/JavaScript)
DESCRIPTION: This snippet shows strategies like applying a limit or considering denormalization to manage the number of documents returned by .collect in Convex. This is vital when the full dataset is large, preventing excessive bandwidth usage and improving query efficiency by only fetching necessary data or pre-aggregating it.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/best-practices/best-practices.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// convex/movies.ts
import { query } from "./_generated/server";

// GOOD: Using .take() to limit results
export const getTopMoviesLimited = query({
  handler: async (ctx) => {
    return await ctx.db.query("movies")
      .order("desc") // Example: order by some popularity score
      .take(10); // Limit to top 10 movies
  }
});
```

LANGUAGE: JavaScript
CODE:
```
// convex/movies.js
import { query } from "./_generated/server";

// GOOD: Using .take() to limit results
export const getTopMoviesLimited = query({
  handler: async (ctx) => {
    return await ctx.db.query("movies")
      .order("desc") // Example: order by some popularity score
      .take(10); // Limit to top 10 movies
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators and illustrates how to insert or modify documents in the database using `ctx.db.insert`, and optionally return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new message document into the 'messages' collection in the database. Mutation functions are used for writing and modifying data in the Convex database and can optionally return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators and a handler that performs database write operations, specifically inserting a new document into the 'messages' table. It also demonstrates how a mutation can return a value after completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-typing-indicator/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Validating Mutation Arguments with Convex `v` Validators - TypeScript
DESCRIPTION: This snippet demonstrates how to add type declaration and validation for mutation arguments using the `args` object and `v` validators. By specifying `v.string()` for `text` and `author`, Convex automatically validates incoming arguments, ensuring type safety and robust data handling before the handler function executes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const addMessageWithValidation = mutation({
  args: {
    text: v.string(),
    author: v.string()
  },
  handler: async ({ db }, { text, author }) => {
    await db.insert("messages", { text, author });
  }
});
```

----------------------------------------

TITLE: Mutation to Store Current User in Convex
DESCRIPTION: This Convex mutation retrieves the current user's identity from `ctx.auth`. If the user exists based on their `tokenIdentifier`, it updates their information (e.g., name); otherwise, it inserts a new user document into the 'users' table. It requires authentication.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const storeUser = mutation({
  args: {},
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Called storeUser without authentication");
    }

    // Check if the user is already in the database
    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) =>
        q.eq("tokenIdentifier", identity.tokenIdentifier)
      )
      .unique();

    if (user) {
      // If the user exists, update their name if it has changed
      if (user.name !== identity.name) {
        await ctx.db.patch(user._id, { name: identity.name });
      }
      return user._id;
    } else {
      // If the user doesn't exist, insert a new document
      return await ctx.db.insert("users", {
        tokenIdentifier: identity.tokenIdentifier,
        name: identity.name!,
      });
    }
  },
});
```

----------------------------------------

TITLE: Using usePaginatedQuery Hook in Convex React
DESCRIPTION: This snippet demonstrates how to use the `usePaginatedQuery` hook to load data reactively from a paginated query. It's designed for 'infinite scroll' UIs, concatenating results into a single list and managing continuation cursors. The example shows fetching messages from a 'general' channel with an initial load of 5 items.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_504

LANGUAGE: TypeScript
CODE:
```
const { results, status, isLoading, loadMore } = usePaginatedQuery(
  api.messages.list,
  { channel: "#general" },
  { initialNumItems: 5 }
);
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database and logs the arguments before returning the documents. It demonstrates basic database read operations and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the retrieved documents. It demonstrates basic database reads and argument access within a Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-app-router-snippets/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It uses `v.number()` and `v.string()` for argument validation, demonstrating how to read data from the database using `ctx.db.query` and return processed results. It requires the `query` and `v` imports from Convex.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: This snippet defines a server-side Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the collected documents. It demonstrates how to interact with the Convex database for reading data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Using Convex Query Function in React Component
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` defined in Convex within a React component. It utilizes the `useQuery` hook from the Convex API to fetch data, passing required arguments `first` and `second` to the backend query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the documents. It demonstrates basic database read operations and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Fetch and Display Data in React Component (JavaScript)
DESCRIPTION: Use the useQuery hook from 'convex/react' to fetch data from the Convex backend API and display it in a React component.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#_snippet_7

LANGUAGE: js
CODE:
```
import { useQuery } from "convex/react";
import { api } from "./convex/_generated/api";

function App() {
  const tasks = useQuery(api.tasks.get);
  return (
    <div className="App">
      {JSON.stringify(tasks, null, 2)}
    </div>
  );
}
```

----------------------------------------

TITLE: Conditionally Rendering Tasks in React with Convex
DESCRIPTION: This JSX snippet illustrates how to conditionally render a list of tasks within a React component. It displays a 'loading...' message while the `tasks` data is being fetched, and then maps over the `tasks` array to render each item once available. This pattern is commonly used with Convex's `useQuery` hook to manage asynchronous data loading states.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_29

LANGUAGE: JSX
CODE:
```
           ? "loading..."
           : tasks.map(({ _id, text }) => <div key={_id}>{text}</div>)}
       </div>
     );
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` in a React component via the `useQuery` hook. It passes the required `first` (number) and `second` (string) arguments to fetch data from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Fetching Data with useQuery in React
DESCRIPTION: Demonstrates how to use the `useQuery` hook from `convex/react` within a React component to fetch data from a Convex query function (`api.tasks.getAllOpenTasks`). This hook automatically updates the component whenever the query result changes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// In your React component
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function TaskList() {
  const data = useQuery(api.tasks.getAllOpenTasks);
  return data ?? "Loading...";
}
```

----------------------------------------

TITLE: Implementing User-Specific Authorization in Convex Mutation (TypeScript)
DESCRIPTION: This Convex mutation demonstrates how to enforce authorization by checking if the user is authenticated using `getAuthUserId`. If no user ID is found, the function returns early. Otherwise, it proceeds to update the database, in this case, removing the user's image fields. This pattern ensures that only authenticated users can perform the action, and the database operation is tied to the specific user's ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
export const removeUserImage = mutation({
  args: {},
  handler: async (ctx) => {
    // highlight-next-line
    const userId = await getAuthUserId(ctx);
    // highlight-next-line
    if (!userId) {
      // highlight-next-line
      return;
      // highlight-next-line
    }
    ctx.db.patch(userId, { imageId: undefined, image: undefined });
  }
});
```

----------------------------------------

TITLE: Defining sendMessage Mutation in Convex Backend (TypeScript)
DESCRIPTION: This snippet defines a `sendMessage` mutation function in a Convex backend file. It uses `v.string()` to validate `user` and `body` arguments as strings and inserts a new document into the 'messages' table using `ctx.db.insert`. The function runs as an automatic transaction.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_304

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const sendMessage = mutation({
  args: {
    user: v.string(),
    body: v.string(),
  },
  handler: async (ctx, args) => {
    console.log("This TypeScript function is running on the server.");
    await ctx.db.insert("messages", {
      user: args.user,
      body: args.body,
    });
  },
});
```

----------------------------------------

TITLE: Convex Query with Helper Function for Reusability in TypeScript
DESCRIPTION: This snippet demonstrates how to split query logic into reusable helper functions. The `getTaskAndAuthor` query fetches a task and then uses an internal `getUserName` helper function to retrieve the author's name. This pattern promotes code organization and reusability within Convex functions, especially for common data fetching patterns.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_360

LANGUAGE: TypeScript
CODE:
```
import { Id } from "./_generated/dataModel";
import { query, QueryCtx } from "./_generated/server";
import { v } from "convex/values";

export const getTaskAndAuthor = query({
  args: { id: v.id("tasks") },
  handler: async (ctx, args) => {
    const task = await ctx.db.get(args.id);
    if (task === null) {
      return null;
    }
    return { task, author: await getUserName(ctx, task.authorId ?? null) };
  },
});

async function getUserName(ctx: QueryCtx, userId: Id<"users"> | null) {
  if (userId === null) {
    return null;
  }
  return (await ctx.db.get(userId))?.name;
}
```

----------------------------------------

TITLE: Using Helper Functions in Convex Mutations (TypeScript)
DESCRIPTION: This snippet illustrates how to refactor mutation logic into a separate helper function (`trackChange`) to promote code reuse and maintainability. The helper function accepts the `MutationCtx` and performs a database insert, demonstrating how mutations can call other functions to encapsulate shared logic.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_414

LANGUAGE: TypeScript
CODE:
```
import { v } from "convex/values";
import { mutation, MutationCtx } from "./_generated/server";

export const addItem = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    await ctx.db.insert("tasks", { text: args.text });
    await trackChange(ctx, "addItem");
  },
});

async function trackChange(ctx: MutationCtx, type: "addItem" | "removeItem") {
  await ctx.db.insert("changes", { type });
}
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This TypeScript snippet defines `loadOne`, a Convex query function. It specifies arguments (`normalizedId`, `token`), a union return type for link data or null, and includes an authorization check. The handler queries the 'links' table by `normalizedId` using an index, returning the first matching record.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_270

LANGUAGE: TypeScript
CODE:
```
import { v } from "convex/values";
import { query } from "./_generated/server";
import { LinkTable } from "./schema";

export const loadOne = query({
args: { normalizedId: v.string(), token: v.string() },
returns: v.union(
    v.object({
      ...LinkTable.validator.fields,
      _creationTime: v.number(),
      _id: v.id("links"),
    }),
    v.null(),
),
handler: async (ctx, { normalizedId, token }) => {
    if (token === "" || token !== process.env.CONVEX_AUTH_TOKEN) {
      throw new Error("Invalid authorization token");
    }
    return await ctx.db
      .query("links")
      .withIndex("by_normalizedId", (q) => q.eq("normalizedId", normalizedId))
      .first();
},
});
```

----------------------------------------

TITLE: Extracting User Identity Fields in Convex Mutation
DESCRIPTION: This snippet demonstrates how to destructure and access specific fields like `tokenIdentifier`, `name`, and `email` from the `UserIdentity` object returned by `ctx.auth.getUserIdentity()`. These fields provide essential information about the authenticated user, with their availability depending on the configured identity provider and JWT claims.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_19

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutation = mutation({
  args: {
    // ...
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    const { tokenIdentifier, name, email } = identity!;
    //...
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new document into the 'messages' table. Mutation functions are used for writing (inserting, updating, deleting) data in the Convex database and can also read data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook provided by Convex. It passes the required arguments `first` (10) and `second` ('hello') to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tutorial/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments (`first` and `second`) to the query, and the `data` variable will hold the result returned by the Convex function, enabling client-side data fetching.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use the `myMutationFunction` in a React component via the `useMutation` hook. It shows two ways to invoke the mutation: a 'fire and forget' approach and one that processes the returned result using a `.then()` callback.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/text-importer/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Calling a Convex Mutation Function from React
DESCRIPTION: This snippet demonstrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows two patterns: a 'fire and forget' call and a call that processes the returned result using a promise, passing the required string arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Exposing Convex Database Query (JavaScript)
DESCRIPTION: This JavaScript code defines a Convex query function named 'get' within the 'tasks.js' file. It uses the Convex 'db' object to query and collect all documents from the 'tasks' table, exposing an API endpoint 'tasks:get' for client-side access.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_122

LANGUAGE: JavaScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
     handler: async ({ db }) => {
       return await db.query("tasks").collect();
     },
});
```

----------------------------------------

TITLE: Integrating sendMessage Mutation in React Frontend (TypeScript/React)
DESCRIPTION: This code demonstrates how to integrate the `sendMessage` mutation into a React frontend. It imports `useMutation` and `api` from Convex, then uses `useMutation(api.chat.sendMessage)` to obtain a callable function. This function is then invoked within a form's `onSubmit` handler to send messages to the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_305

LANGUAGE: TypeScript
CODE:
```
// Import `useMutation` and `api` from Convex.
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

//...

export default function App() {
  // Replace the "TODO: Add mutation hook here." with:
  const sendMessage = useMutation(api.chat.sendMessage);

  //...

  return (
    <main className="chat">
      {/* ... */}
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          // Replace "alert("Mutation not implemented yet");" with:
          await sendMessage({ user: NAME, body: newMessageText });

          setNewMessageText("");
        }}
      >
        {/* ... */}
      </form>
    </main>
  );
}
```

----------------------------------------

TITLE: Handling Mutation Response with Promises in React (TSX)
DESCRIPTION: This snippet shows an alternative way to handle the response and errors from a Convex mutation call using JavaScript Promises (`.then()` and `.catch()`). It logs errors and the result after the promise resolves or rejects.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  const onClick = () => {
    doSomething()
      .catch((error) => {
        console.error(error);
      })
      .then((result) => {
        console.log(result);
      });
  };
  return <button onClick={onClick}>Click me</button>;
}
```

----------------------------------------

TITLE: Accessing Public Convex API with React Hook - JavaScript
DESCRIPTION: This snippet demonstrates how to import and use the `api` object, representing your app's public Convex API, within a React component. It shows using `useQuery` from `convex/react` to fetch data by referencing a public Convex function, `api.messages.list`, enabling client-side data retrieval.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/api.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { api } from "../convex/_generated/api";
import { useQuery } from "convex/react";

const data = useQuery(api.messages.list);
```

----------------------------------------

TITLE: Calling Convex HTTP Action with JWT Token - TypeScript
DESCRIPTION: This snippet demonstrates how to make an HTTP `fetch` request to a Convex HTTP action endpoint. It includes an `Authorization` header with a JWT token, allowing the Convex backend to access user identity via `ctx.auth.getUserIdentity()`. This is essential for authenticated API calls.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_20

LANGUAGE: TypeScript
CODE:
```
const jwtToken = "...";

fetch("https://<deployment name>.convex.site/myAction", {
  headers: {
    Authorization: `Bearer ${jwtToken}`,
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in the Convex backend. It passes required arguments and retrieves the returned data, enabling real-time data fetching from Convex.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-query/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database (`ctx.db.query`) and logs client-provided arguments. Query functions are used for reading data and can perform arbitrary JavaScript logic before returning results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Exploring Backend Function Wrapping Patterns in Convex
DESCRIPTION: This snippet presents various syntaxes for wrapping Convex `mutation` functions, showcasing different approaches to applying middleware. It illustrates how middleware can modify the function's implementation directly or wrap the `mutation` factory itself, impacting argument handling and type inference.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
wrapTheImpl = mutation(modifyTheFunction((ctx, { a: number }) => {}));
wrapTheImpl2 = mutation({
  args: { a: v.number() },
  handler: modifyTheFunction((ctx, { a: number }) => {})
}
wrapTheMutation = modifyTheMutation(mutation((ctx, { a: number }) => {}));
wrapTheMutation2 = modifyTheMutation(mutation({
  args: { a: v.number() },
  handler: (ctx, { a: number }) => {}
}
wrapTheWrapper = modifyTheMutation(mutation)((ctx, { a: number }) => {});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke `myMutationFunction`. It shows two common patterns: a 'fire and forget' approach where the mutation is called without waiting for a result, and an approach where a promise is handled to process the mutation's return value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function (`myMutationFunction`) within a React component using the `useMutation` hook. It shows two patterns for invoking the mutation: 'fire and forget' and handling the asynchronous result with a `.then()` callback. Mutations are typically triggered by user interactions like button presses.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-pages-router/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction` from Convex. It shows two common patterns: a 'fire and forget' call and a call that processes the returned result using a promise. This hook facilitates performing write operations to the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/giphy-action/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to invoke a Convex mutation function, `myMutationFunction`, from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' call and a call that processes the returned result using a promise. Mutation functions are typically triggered by user interactions to modify backend data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This example illustrates how to use the `myMutationFunction` Convex mutation within a React component using the `useMutation` hook. It demonstrates both 'fire and forget' invocation and handling the asynchronous result of the mutation, showing how to trigger backend data modifications from the client.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database, logs arguments, and returns documents. Query functions are used for reading data and can perform arbitrary JavaScript logic.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `v.number()` and `v.string()`, and implements the handler to read documents from a 'tablename' collection using `ctx.db.query().collect()`. Query functions are read-only and can return arbitrary JavaScript data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Configuring Client-Side Auth0 Authentication with Convex in Next.js
DESCRIPTION: This snippet demonstrates how to set up client-side authentication using Auth0 with Convex in a Next.js application. It initializes `ConvexReactClient` and wraps the application with `Auth0Provider` and `ConvexProviderWithAuth0`, ensuring user authentication context is available throughout the client-side application. It requires `NEXT_PUBLIC_CONVEX_URL`, `NEXT_PUBLIC_AUTH0_DOMAIN`, and `NEXT_PUBLIC_AUTH0_CLIENT_ID` environment variables.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_477

LANGUAGE: TypeScript
CODE:
```
"use client";

import { Auth0Provider } from "@auth0/auth0-react";
import { ConvexReactClient } from "convex/react";
import { ConvexProviderWithAuth0 } from "convex/react-auth0";
import { ReactNode } from "react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return (
    <Auth0Provider
      domain={process.env.NEXT_PUBLIC_AUTH0_DOMAIN!}
      clientId={process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID!}
      authorizationParams={{
        redirect_uri:
          typeof window === "undefined" ? undefined : window.location.origin,
      }}
      useRefreshTokens={true}
      cacheLocation="localstorage"
    >
      <ConvexProviderWithAuth0 client={convex}>
        {children}
      </ConvexProviderWithAuth0>
    </Auth0Provider>
  );
}
```

----------------------------------------

TITLE: Combining Filters with OR Operator in Convex TypeScript
DESCRIPTION: This snippet illustrates how to combine multiple filter conditions using the logical OR operator. It uses `q.or` to find documents in the `users` table where the `name` is either 'Alex' or 'Emma'. This allows for flexible filtering based on alternative conditions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/filters.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// Get all users named "Alex" or "Emma".
const usersNamedAlexOrEmma = await ctx.db
  .query("users")
  .filter((q) =>
    q.or(q.eq(q.field("name"), "Alex"), q.eq(q.field("name"), "Emma"))
  )
  .collect();
```

----------------------------------------

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: This snippet defines a server-side Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new document into the 'messages' collection in the database. It demonstrates writing data to the Convex database and optionally returning a value after the operation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new 'message' document into the database. Mutation functions are used for writing and modifying data in the Convex database and can also return values.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings. The handler inserts a new document into the 'messages' table, using the provided arguments as `body` and `author`, and then optionally returns the newly inserted document by its ID. It showcases database writes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Handling Convex Authentication State in React
DESCRIPTION: This code demonstrates how to use Convex's Authenticated, Unauthenticated, and AuthLoading components to render different UI based on the user's authentication status. It also shows fetching data using useQuery within an authenticated component. It depends on convex/react and the generated Convex API.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { Authenticated, Unauthenticated, AuthLoading, useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

function App() {
  return (
    <main>
      <Unauthenticated>
        <SignInButton />
      </Unauthenticated>
      <Authenticated>
        <UserButton />
        <Content />
      </Authenticated>
      <AuthLoading>
        <p>Still loading</p>
      </AuthLoading>
    </main>
  );
}

function Content() {
  const messages = useQuery(api.messages.getForCurrentUser);
  return <div>Authenticated content: {messages?.length}</div>;
}

export default App;
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to consume a Convex query function, `myQueryFunction`, within a React component using the `useQuery` hook. It passes specific arguments (`first` as a number, `second` as a string) to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Optimistically Updating Paginated Query Values in Convex React
DESCRIPTION: This example illustrates how to use `optimisticallyUpdateValueInPaginatedQuery` within a Convex `useMutation` hook. It allows for optimistically updating values in a list loaded by `usePaginatedQuery` by applying a transformation function to each element across all loaded pages, ensuring immediate UI feedback.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_505

LANGUAGE: TypeScript
CODE:
```
const myMutation = useMutation(api.myModule.myMutation)
.withOptimisticUpdate((localStore, mutationArg) => {

  // Optimistically update the document with ID `mutationArg`
  // to have an additional property.

  optimisticallyUpdateValueInPaginatedQuery(
    localStore,
    api.myModule.paginatedQuery,
    {},
    currentValue => {
      if (mutationArg === currentValue._id) {
        return {
          ...currentValue,
          "newProperty": "newValue"
        };
      }
      return currentValue;
    }
  );

});
```

----------------------------------------

TITLE: Calling Internal Mutation from Convex Action (TypeScript)
DESCRIPTION: This snippet demonstrates how a public Convex action (`upgrade`) securely calls an internal mutation (`plans.markPlanAsProfessional`). It highlights the use of `ctx.runMutation` with the `internal` API to prevent direct external access to sensitive operations, ensuring that the internal mutation is only triggered after a successful external process (e.g., payment).
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_541

LANGUAGE: TypeScript
CODE:
```
import { action } from "./_generated/server";
import { internal } from "./_generated/api";
import { v } from "convex/values";

export const upgrade = action({
  args: {
    planId: v.id("plans"),
  },
  handler: async (ctx, args) => {
    // Call out to payment provider (e.g. Stripe) to charge customer
    const response = await fetch("https://...");
    if (response.ok) {
      // Mark the plan as "professional" in the Convex DB
      await ctx.runMutation(internal.plans.markPlanAsProfessional, {
        planId: args.planId,
      });
    }
  },
});

```

----------------------------------------

TITLE: Calling Internal Function from Public Action (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how a public action can call an internal mutation using the `runMutation` context method and the generated `internal` API object. This pattern ensures that the internal logic is only triggered through a controlled public entry point.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/internal-functions.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { action } from "./_generated/server";
import { internal } from "./_generated/api";
import { v } from "convex/values";

export const upgradeUserPlan = action({
  args: {
    userId: v.id("users"),
    planId: v.id("plans") // Assuming planId is passed or derived
  },
  handler: async ({ runMutation }, { userId, planId }) => {
    // Perform checks or logic before calling internal function
    console.log(`Upgrading user ${userId} to professional plan ${planId}`);

    // Call the internal mutation
    await runMutation(internal.plans.markPlanAsProfessional, { userId, planId });

    return { success: true };
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use the `myMutationFunction` Convex mutation within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: a 'fire and forget' approach and an approach that handles the asynchronous result using a Promise, logging the outcome.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines `myMutationFunction`, a Convex mutation function. It validates string arguments and implements a handler that inserts a new document into the 'messages' collection in the database. It demonstrates how to perform write operations and optionally return the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new message document into the 'messages' table. It demonstrates writing data to the database and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/expo/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators and a handler that performs a database write operation, specifically inserting a new document into the 'messages' table using `ctx.db.insert`. Mutation functions are designed for modifying data and can optionally return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that performs a database write operation by inserting a new document into the 'messages' table. Mutation functions can modify data and optionally return a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/demo/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Executing Convex Query Function in Next.js (TypeScript)
DESCRIPTION: This function executes a Convex query function, returning a promise of its result. It takes a `FunctionReference` to the public query and optional arguments. Useful for server-side data fetching in Next.js.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_366

LANGUAGE: TypeScript
CODE:
```
▸ fetchQuery < Query >( query, ...args): Promise < FunctionReturnType < Query >>
```

----------------------------------------

TITLE: Configuring ConvexProviderWithClerk with Environment Variables (JavaScript)
DESCRIPTION: Configures the Convex and Clerk providers using environment variables, suitable for frameworks like Next.js. Initializes the Convex client and wraps the App component with authentication context.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { ConvexProviderWithClerk } from 'convex/react-clerk';
import { ConvexReactClient } from 'convex/react';
import { ClerkProvider, useAuth } from '@clerk/clerk-react';

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ClerkProvider publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHable_KEY}>
      <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
        <App />
      </ConvexProviderWithClerk>
    </ClerkProvider>
  </React.StrictMode>,
);
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `useQuery` hook in a React component to call the previously defined `myQueryFunction`. It passes required arguments (`first` and `second`) to the query, and the `data` variable will hold the result returned by the Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments using `v.string()` and implements a handler to insert a new document into the 'messages' table using `ctx.db.insert()`. Mutations can modify the database and optionally return a value, such as the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/relational-data-modeling/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to consume the `myQueryFunction` in a React component using the `useQuery` hook. It passes the required arguments `first` and `second` to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, then demonstrates inserting a new document into the database using `ctx.db.insert`. The mutation can optionally return a value, such as the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new document into the 'messages' collection. It demonstrates database write operations and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines `myMutationFunction`, a Convex mutation function. It validates `first` and `second` as strings, inserts a new 'message' document into the 'messages' table using `ctx.db.insert`, and returns the newly created document. Mutation functions are used for writing and modifying data in the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Extending ConvexClient.mutation() with Options (JavaScript/TypeScript)
DESCRIPTION: The `ConvexClient.mutation()` method now accepts an optional third argument, `options`, which can be used to provide an optimistic update handler. This allows for immediate UI feedback before the server response is received. A warning is logged if the optimistic update handler returns a promise, as it should be synchronous.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex/CHANGELOG.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
client.mutation("myMutation", { arg1: "value" }, {
  optimisticUpdate: (localStore, args) => {
    // Synchronously update local store based on args
    // e.g., localStore.set("myTable", localStore.generateId(), { ...args.newItem });
  }
});
```

----------------------------------------

TITLE: Convex Query with Validated Arguments in TypeScript
DESCRIPTION: This snippet illustrates how to declare and validate arguments for a Convex query using `v` validators from `convex/values`. The `sum` query explicitly defines `a` and `b` as numbers, ensuring type safety and automatic validation before the handler executes. This is the recommended approach for robust argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_357

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const sum = query({
  args: { a: v.number(), b: v.number() },
  handler: (_, args) => {
    return args.a + args.b;
  },
});
```

----------------------------------------

TITLE: Using Convex useQuery Hook in React (TSX)
DESCRIPTION: This snippet updates the React frontend component (`src/App.tsx`) to use the `useQuery` hook provided by `convex/react`. It calls the backend `api.chat.getMessages` query, automatically subscribing the component to data changes. The fetched messages are stored in the `messages` variable, and the component will automatically re-render whenever the data updates.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/tutorial/index.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
// highlight-next-line
// Update your convex/react import like this:
// highlight-next-line
import { useQuery, useMutation } from "convex/react";

//...

export default function App() {
  // highlight-next-line
  // Replace the `const messages = ...` line with the following
  // highlight-next-line
  const messages = useQuery(api.chat.getMessages);

  //...
}
```

----------------------------------------

TITLE: Querying Messages for Current User in Convex (TypeScript)
DESCRIPTION: This Convex query, `getForCurrentUser`, retrieves messages associated with the currently authenticated user. It first verifies the user's identity; if unauthenticated, it throws an error. Messages are then filtered from the `messages` table where the `author` field matches the authenticated user's email.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_343

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const getForCurrentUser = query({
  args: {},
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (identity === null) {
      throw new Error("Not authenticated");
    }
    return await ctx.db
      .query("messages")
      .filter((q) => q.eq(q.field("author"), identity.email))
      .collect();
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the previously defined `myQueryFunction`. It passes required arguments (`first` and `second`) to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/snippets/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling a Convex Mutation Function from React
DESCRIPTION: This snippet demonstrates how to call the `myMutationFunction` from a React component using Convex's `useMutation` hook. It shows two ways to invoke the mutation: a 'fire and forget' approach and handling the returned promise to process the result, illustrating client-side interaction with Convex mutations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke the `myMutationFunction` from a React component using the `useMutation` hook. It shows two ways to use mutations: 'fire and forget' for immediate execution, and using a `.then()` callback to process the result once the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call `myMutationFunction`. It shows two ways to invoke the mutation: a 'fire and forget' approach and handling the asynchronous result using a Promise, demonstrating how to pass arguments to the mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use the `myMutationFunction` within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: 'fire and forget' and using a promise to handle the result once the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/nextjs-15-app/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` from Convex within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: 'fire and forget' for immediate execution, and handling the promise result for actions after completion. This is used for performing write operations on the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: Defines a Convex query function `getAllOpenTasks` in TypeScript. This function retrieves all documents from the 'tasks' table where the 'completed' field is false, utilizing a database index for efficient querying.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/understanding/index.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export const getAllOpenTasks = query({
  args: {},
  handler: async (ctx, args) => {
    // Query the database to get all items that are not completed
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("by_completed", (q) => q.eq("completed", false))
      .collect();
    return tasks;
  },
});
```

----------------------------------------

TITLE: Limiting Results and Denormalizing Counts in Convex (TypeScript)
DESCRIPTION: This example illustrates strategies for avoiding full collection of large datasets when only a count or a limited number of results are needed. It shows how to use `.take()` to retrieve a subset of documents for display (e.g., '99+') and how to denormalize counts into a separate table for efficient retrieval, rather than collecting all documents to get a total count.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_386

LANGUAGE: TypeScript
CODE:
```
// ❌ -- potentially unbounded
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .collect();
const numberOfWatchedMovies = watchedMovies.length;

// ✅ -- Show "99+" instead of needing to load all documents
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .take(100);
const numberOfWatchedMovies =
  watchedMovies.length === 100 ? "99+" : watchedMovies.length.toString();

// ✅ -- Denormalize the number of watched movies in a separate table
const watchedMoviesCount = await ctx.db
  .query("watchedMoviesCount")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .unique();
```

----------------------------------------

TITLE: Patching Document Fields in Convex with db.patch (TypeScript)
DESCRIPTION: This mutation demonstrates how to use ctx.db.patch to update an existing document in Convex. It shows adding new fields, overwriting existing ones, and removing fields by setting their value to undefined. The id argument specifies the document to be updated.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_492

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const updateTask = mutation({
  args: { id: v.id("tasks") },
  handler: async (ctx, args) => {
    const { id } = args;
    console.log(await ctx.db.get(id));
    // { text: "foo", status: { done: true }, _id: ... }

    // Add `tag` and overwrite `status`:
    await ctx.db.patch(id, { tag: "bar", status: { archived: true } });
    console.log(await ctx.db.get(id));
    // { text: "foo", tag: "bar", status: { archived: true }, _id: ... }

    // Unset `tag` by setting it to `undefined`
    await ctx.db.patch(id, { tag: undefined });
    console.log(await ctx.db.get(id));
    // { text: "foo", status: { archived: true }, _id: ... }
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` within a React component using the `useMutation` hook. It provides two common patterns for invoking the mutation: a 'fire and forget' approach and handling the asynchronous result using a `.then()` callback.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/search/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React with useMutation
DESCRIPTION: This snippet illustrates how to invoke a Convex mutation function (`myMutationFunction`) from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' call and handling the asynchronous result of the mutation using a Promise. Mutations are typically triggered by user actions like button presses.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` within a React component via the `useMutation` hook. It shows two common patterns: a 'fire and forget' invocation and handling the asynchronous result of the mutation using a `.then()` callback.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation in React with useMutation
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call `myMutationFunction`. It shows two ways to invoke the mutation: a 'fire and forget' approach and an approach that handles the asynchronous result using a Promise, demonstrating how to interact with Convex mutations from the client-side.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Exposing a database query in Convex (JavaScript)
DESCRIPTION: This JavaScript file defines a Convex query function named `get` within the `tasks` module. When exported, it creates an API endpoint `tasks:get` that can be called from the client to fetch data from the `tasks` table, providing a server-side interface for data access.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/rust.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This example illustrates how to use the `useMutation` hook in a React component to invoke `myMutationFunction`. It shows two common patterns: a 'fire and forget' approach where the mutation is called without waiting for a result, and an approach where the promise returned by the mutation is handled to process the result upon completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to invoke a Convex mutation function (`myMutationFunction`) from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' invocation and an invocation that processes the returned result using a Promise.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cjs-typescript/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Convex Function Definition Syntaxes - TypeScript
DESCRIPTION: This snippet illustrates various syntaxes for defining Convex functions (queries, mutations, or actions). It covers the concise arrow function form, the object-based handler form, and forms that include argument validation (`args`) and return value validation (`returns`) using the `v` (validator) utility. These examples highlight the flexibility in structuring Convex backend logic.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_176

LANGUAGE: TypeScript
CODE:
```
query(async (ctx, args) => {...})
```

LANGUAGE: TypeScript
CODE:
```
query({ handler: async (ctx, args) => {...} })
```

LANGUAGE: TypeScript
CODE:
```
query({ args: { a: v.string }, handler: async (ctx, args) => {...} } })
```

LANGUAGE: TypeScript
CODE:
```
query({ args: { a: v.string }, returns: v.string(), handler: async (ctx, args) => {...} } })
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, then inserts a new document into the 'messages' table. It demonstrates writing data to the database and optionally returning a value.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/3-ai/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and implements a handler that inserts a new document into the 'messages' table using `ctx.db.insert`. It demonstrates how mutations can modify the database and optionally return a value, such as the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Consuming Preloaded Data in Next.js Client Component
DESCRIPTION: This code illustrates how a Next.js Client Component receives and consumes data that has been preloaded by a Server Component. It uses the `usePreloadedQuery` hook to access the preloaded data, which can then be rendered within the client-side application.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_365

LANGUAGE: TypeScript
CODE:
```
import { Preloaded, usePreloadedQuery } from "convex/nextjs";
import { api } from "@/convex/_generated/api";

export function ClientComponent(props: {
  preloaded: Preloaded<typeof api.foo.baz>;
}) {
  const data = await usePreloadedQuery(props.preloaded);
  // render `data`...
}
```

----------------------------------------

TITLE: Creating Auth Configuration (TypeScript)
DESCRIPTION: Creates the server-side configuration file for validating Auth0 access tokens in Convex. Requires your Auth0 domain and application ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/auth0.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default {
  providers: [
    {
      domain: "your-domain.us.auth0.com",
      applicationID: "yourclientid"
    },
  ]
};
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes specific values for the `first` and `second` arguments, retrieving data from the Convex backend. This illustrates client-side consumption of a defined query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/system-udfs/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in the Convex backend. It passes the required `first` and `second` arguments to the query, and the `data` variable will hold the result returned by the Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes the required `first` (10) and `second` ('hello') arguments to the Convex function, retrieving the returned data for client-side use.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It shows how to pass arguments to the query and retrieve the returned data, integrating backend queries into the frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Rendering Components Based on User Authentication State in React (TypeScript)
DESCRIPTION: This React component, `App`, utilizes the `useCurrentUser` hook to conditionally render different UI elements based on the user's authentication and loading state. It displays a 'Loading...' message while authentication is in progress or the user document is being fetched, `Content` if the user is authenticated and stored, and `LoginPage` otherwise. It requires the `useCurrentUser` hook as a dependency.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_490

LANGUAGE: TypeScript
CODE:
```
import { useCurrentUser } from "./useCurrentUser";

export default function App() {
  const { isLoading, isAuthenticated } = useCurrentUser();
  return (
    <main>
      {isLoading ? (
        <>Loading...</>
      ) : isAuthenticated ? (
        <Content />
      ) : (
        <LoginPage />
      )}
    </main>
  );
}
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table 'tablename' using `ctx.db.query`. It demonstrates accessing client-provided arguments and returning processed data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/scheduling/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table, logs client-provided arguments, and returns the collected documents. It demonstrates basic data retrieval and argument handling in a Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a 'tablename' collection in the database using `ctx.db.query`. The function demonstrates accessing client-provided arguments and returning processed data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/zod-validation-ts/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that performs write operations, such as inserting a new document into the database. Mutation functions can modify data and optionally return a result.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Calling Convex Mutation from Next.js Route Handler (TS/JS)
DESCRIPTION: This example shows how to use `fetchMutation` within a Next.js Route Handler to perform a Convex mutation. Route Handlers provide a way to create custom API endpoints, enabling server-side data operations in response to HTTP requests. It requires `convex/nextjs` and `next/server`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// app/api/route.ts
import { fetchMutation } from "convex/nextjs";
import { api } from "../../convex/_generated/api";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  const { name } = await request.json();
  await fetchMutation(api.items.createItem, { name });
  return NextResponse.json({ success: true });
}
```

LANGUAGE: JavaScript
CODE:
```
// app/api/route.ts
import { fetchMutation } from "convex/nextjs";
import { api } from "../../convex/_generated/api";
import { NextResponse } from "next/server";

export async function POST(request) {
  const { name } = await request.json();
  await fetchMutation(api.items.createItem, { name });
  return NextResponse.json({ success: true });
}
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to call the `myMutationFunction` from a React component using the `useMutation` hook. It shows two patterns: a 'fire and forget' invocation and an invocation that processes the returned result using a promise.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using FunctionReference with useQuery Hook in React (TypeScript)
DESCRIPTION: This snippet illustrates how a FunctionReference can be passed to the `useQuery` hook in a React component to invoke a Convex query function. The `api.myModule.myFunction` reference is used to fetch data, and the result is stored in the `result` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_144

LANGUAGE: TypeScript
CODE:
```
const result = useQuery(api.myModule.myFunction);
```

----------------------------------------

TITLE: Handling Convex Mutation Errors (Swift)
DESCRIPTION: Shows how to use a `do-catch` block in Swift to handle potential errors when calling a Convex mutation. Specifically catches `ClientError.ConvexError`, decodes the error data, and updates UI state variables (`errorMessage`, `colorNotAdded`). Requires error handling setup and a `ConvexClient`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#_snippet_4

LANGUAGE: Swift
CODE:
```
do {
  try await convex.mutation("colors:put", with: ["color": newColor])
} catch ClientError.ConvexError(let data) {
  errorMessage = try! JSONDecoder().decode(String.self, from: Data(data.utf8))
  colorNotAdded = true
}
```

----------------------------------------

TITLE: Call Convex Functions in Tests (TypeScript)
DESCRIPTION: Illustrates how to call public (`api`) and internal (`internal`) Convex functions of different types (`query`, `mutation`, `action`) using the `t` object returned by `convexTest`. It shows passing arguments to the functions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/testing/convex-test.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { convexTest } from "convex-test";
import { test } from "vitest";
import { api, internal } from "./_generated/api";

test("functions", async () => {
  const t = convexTest();
  const x = await t.query(api.myFunctions.myQuery, { a: 1, b: 2 });
  const y = await t.query(internal.myFunctions.internalQuery, { a: 1, b: 2 });
  const z = await t.mutation(api.myFunctions.mutateSomething, { a: 1, b: 2 });
  const w = await t.mutation(internal.myFunctions.mutateSomething, { a: 1 });
  const u = await t.action(api.myFunctions.doSomething, { a: 1, b: 2 });
  const v = await t.action(internal.myFunctions.internalAction, { a: 1, b: 2 });
});
```

----------------------------------------

TITLE: Defining Union Types for Fields in Convex Schemas (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a field that can hold one of multiple types using `v.union()`. The `stringOrNumber` field can accept either a string or a number, providing flexibility in document structure while maintaining type validation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/schemas.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
defineTable({
  stringOrNumber: v.union(v.string(), v.number()),
});
```

----------------------------------------

TITLE: Implementing Complex Optimistic Update for Chat Message (TS/JS)
DESCRIPTION: This snippet shows a more complex optimistic update for sending a chat message. It optimistically adds a temporary message object to the cached result of the `api.messages.list` query, using a temporary `Id` and client-side timestamp. It's crucial to create a *new* array for the updated message list to avoid corrupting the client's state.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/optimistic-updates.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { useMutation, useQuery } from "convex/react";
import { api } from "./_generated/api";
import { Id } from "./_generated/dataModel";
import { OptimisticLocalStore } from "convex/browser";

export default function MessageSender({ channelId }: { channelId: Id<"channels"> }) {
  const messages = useQuery(api.messages.list, { channelId });
  const send = useMutation(api.messages.send).withOptimisticUpdate(
    (localStore: OptimisticLocalStore, { channelId, body }: { channelId: Id<"channels">, body: string }) => {
      const existingMessages = localStore.getQuery(api.messages.list, { channelId });
      if (existingMessages !== undefined) {
        const newMessage = {
          _id: new Id("messages", crypto.randomUUID()), // Temporary ID
          _creationTime: Date.now(), // Client time
          channelId,
          body,
          author: "You (optimistic)", // Indicate it's optimistic
        };
        // CRITICAL: Create a new array!
        localStore.setQuery(api.messages.list, { channelId }, [...existingMessages, newMessage]);
      }
    }
  );

  const handleSend = () => {
    send({ channelId, body: "Hello, world!" });
  };

  return (
    <div>
      {messages?.map(msg => <div key={msg._id}>{msg.author}: {msg.body}</div>)}
      <button onClick={handleSend}>Send Message</button>
    </div>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
import { useMutation, useQuery } from "convex/react";
import { api } from "./_generated/api";
import { Id } from "./_generated/dataModel";

export default function MessageSender({ channelId }) {
  const messages = useQuery(api.messages.list, { channelId });
  const send = useMutation(api.messages.send).withOptimisticUpdate(
    (localStore, { channelId, body }) => {
      const existingMessages = localStore.getQuery(api.messages.list, { channelId });
      if (existingMessages !== undefined) {
        const newMessage = {
          _id: new Id("messages", crypto.randomUUID()), // Temporary ID
          _creationTime: Date.now(), // Client time
          channelId,
          body,
          author: "You (optimistic)", // Indicate it's optimistic
        };
        // CRITICAL: Create a new array!
        localStore.setQuery(api.messages.list, { channelId }, [...existingMessages, newMessage]);
      }
    }
  );

  const handleSend = () => {
    send({ channelId, body: "Hello, world!" });
  };

  return (
    <div>
      {messages?.map(msg => <div key={msg._id}>{msg.author}: {msg.body}</div>)}
      <button onClick={handleSend}>Send Message</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators for `first` and `second` (both strings) and demonstrates inserting a new document into the 'messages' table using `ctx.db.insert`. The mutation can also read from the database and optionally returns the inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Handling Convex Mutation Response with Async/Await (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle the response and errors from a Convex mutation using `async/await`. It calls a backend function `doSomething`, awaits its result, and catches any potential errors, logging them to the console. This approach provides clear sequential error handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_318

LANGUAGE: TypeScript
CODE:
```
export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  const onClick = () => {
    async function callBackend() {
      try {
        const result = await doSomething();
      } catch (error) {
        console.error(error);
      }
      console.log(result);
    }
    void callBackend();
  };
  return <button onClick={onClick}>Click me</button>;
}
```

----------------------------------------

TITLE: Updating Team (Secure ctx.auth Access Control) - Convex TypeScript
DESCRIPTION: This Convex mutation demonstrates a secure way to update a team by utilizing `ctx.auth.getUserIdentity()` for access control. It ensures that only authenticated users who are also authorized (e.g., team members) can perform the update, preventing spoofing and unauthorized modifications.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_78

LANGUAGE: TypeScript
CODE:
```
export const updateTeam = mutation({
  args: {
    id: v.id("teams"),
    update: v.object({
      name: v.optional(v.string()),
      owner: v.optional(v.id("users")),
    }),
  },
  handler: async (ctx, { id, update }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    const isTeamMember = /* check if user is a member of the team */
    if (!isTeamMember) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, update);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex mutation function named `myMutationFunction`. It validates `first` and `second` arguments as strings and demonstrates inserting a new document into the 'messages' collection in the Convex database. The function returns the newly created document by its ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Passing Arguments to useMutation in React
DESCRIPTION: This snippet shows how to pass arguments to a Convex mutation function when using the `useMutation` hook. The arguments are provided directly to the asynchronous function returned by `useMutation`, allowing dynamic data to be sent to the backend for processing.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_317

LANGUAGE: TypeScript
CODE:
```
export function App() {
  const a = "Hello world";
  const b = 4;
  const doSomething = useMutation(api.functions.doSomething);
  return <button onClick={() => doSomething({ a, b })}>Click me</button>;
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines `myMutationFunction`, a Convex mutation function responsible for writing data to the database. It validates arguments, demonstrates inserting a new document into the 'messages' table using `ctx.db.insert()`, and optionally returns the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validators for `first` and `second` (both strings) and a handler that inserts a new document into the 'messages' table. It demonstrates database write operations and the ability to return a value from a mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a 'tablename' collection in the database, logs arguments, and returns the retrieved documents. It demonstrates how to interact with the Convex database for reading operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Expose Convex Database Query (JavaScript)
DESCRIPTION: Define and export a Convex query function in JavaScript to fetch all documents from the 'tasks' table.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/quickstart-react-cra.mdx#_snippet_5

LANGUAGE: js
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Exposing a Database Query in Convex
DESCRIPTION: This TypeScript code defines a Convex query function named `get` within `convex/tasks.ts`. When called, it retrieves all documents from the `tasks` table in the Convex database. This function becomes accessible as an API endpoint, `api.tasks.get`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_277

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  }
});
```

----------------------------------------

TITLE: Debugging Convex Backend User Identity
DESCRIPTION: This JavaScript snippet is used for debugging authentication on the Convex backend. By adding `console.log("server identity", await ctx.auth.getUserIdentity());` to a query, mutation, or action, developers can verify if the Convex backend is successfully receiving and processing an authentication token from the client. A `null` output indicates a client-side or deployment misconfiguration.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_31

LANGUAGE: JavaScript
CODE:
```
console.log("server identity", await ctx.auth.getUserIdentity());
```

----------------------------------------

TITLE: Using Convex Authentication Helpers in React (JavaScript)
DESCRIPTION: This code illustrates the use of `Authenticated`, `Unauthenticated`, and `AuthLoading` components from `convex/react` to conditionally render UI based on the user's authentication state. These components help manage loading and authenticated/unauthenticated views.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_497

LANGUAGE: JavaScript
CODE:
```
import { Authenticated, Unauthenticated, AuthLoading } from "convex/react";

<Authenticated>
  Logged in
</Authenticated>
<Unauthenticated>
  Logged out
</Unauthenticated>
<AuthLoading>
  Still loading
</AuthLoading>
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This example demonstrates how to use the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It passes specific values for the `first` and `second` arguments, retrieving the data returned by the backend query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It passes specific values for the `first` and `second` arguments, allowing the component to fetch and reactively update with data returned by the Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/actions/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Querying All Documents - Convex `db.query` - TypeScript/JavaScript
DESCRIPTION: This snippet illustrates how to initiate a document query in Convex by selecting a table using the `db.query` method. It defines a query function that retrieves all documents from the 'tasks' table. The `collect()` method is used to fetch all results from the query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const listAllDocuments = query({
  handler: async (ctx) => {
    // Document queries always begin by choosing the table to query
    return await ctx.db.query("tasks").collect();
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { query } from "./_generated/server";

export const listAllDocuments = query({
  handler: async (ctx) => {
    // Document queries always begin by choosing the table to query
    return await ctx.db.query("tasks").collect();
  }
});
```

----------------------------------------

TITLE: Inserting Document and Getting ID (TypeScript)
DESCRIPTION: Demonstrates inserting a new document into the "users" table and capturing the returned document ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/document-ids.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
const userId = await ctx.db.insert("users", { name: "Michael Jordan" });
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction` using TypeScript. It specifies argument validators for `first` (number) and `second` (string), and demonstrates how to read data from a Convex database table (`tablename`) and access client-provided arguments within the handler. The function returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines `myMutationFunction`, a Convex mutation function capable of modifying the database. It validates arguments `first` and `second` as strings, then demonstrates inserting a new document into the 'messages' table and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/retention-tester/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Correct: Scheduling Internal Convex Mutation with `internal` and Helper
DESCRIPTION: This example illustrates the recommended approach for scheduling functions and sharing logic. It introduces `sendMessageHelper` for shared database logic, a public `sendMessage` mutation with access control, and an `internalMutation` (`sendInternalMessage`) for internal calls. The `crons.ts` file correctly schedules the `internal.messages.sendInternalMessage`, ensuring that sensitive operations are not exposed publicly when called internally.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_395

LANGUAGE: TypeScript
CODE:
```
// ✅ Using `internal`
import { MutationCtx } from './_generated/server';
async function sendMessageHelper(
  ctx: MutationCtx,
  args: { body: string; author: string },
) {
  // add message to the database
}

export const sendMessage = mutation({
  args: {
    body: v.string(),
  },
  handler: async (ctx, { body }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    await sendMessageHelper(ctx, { body, author: user.name ?? "Anonymous" });
  },
});

export const sendInternalMessage = internalMutation({
  args: {
    body: v.string(),
    // don't need to worry about `author` being spoofed since this is an internal function
    author: v.string(),
  },
  handler: async (ctx, { body, author }) => {
    await sendMessageHelper(ctx, { body, author });
  },
});

// crons.ts
crons.daily(
  "send daily reminder",
  { hourUTC: 17, minuteUTC: 30 },
  internal.messages.sendInternalMessage,
  { author: "System", body: "Share your daily update!" },
);
```

----------------------------------------

TITLE: Refactored Conversation Logic in Convex Model
DESCRIPTION: This module encapsulates core conversation-related logic, including access control, message listing, and summary management. Functions like `ensureHasAccess`, `listMessages`, `addSummary`, and `generateSummary` are designed for internal use, separating business logic from API endpoints.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_86

LANGUAGE: TypeScript
CODE:
```
import { QueryCtx, MutationCtx } from '../_generated/server';
import * as Users from './users';

export async function ensureHasAccess(
  ctx: QueryCtx,
  { conversationId }: { conversationId: Id<"conversations"> },
) {
  const user = await Users.getCurrentUser(ctx);
  const conversation = await ctx.db.get(conversationId);
  if (conversation === null || !conversation.members.includes(user._id)) {
    throw new Error("Unauthorized");
  }
  return conversation;
}

export async function listMessages(
  ctx: QueryCtx,
  { conversationId }: { conversationId: Id<"conversations"> },
) {
  await ensureHasAccess(ctx, { conversationId });
  const messages = /* query ctx.db to load the messages */
  return messages;
}

export async function addSummary(
  ctx: MutationCtx,
  {
    conversationId,
    summary,
  }: { conversationId: Id<"conversations">; summary: string },
) {
  await ensureHasAccess(ctx, { conversationId });
  await ctx.db.patch(conversationId, { summary });
}

export async function generateSummary(
  messages: Doc<"messages">[],
  conversationId: Id<"conversations">,
) {
  const summary = /* call some external service to summarize the conversation */
  return summary;
}
```

----------------------------------------

TITLE: Using Id Type in Convex (TypeScript/JavaScript)
DESCRIPTION: Demonstrates the usage of the `Id` type, which represents a document's unique identifier in Convex. It corresponds to a `string` in TypeScript/JavaScript and is validated using `v.id(tableName)`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_106

LANGUAGE: TypeScript
CODE:
```
doc._id
```

LANGUAGE: TypeScript
CODE:
```
v.id(tableName)
```

----------------------------------------

TITLE: Composing Backend Middleware with `mutation` in Convex
DESCRIPTION: This example demonstrates a pattern for composing multiple backend middleware wrappers (`withSession`, `withUser`, `withCustomerCtx`) around a Convex `mutation`. It shows how to define input validators, add custom context, and access wrapped context and arguments within the handler function, illustrating a powerful composition approach.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
const myMutWrapper = withSession(withUser(withCustomerCtx(mutation)))
export myMut = myMutWrapper({
  input: { a: v.string() },
  openAPIexample: "Run the function like this.",
  customContext: { foo: 123 },
  handler: ({ user, session, foo }, { a, addedByAWrapper }) => { ... }
}]
```

----------------------------------------

TITLE: Taking N Results from Convex Query (TypeScript)
DESCRIPTION: This snippet shows how to retrieve a limited number of documents from a Convex table. It queries the "users" table and uses the `.take(5)` method to select only the first 5 results that match the query, useful for pagination or limiting data fetched.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
const users = await ctx.db.query("users").take(5);
```

----------------------------------------

TITLE: Define Get Tasks Query Function (convex/tasks.ts)
DESCRIPTION: Creates a new backend query function in `convex/tasks.ts` that retrieves all documents from the `tasks` table. Exporting it makes it available to the frontend via `api.tasks.get`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/tanstack-start.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Creating a New Agent Thread in a Convex Action
DESCRIPTION: This example shows how to use the defined 'supportAgent' within a Convex action. It illustrates creating a new conversation thread and generating an initial text response based on a user prompt, returning the thread ID and the agent's reply.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/agents.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
export const createThread = action({
  args: { prompt: v.string() },
  handler: async (ctx, { prompt }) => {
    const { threadId, thread } = await supportAgent.createThread(ctx);
    const result = await thread.generateText({ prompt });
    return { threadId, text: result.text };
  }
});
```

----------------------------------------

TITLE: Exposing a Database Query in Convex Backend
DESCRIPTION: This TypeScript snippet defines a Convex query function named `get` within `tasks.ts`. This function retrieves all documents from the `tasks` table in the Convex database, making the data accessible to the client application.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_210

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validation using `convex/values` and implements a handler that reads data from a database table 'tablename' using `ctx.db.query`. It demonstrates how to access client-provided arguments and return processed data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript-old-syntax/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Structuring SwiftUI View and ViewModel with Convex
DESCRIPTION: This Swift code snippet demonstrates how to structure a SwiftUI application using a ViewModel that conforms to ObservableObject to fetch data from a Convex backend. The ViewModel subscribes to a Convex query ('colors:get') and publishes the results to a @Published property ('colors'). The ContentView then observes this ViewModel using @StateObject and displays the data in a List. This pattern separates data fetching logic from the View.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/swift.md#_snippet_6

LANGUAGE: swift
CODE:
```
import SwiftUI

class ViewModel: ObservableObject {
  @Published var colors: [String] = []

  init() {
    convex.subscribe(to: "colors:get")
      .replaceError(with: [])
      .receive(on: DispatchQueue.main)
      .assign(to: &colors)
  }
}

struct ContentView: View {
  @StateObject var viewModel = ViewModel()

  var body: some View {
    List {
      ForEach(viewModel.colors, id: \.self) { color in
        Text(color)
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, demonstrates inserting a new document into the 'messages' table using `ctx.db.insert`, and optionally returns the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Fetching Data with useQuery Hook in React
DESCRIPTION: This example shows how to fetch data from a Convex backend using the `useQuery` React hook. It imports `useQuery` from `convex/react` and the generated `api` object, then calls a Convex query (`api.functions.myQuery`) and displays the result or a loading message.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_311

LANGUAGE: TypeScript
CODE:
```
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const data = useQuery(api.functions.myQuery);
  return data ?? "Loading...";
}
```

----------------------------------------

TITLE: Calling Convex Query Function in React with useQuery
DESCRIPTION: This snippet shows how to use the useQuery hook within a React component to call the myQueryFunction defined in the backend. It passes an object containing the required arguments (first and second) to the hook. The data variable will hold the result returned by the query function, automatically updating as the data changes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines `myMutationFunction`, a Convex mutation function. It specifies argument validators for `first` (string) and `second` (string), inserts a new document into the 'messages' collection, and optionally returns the newly created document. Mutation functions can modify the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Generating Convex Auth Token with Clerk (TypeScript)
DESCRIPTION: This function demonstrates how to obtain a JWT token from Clerk for use with Convex. It leverages Clerk's `auth()` utility to get the current session's token, specifically templated for Convex, which can then be passed to Convex `fetch` or `preload` functions for authenticated requests.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { auth } from "@clerk/nextjs/server";

export async function getAuthToken() {
  return (await (await auth()).getToken({ template: "convex" })) ?? undefined;
}
```

----------------------------------------

TITLE: Accessing User Identity in Convex Mutation (Authentication Check)
DESCRIPTION: This code snippet shows how to access the authenticated user's identity within a Convex mutation function using `ctx.auth.getUserIdentity()`. It includes a crucial check to ensure the user is authenticated, throwing an error if `identity` is null, which is essential for protecting backend operations from unauthenticated access.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const myMutation = mutation({
  args: {
    // ...
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (identity === null) {
      throw new Error("Unauthenticated call to mutation");
    }
    //...
  },
});
```

----------------------------------------

TITLE: Optimizing Convex Database Filtering in TypeScript
DESCRIPTION: This snippet demonstrates different approaches to filtering data in Convex. It highlights the inefficiency of using `.filter` directly on a query for large datasets and provides optimized alternatives: using `.withIndex` for server-side filtering or performing client-side filtering after collecting a small, manageable dataset.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_383

LANGUAGE: TypeScript
CODE:
```
// ❌
const tomsMessages = ctx.db
  .query("messages")
  .filter((q) => q.eq(q.field("author"), "Tom"))
  .collect();

// ✅
// Option 1: Use an index
const tomsMessages = await ctx.db
  .query("messages")
  .withIndex("by_author", (q) => q.eq("author", "Tom"))
  .collect();

// Option 2: Filter in code
const allMessages = await ctx.db.query("messages").collect();
const tomsMessages = allMessages.filter((m) => m.author === "Tom");
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction` that reads data from the database. It specifies argument validators for `first` (number) and `second` (string) and demonstrates how to access arguments and perform database queries using `ctx.db.query`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the retrieved documents. Query functions are used for reading data and can perform arbitrary JavaScript logic on the results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two common patterns: a 'fire and forget' call and a call that processes the returned result using a promise, demonstrating how to pass arguments to the mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two ways to call the mutation: a 'fire and forget' approach and one that handles the promise resolution to log the result, demonstrating client-side interaction with a Convex mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/args-validation/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React with useMutation
DESCRIPTION: This example shows how to use the `myMutationFunction` from Convex within a React component using the `useMutation` hook. It demonstrates two ways to invoke the mutation: a 'fire and forget' approach and an approach that handles the returned promise to process the result once the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/basic/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Use usePaginatedQuery with Arguments (React, TS/JS)
DESCRIPTION: This snippet shows how to use the `usePaginatedQuery` hook when the target paginated query function requires additional arguments. The arguments are passed as the second parameter to the hook, excluding the `paginationOpts` which is managed internally.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/pagination.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { usePaginatedQuery } from "convex/react";
import { api } from "../convex/_generated/api";
import { useState } from "react";

function ListingWithArgument() {
  const [author, setAuthor] = useState("Alice");

  const { results, status, loadMore } = usePaginatedQuery(
    api.messages.listWithExtraArg,
    { author: author }, // Pass the argument
    { initialNumItems: 10 }
  );

  return (
    <div>
      <h2>Messages by {author}</h2>
      {results.map(msg => (
        <div key={msg._id}>{msg.text}</div>
      ))}
      {status === "CanLoadMore" && (
        <button onClick={() => loadMore(10)}>Load More</button>
      )}
      {status === "LoadingMore" && <div>Loading...</div>}
      {status === "Exhausted" && <div>No more messages</div>}
    </div>
  );
}
```

LANGUAGE: javascript
CODE:
```
import { usePaginatedQuery } from "convex/react";
import { api } from "../convex/_generated/api";
import { useState } from "react";

function ListingWithArgument() {
  const [author, setAuthor] = useState("Alice");

  const { results, status, loadMore } = usePaginatedQuery(
    api.messages.listWithExtraArg,
    { author: author }, // Pass the argument
    { initialNumItems: 10 }
  );

  return (
    <div>
      <h2>Messages by {author}</h2>
      {results.map(msg => (
        <div key={msg._id}>{msg.text}</div>
      ))}
      {status === "CanLoadMore" && (
        <button onClick={() => loadMore(10)}>Load More</button>
      )}
      {status === "LoadingMore" && <div>Loading...</div>}
      {status === "Exhausted" && <div>No more messages</div>}
    </div>
  );
}
```

----------------------------------------

TITLE: Accessing Document ID from Retrieved Document in Convex (JavaScript)
DESCRIPTION: This snippet illustrates how to access the unique document ID from a previously retrieved document. The `_id` field is a system-generated property present on every Convex document, holding its globally unique identifier.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_428

LANGUAGE: JavaScript
CODE:
```
const userId = retrievedUser._id;
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It specifies argument validators and implements a handler that inserts a new document into the 'messages' collection in the database using provided arguments. Mutations can also read data and optionally return a value, demonstrating write operations and data manipulation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Inserting Document and Retrieving ID in Convex (JavaScript)
DESCRIPTION: This snippet demonstrates how to insert a new document into the "users" table in Convex. The `insert` method automatically generates a unique document ID, which is then returned and stored in the `userId` variable. This ID can be used for subsequent operations on the document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_426

LANGUAGE: JavaScript
CODE:
```
const userId = await ctx.db.insert("users", { name: "Michael Jordan" });
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates string arguments and demonstrates how to write data to the database using `ctx.db.insert`. Mutations can also read data and optionally return a value, such as the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Deleting Documents in Convex with db.delete (TypeScript)
DESCRIPTION: This mutation demonstrates how to remove a document from a Convex table using ctx.db.delete. It takes the id of the document as an argument and permanently deletes the corresponding record from the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_494

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const deleteTask = mutation({
  args: { id: v.id("tasks") },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.id);
  }
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to consume the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It passes required arguments (`first` as a number and `second` as a string) to the query, and the returned data will be available in the `data` variable. This is the client-side pattern for fetching data from Convex.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to consume the `myQueryFunction` from a React component using the `useQuery` hook. It passes the required arguments `first` (10) and `second` ('hello') to the query, retrieving the data returned by the server-side function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/nextjs-app-router/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments to the query and stores the returned data for use in the component.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/typescript/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: React Hook for Storing User in Convex (TypeScript)
DESCRIPTION: The `useStoreUserEffect` hook integrates Convex user storage with a React application. It leverages `useConvexAuth` and `@clerk/clerk-react` to determine authentication status and user details. Upon successful authentication, it calls the `api.users.store` mutation to store the user and updates local state with the user's ID, ensuring the user is persisted in the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_480

LANGUAGE: TypeScript
CODE:
```
import { useUser } from "@clerk/clerk-react";
import { useConvexAuth } from "convex/react";
import { useEffect, useState } from "react";
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";
import { Id } from "../convex/_generated/dataModel";

export function useStoreUserEffect() {
  const { isLoading, isAuthenticated } = useConvexAuth();
  const { user } = useUser();
  // When this state is set we know the server
  // has stored the user.
  const [userId, setUserId] = useState<Id<"users"> | null>(null);
  const storeUser = useMutation(api.users.store);
  // Call the `storeUser` mutation function to store
  // the current user in the `users` table and return the `Id` value.
  useEffect(() => {
    // If the user is not logged in don't do anything
    if (!isAuthenticated) {
      return;
    }
    // Store the user in the database.
    // Recall that `storeUser` gets the user information via the `auth`
    // object on the server. You don't need to pass anything manually here.
    async function createUser() {
      const id = await storeUser();
      setUserId(id);
    }
    createUser();
    return () => setUserId(null);
    // Make sure the effect reruns if the user logs in with
    // a different identity
  }, [isAuthenticated, storeUser, user?.id]);
  // Combine the local state with the state from context
  return {
    isLoading: isLoading || (isAuthenticated && userId === null),
    isAuthenticated: isAuthenticated && userId !== null,
  };
}
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that performs database writes, specifically inserting a new document into the 'messages' table. Mutation functions are used for modifying data and can also read from the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that inserts a new document into the 'messages' collection using `ctx.db.insert`. Mutations can modify the database and optionally return a value, as shown by fetching the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/http/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database, logs arguments, and returns the collected documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/python-quickstart/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Optimizing Convex Queries: Using Index for Filtering (TypeScript)
DESCRIPTION: This snippet demonstrates how to efficiently filter data in Convex. The '❌' example shows an inefficient approach where all documents are collected first and then filtered in application code, which can be unbounded and costly. The '✅' example shows the recommended approach using `.withIndex` to filter at the database level before collecting, ensuring only relevant, smaller results are returned.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_71

LANGUAGE: TypeScript
CODE:
```
// ❌ -- potentially unbounded
const allMovies = await ctx.db.query("movies").collect();
const moviesByDirector = allMovies.filter(
  (m) => m.director === "Steven Spielberg",
);

// ✅ -- small number of results, so `collect` is fine
const moviesByDirector = await ctx.db
  .query("movies")
  .withIndex("by_director", (q) => q.eq("director", "Steven Spielberg"))
  .collect();
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the collected documents. It demonstrates how to interact with the Convex database for reading data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes `first` as a number (10) and `second` as a string ('hello') as arguments to the query, retrieving the results into the `data` variable. This shows client-side integration with Convex backend functions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling a Convex Query Function with React useQuery Hook
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes the required `first` and `second` arguments to the query, and the returned data will be available in the `data` variable. This hook automatically handles data fetching and re-fetching.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction` that reads data from the database. It specifies argument validators using `convex/values` and demonstrates how to access database context (`ctx.db`) and client-provided arguments (`args`) to fetch and return documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table 'tablename' and logs the provided arguments. Query functions are used for reading data and can perform arbitrary JavaScript logic before returning results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments to the function and retrieves the returned data, enabling client-side access to backend query results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling Internal Convex Mutation from Action (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to define a Convex action that interacts with an external payment provider and then calls an internal Convex mutation. It uses `runMutation` to update the database, marking a plan as 'professional' based on the `planId` after a successful external API response. This pattern is crucial for secure server-side operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_38

LANGUAGE: JavaScript
CODE:
```
import { action } from "../_generated/server";
import { internal } from "../_generated/api";

export default action(async ({ runMutation }, { planId, ... }) => {
  // Call out to payment provider (e.g. Stripe) to charge customer
  const response = await fetch(...);
  if (response.ok) {
    // Mark the plan as "professional" in the Convex DB
    await runMutation(internal.plans.markPlanAsProfessional, { planId });
  }
});
```

----------------------------------------

TITLE: Adding Argument and Return Validators to Convex Mutation (TypeScript)
DESCRIPTION: This snippet demonstrates how to add argument and return value validation to a Convex `mutation` function. It uses `v.string()` for `body` and `author` arguments and `v.null()` for the return value, ensuring type safety and preventing unexpected data. The function inserts a new message into the 'messages' table.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_40

LANGUAGE: TypeScript
CODE:
```
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const send = mutation({
  args: {
    body: v.string(),
    author: v.string(),
  },
  returns: v.null(),
  handler: async (ctx, args) => {
    const { body, author } = args;
    await ctx.db.insert("messages", { body, author });
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database, logs client-provided arguments, and returns processed documents. It's designed for read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Define Convex Query (TypeScript)
DESCRIPTION: Defines a Convex backend query function `get` in `convex/tasks.ts` that retrieves all documents from the `tasks` table. This function is exposed as `api.tasks.get`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Performing One-Off Queries with useConvex in React
DESCRIPTION: This snippet illustrates how to execute a one-off database query from within a callback function, such as an `onClick` handler. It utilizes the `useConvex()` hook to access the `ConvexReactClient` instance, allowing direct asynchronous calls to backend query functions for tasks like input validation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_315

LANGUAGE: TypeScript
CODE:
```
import { useConvex } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const convex = useConvex();
  return (
    <button
      onClick={async () => {
        console.log(await convex.query(api.functions.myQuery));
      }}
    >
      Check
    </button>
  );
}
```

----------------------------------------

TITLE: Mutations for User Upsert and Deletion (Convex/TS/JS)
DESCRIPTION: Provides example Convex mutations (`upsertFromClerk`, `deleteFromClerk`) designed to be called by the webhook endpoint to handle user creation, updates, and deletions received from Clerk. Includes helper functions for accessing user data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const upsertFromClerk = mutation({
  args: {
    externalId: v.string(),
    name: v.string(),
    imageUrl: v.string(),
  },
  handler: async (ctx, args) => {
    // Find user by externalId
    const user = await ctx.db
      .query("users")
      .withIndex("by_externalId", (q) => q.eq("externalId", args.externalId))
      .unique();

    if (user) {
      // Update existing user
      await ctx.db.patch(user._id, {
        name: args.name,
        imageUrl: args.imageUrl,
      });
      return user._id;
    } else {
      // Create new user
      return await ctx.db.insert("users", {
        externalId: args.externalId,
        name: args.name,
        imageUrl: args.imageUrl,
      });
    }
  },
});

export const deleteFromClerk = mutation({
  args: {
    externalId: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await ctx.db
      .query("users")
      .withIndex("by_externalId", (q) => q.eq("externalId", args.externalId))
      .unique();

    if (user) {
      await ctx.db.delete(user._id);
    }
  },
});

// Helper to get the current user based on auth identity
export const getCurrentUser = query({
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return null;
    }
    return await ctx.db
      .query("users")
      .withIndex("by_externalId", (q) => q.eq("externalId", identity.subject))
      .unique();
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection, logs the arguments, and returns the documents. Query functions are used for reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database using `ctx.db.query` and logs client-provided arguments. Query functions are used for reading data and can return processed results.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/vue/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining Database Index - Convex Schema - TypeScript
DESCRIPTION: This snippet demonstrates how to define a database index within the Convex schema. It adds a `by_channel` index to the `messages` table, allowing efficient filtering of messages by their `channel` ID. This index speeds up lookups for specific channels.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/reading-data.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// Define a messages table with an index.
export default defineSchema({
  messages: defineTable({
    channel: v.id("channels"),
    body: v.string(),
    user: v.id("users"),
  }).index("by_channel", ["channel"])
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table, logs arguments, and returns the collected documents. It demonstrates how to perform read-only operations and access client-provided arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/vector-search/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines `myQueryFunction`, a Convex query function. It specifies argument validators using `convex/values` and implements a handler that reads data from a 'tablename' collection in the database, logs client-provided arguments, and returns the retrieved documents. It demonstrates basic database reads and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/dall-e-storage-action/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named myQueryFunction. It uses validators for its arguments (first as number, second as string) and reads all documents from the "tablename" collection using ctx.db.query("tablename").collect(). The function returns the collected documents and logs the provided arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#_snippet_0

LANGUAGE: ts
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database using `ctx.db.query` and logs client-provided arguments. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/tanstack-start-clerk/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines `myQueryFunction`, a Convex query function that reads data from the database. It includes argument validation using `v.number()` and `v.string()`, demonstrates database querying with `ctx.db.query().collect()`, and logs client-provided arguments. The function returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/clerk/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Secure Team Update Mutation (Auth Identity Check) - TypeScript
DESCRIPTION: This Convex mutation function `updateTeam` securely checks user access by using `ctx.auth.getUserIdentity()`, which cannot be spoofed. It ensures that only authenticated and authorized users (e.g., team members) can update team details.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_391

LANGUAGE: TypeScript
CODE:
```
// ✅ -- checks access, and uses `ctx.auth`, which cannot be spoofed
export const updateTeam = mutation({
  args: {
    id: v.id("teams"),
    update: v.object({
      name: v.optional(v.string()),
      owner: v.optional(v.id("users")),
    })
  },
  handler: async (ctx, { id, update }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    const isTeamMember = /* check if user is a member of the team */
    if (!isTeamMember) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, update);
  }
});
```

----------------------------------------

TITLE: Paginating Large Datasets in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle potentially unbounded query results in Convex using pagination. It contrasts an inefficient approach that collects all watched movies for a user with an optimized method that applies pagination, ensuring only a manageable subset of data is retrieved, which is crucial for large datasets.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_385

LANGUAGE: TypeScript
CODE:
```
// ❌ -- potentially unbounded
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .collect();

// ✅ -- using pagination, showing recently watched movies first
const watchedMovies = await ctx.db
  .query("watchedMovies")
  .withIndex("by_user", (q) => q.eq("user", "Tom"))
  .order("desc")
  .paginate(paginationOptions);
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments to the function and retrieves the returned data, enabling real-time data fetching from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/pagination/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use the `myMutationFunction` Convex mutation within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: fire-and-forget, and handling the asynchronous result using a Promise.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/convex-chat-speculative/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke `myMutationFunction` from a React component using the `useMutation` hook. It shows both a 'fire and forget' approach and handling the returned promise for post-mutation actions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Initializing Convex React Client (TypeScript)
DESCRIPTION: This snippet shows how to create an instance of ConvexReactClient, which is essential for integrating Convex with React applications. The client is initialized with the Convex deployment address, typically loaded from an environment variable, to establish a connection to your backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_495

LANGUAGE: TypeScript
CODE:
```
import { ConvexReactClient } from "convex/react";

// typically loaded from an environment variable
const address = "https://small-mouse-123.convex.cloud";
const convex = new ConvexReactClient(address);
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It passes `first` as a number and `second` as a string to the query, retrieving the data returned by the backend function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/2-likes/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Calling a Convex Query Function from React
DESCRIPTION: This snippet demonstrates how to consume the `myQueryFunction` from a React component using the `useQuery` hook. It passes the required `first` (number) and `second` (string) arguments to the Convex query function, retrieving the returned data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/shared-cursors/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining an Example Query in Convex
DESCRIPTION: This snippet demonstrates a basic Convex query function. It takes named arguments, reads data from the database using the `db` context, and returns a result. It illustrates the fundamental structure of a Convex query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/query-functions.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getMessages = query({
  args: { limit: v.number() },
  handler: async (ctx, args) => {
    return await ctx.db.query("messages").take(args.limit);
  }
});
```

----------------------------------------

TITLE: Defining Users Table Schema with External ID Index in Convex (TypeScript)
DESCRIPTION: This schema definition for the 'users' table includes 'name' and 'externalId' fields. The 'externalId' field, intended to store the Clerk user ID, is indexed by 'byExternalId' to enable efficient lookups of users based on their external identity provider ID. This is crucial for integrating external authentication systems with Convex user documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_484

LANGUAGE: TypeScript
CODE:
```
users: defineTable({
  name: v.string(),
  // this the Clerk ID, stored in the subject JWT field
  externalId: v.string(),
}).index("byExternalId", ["externalId"]),
```

----------------------------------------

TITLE: Using NPM Packages in Convex Mutations (TypeScript)
DESCRIPTION: Illustrates how to import and use an installed NPM package, such as `@faker-js/faker`, within a Convex mutation. This enables leveraging external libraries for various tasks like data generation directly within your backend logic.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { faker } from "@faker-js/faker"; // Ensure @faker-js/faker is installed

export const createRandomUser = mutation({
  args: {},
  handler: async (ctx) => {
    const user = {
      name: faker.person.fullName(),
      email: faker.internet.email(),
      address: faker.location.streetAddress()
    };
    // Example: ctx.db.insert("users", user);
    return user;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that demonstrates writing data to the database using `ctx.db.insert`. Mutations can also read data and optionally return a value, as shown by fetching the newly inserted document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/sveltekit/src/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction` for writing data to the database. It includes argument validation and demonstrates inserting a new document into a 'messages' table using `ctx.db.insert`, optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/tour-chat/0-start/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Calling a Convex Query from a React Client (TypeScript)
DESCRIPTION: This React component snippet illustrates how to invoke a Convex query from a client-side application using the `useQuery` hook provided by `convex/react`. It imports the generated `api` object and calls `api.myFunctions.sum` with specific arguments, demonstrating how to fetch and reactively use data from Convex in a React application.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_363

LANGUAGE: typescript
CODE:
```
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function MyApp() {
  const data = useQuery(api.myFunctions.sum, { a: 1, b: 2 });
  // do something with \`data\`
}
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This example demonstrates how to use the `myQueryFunction` Convex query within a React component using the `useQuery` hook. It shows how to pass arguments to the query and retrieve the returned data, enabling client-side data fetching from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-modern/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React with useQuery
DESCRIPTION: This snippet demonstrates how to use the `myQueryFunction` defined in Convex within a React component using the `useQuery` hook. It passes the required arguments (`first` as a number, `second` as a string) to the Convex function, retrieving the returned data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/middleware/convex/README.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query in React with useQuery
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to fetch data from the `myQueryFunction` defined in Convex. It passes required arguments `first` (10) and `second` ('hello') to the query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/javascript/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the previously defined `myQueryFunction`. It passes the required `first` and `second` arguments to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/vector-search/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Exporting Convex Data to a File using CLI
DESCRIPTION: This command-line interface (CLI) snippet demonstrates how to export all table documents and file storage data from a Convex deployment to a local ZIP file. It specifies the output directory for the generated backup. The resulting ZIP file can be used for importing data into the same or a different deployment.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/backup-restore.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npx convex export --path ~/Downloads
```

----------------------------------------

TITLE: Exporting Data with Convex CLI
DESCRIPTION: This command allows exporting Convex database data to a local directory or a .zip file. It provides an option to include file storage data alongside the database tables. This is essential for backups or migrating data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_596

LANGUAGE: Shell
CODE:
```
npx convex export --path <directoryPath>
npx convex export --path <filePath>.zip
npx convex export --include-file-storage --path <path>
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a database table, logs arguments, and returns the collected documents. Query functions are used for reading data from the Convex database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/sessions/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Writing Data with Convex Mutation Context `db` - TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates using the `db` field from the mutation context to interact with the Convex database. The handler function is declared `async` to allow `await`ing database operations like `db.insert()`, which inserts a new document and returns its ID. This is the primary way to modify data within a Convex mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/mutation-functions.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const addDocument = mutation({
  handler: async ({ db }, { title, content }) => {
    const id = await db.insert("documents", { title, content });
    return id;
  }
});
```

LANGUAGE: JavaScript
CODE:
```
import { mutation } from "./_generated/server";

export const addDocument = mutation({
  handler: async ({ db }, { title, content }) => {
    const id = await db.insert("documents", { title, content });
    return id;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction` for writing data to the database. It includes argument validation and demonstrates inserting a new document using `ctx.db.insert` and optionally returning the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/system-tables/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and demonstrates how to read data from the database using `ctx.db.query` and access client-provided arguments. The function returns the collected documents.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/npm-showcase/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex mutation function named `myMutationFunction`. It includes argument validation and a handler that demonstrates writing data to the database by inserting a new document into the 'messages' collection. Mutations can also read data and optionally return a value after completion.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/react-native/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines `myQueryFunction`, a Convex query function. It specifies argument validators for `first` (number) and `second` (string), reads documents from a 'tablename' collection, logs the arguments, and returns the collected documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/udf-tests/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Listing Messages and Loading User Details in Convex (TypeScript)
DESCRIPTION: This query retrieves all messages from the database. For each message, it fetches the associated user's details using the 'message.user' ID, which acts as a foreign key. The message object is then enriched with the author's name, defaulting to 'Anonymous' if the user is not found, demonstrating how to dereference foreign keys to load related document data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_483

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const list = query({
  args: {},
  handler: async (ctx) => {
    const messages = await ctx.db.query("messages").collect();
    return Promise.all(
      messages.map(async (message) => {
        // For each message in this channel, fetch the `User` who wrote it and
        // insert their name into the `author` field.
        const user = await ctx.db.get(message.user);
        return {
          author: user?.name ?? "Anonymous",
          ...message,
        };
      }),
    );
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This example illustrates how to use the `myMutationFunction` Convex mutation within a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' invocation and an invocation that processes the returned result using a Promise.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/waitlist/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to invoke a Convex mutation function, `myMutationFunction`, from a React component using the `useMutation` hook. It shows two common patterns: a 'fire and forget' call and a call that processes the result once the mutation completes, both passing string arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/js-integration-tests/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Modifying sendMessage Mutation to Trigger Wikipedia Action in Convex (TypeScript)
DESCRIPTION: This snippet updates an existing `sendMessage` mutation to conditionally trigger the `getWikipediaSummary` internal action. If a message body starts with `/wiki`, it extracts the topic and schedules the `getWikipediaSummary` action to run immediately using `ctx.scheduler.runAfter`, demonstrating how to coordinate asynchronous functions in Convex.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_509

LANGUAGE: TypeScript
CODE:
```
// Import the api reference
import { api, internal } from "./_generated/api";

//...

export const sendMessage = mutation({
  args: {
    user: v.string(),
    body: v.string(),
  },
  handler: async (ctx, args) => {
    console.log("This TypeScript function is running on the server.");
    await ctx.db.insert("messages", {
      user: args.user,
      body: args.body,
    });

    // Add the following lines:
    if (args.body.startsWith("/wiki")) {
      // Get the string after the first space
      const topic = args.body.slice(args.body.indexOf(" ") + 1);
      await ctx.scheduler.runAfter(0, internal.chat.getWikipediaSummary, {
        topic,
      });
    }
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` in a React component via the `useMutation` hook. It shows two common patterns: 'fire and forget' for simple calls, and handling the promise result for actions that require a response after the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-auth/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Calling a Convex Mutation Function with React useMutation Hook
DESCRIPTION: This snippet demonstrates how to call the `myMutationFunction` from a React component using the `useMutation` hook. It shows two ways to invoke the mutation: 'fire and forget' for immediate execution, and using a `.then()` callback to process the result once the mutation completes. Mutations are typically triggered by user actions like button presses.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/remix/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Calling Convex Mutation from Next.js Server Action (TS/JS)
DESCRIPTION: This snippet demonstrates how to call a Convex mutation from an inline Next.js Server Action. It uses `fetchMutation` to interact with the Convex backend, allowing server-side data modifications directly from a form submission. Dependencies include `convex/nextjs` and the generated Convex API.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs/nextjs-server-rendering.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// app/example/page.tsx
import { fetchMutation } from "convex/nextjs";
import { api } from "../../convex/_generated/api";

export default function Page() {
  async function createItem(formData: FormData) {
    "use server";
    const name = formData.get("name") as string;
    await fetchMutation(api.items.createItem, { name });
    // Revalidate path or redirect as needed
  }

  return (
    <form action={createItem}>
      <input type="text" name="name" />
      <button type="submit">Create Item</button>
    </form>
  );
}
```

LANGUAGE: JavaScript
CODE:
```
// app/example/page.tsx
import { fetchMutation } from "convex/nextjs";
import { api } from "../../convex/_generated/api";

export default function Page() {
  async function createItem(formData) {
    "use server";
    const name = formData.get("name");
    await fetchMutation(api.items.createItem, { name });
    // Revalidate path or redirect as needed
  }

  return (
    <form action={createItem}>
      <input type="text" name="name" />
      <button type="submit">Create Item</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Defining Convex HTTP Actions (TypeScript)
DESCRIPTION: The `httpActionGeneric` function is used to define a Convex HTTP action, which serves as an endpoint for handling incoming HTTP requests. The provided `func` parameter is a handler that receives a `GenericActionCtx` and a standard `Request` object, and is expected to return a `Promise<Response>`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_198

LANGUAGE: typescript
CODE:
```
function httpActionGeneric(
  func: (ctx: GenericActionCtx<GenericDataModel>, request: Request) => Promise<Response>
): PublicHttpAction;
```

----------------------------------------

TITLE: Invoking Internal Convex API from an Action - JavaScript
DESCRIPTION: This example illustrates how to use the `internal` object, which describes your app's internal Convex API, within a Convex `action`. It shows an asynchronous `action` handler that, after an external operation (like a payment), calls an internal Convex mutation, `internal.plans.markPlanAsProfessional`, using `runMutation` to update the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/generated-api/api.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { action } from "../_generated/server";
import { internal } from "../_generated/api";

export default action({
  handler: async ({ runMutation }, { planId, ... }) => {
    // Call out to payment provider (e.g. Stripe) to charge customer
    const response = await fetch(...);
    if (response.ok) {
      // Mark the plan as "professional" in the Convex DB
      await runMutation(internal.plans.markPlanAsProfessional, { planId });
    }
  }
});
```

----------------------------------------

TITLE: Accessing Environment Variables in Convex Functions (JavaScript)
DESCRIPTION: This function demonstrates how to access an environment variable, `GIPHY_KEY`, using `process.env.KEY` within a Convex function. It constructs a Giphy API URL, expecting `GIPHY_KEY` to be a string, otherwise it would be `undefined`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_380

LANGUAGE: JavaScript
CODE:
```
function giphyUrl(query) {
  return (
    "https://api.giphy.com/v1/gifs/translate?api_key=" +
    process.env.GIPHY_KEY +
    "&s=" +
    encodeURIComponent(query)
  );
}
```

----------------------------------------

TITLE: Consistent Data Retrieval with Single `ctx.runQuery` in Convex
DESCRIPTION: This example demonstrates the recommended approach for consistent data retrieval. Instead of multiple sequential queries, a single `ctx.runQuery` calls `internal.teams.getTeamAndOwner`, which consolidates the fetching of team and owner data within a single transaction, guaranteeing consistency and preventing race conditions.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_404

LANGUAGE: TypeScript
CODE:
```
import * as Teams from './model/teams';
import * as Users from './model/users';

export const sendBillingReminder = action({
  args: {
    teamId: v.id("teams")
  },
  handler: async (ctx, { teamId }) => {
    // ✅ -- this will always pass
    const teamAndOwner = await ctx.runQuery(internal.teams.getTeamAndOwner, {
      teamId
    });
    assert(teamAndOwner.team.owner === teamAndOwner.owner._id);
    // send a billing reminder email to the owner
  }
});

export const getTeamAndOwner = internalQuery({
  args: {
    teamId: v.id("teams")
  },
  handler: async (ctx, { teamId }) => {
    const team = await Teams.load(ctx, { teamId });
    const owner = await Users.load(ctx, { userId: team.owner });
    return { team, owner };
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It illustrates argument validation, inserting a new document into the 'messages' table using `ctx.db.insert`, and optionally returning the newly created document by its ID.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call `myMutationFunction`. It shows two common patterns: a 'fire and forget' call and a call that processes the result once the mutation completes, demonstrating how to pass arguments to the mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-14/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining Convex Mutation with Untyped Arguments (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a basic Convex mutation function that accepts named arguments. The `handler` function receives arguments as its second parameter, allowing access to `args.a` and `args.b`. It also shows how a mutation can optionally return a value, which will be serialized.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_410

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";

export const mutateSomething = mutation({
  handler: (_, args: { a: number; b: number }) => {
    // do something with `args.a` and `args.b`

    // optionally return a value
    return "success";
  },
});
```

----------------------------------------

TITLE: Querying Documents by Reference in Convex (JavaScript)
DESCRIPTION: This example shows how to query for documents that contain a specific reference. It queries the "books" table and filters the results to find all books where the `ownerId` field matches the `_id` of a specific user, demonstrating how to find related documents using queries.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_433

LANGUAGE: JavaScript
CODE:
```
const myBooks = await ctx.db
  .query("books")
  .filter((q) => q.eq(q.field("ownerId"), user._id))
  .collect();
```

----------------------------------------

TITLE: Checking Authentication Status with useConvexAuth Hook
DESCRIPTION: This React component uses the `useConvexAuth` hook to determine the user's authentication status and loading state. It's crucial for ensuring the browser has an auth token for Convex backend requests.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_332

LANGUAGE: TypeScript
CODE:
```
import { useConvexAuth } from "convex/react";

function App() {
  const { isLoading, isAuthenticated } = useConvexAuth();

  return (
    <div className="App">
      {isAuthenticated ? "Logged in" : "Logged out or still loading"}
    </div>
  );
}
```

----------------------------------------

TITLE: Handling Mutation Response with Async/Await in React (TSX)
DESCRIPTION: This example demonstrates how to handle the response and potential errors from a Convex mutation call using `async/await`. It wraps the mutation call in a `try...catch` block to log errors and the result after the mutation completes.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  const onClick = () => {
    async function callBackend() {
      try {
        const result = await doSomething();
      } catch (error) {
        console.error(error);
      }
      console.log(result);
    }
    void callBackend();
  };
  return <button onClick={onClick}>Click me</button>;
}
```

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `v.number()` and `v.string()` and implements a handler that reads documents from a 'tablename' collection in the database and logs the provided arguments. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Convex Query Function (JavaScript)
DESCRIPTION: Defines a Convex query function `get` within the `tasks.js` file. This function is exposed as the API endpoint "tasks:get" and is intended to fetch data from the database.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/python.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  handler: async ({ db }) => {
    return await db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes required arguments to the query and retrieves the returned data, enabling real-time data fetching in the frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/test-data/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Patching Documents with db.patch (Convex)
DESCRIPTION: Shows how to update an existing document in a Convex database table using the `db.patch` method. This method performs a shallow merge, adding new fields, overwriting existing ones, and removing fields set to `undefined`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/writing-data.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const patchTask = mutation({
  args: { id: v.id("tasks"), text: v.string() },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.id, { text: args.text });
  },
});
```

LANGUAGE: javascript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const patchTask = mutation({
  args: { id: v.id("tasks"), text: v.string() },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.id, { text: args.text });
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and its handler reads documents from a 'tablename' collection, logs the arguments, and returns the collected documents. It demonstrates basic database reads and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/cron-jobs/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Wrapping React App with ConvexProvider
DESCRIPTION: This snippet demonstrates how to make the `ConvexReactClient` instance available throughout your React application. The `ConvexProvider` component wraps your root component tree, passing the client instance via its `client` prop.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_310

LANGUAGE: TypeScript
CODE:
```
reactDOMRoot.render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>,
);
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet shows how to use the `useQuery` hook in a React component to call the previously defined `myQueryFunction`. It passes the required arguments `first` and `second` to the query, retrieving the data returned by the Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/typescript-old/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Calling a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using the `useQuery` hook. It passes an object with `first` and `second` arguments, and the returned data is assigned to the `data` variable. This hook automatically re-runs the query when arguments change or data updates.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/component-tests/projects/with-schema/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Following Document References in Convex (JavaScript)
DESCRIPTION: This snippet illustrates how to follow a document reference. By using the `get` method with the `ownerId` field (which holds the ID of another document), you can retrieve the referenced document directly, effectively "joining" related data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_432

LANGUAGE: JavaScript
CODE:
```
const user = await ctx.db.get(book.ownerId);
```

----------------------------------------

TITLE: Using a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to consume the `myQueryFunction` from a React component using the `useQuery` hook provided by Convex. It passes required arguments (`first` as a number, `second` as a string) to the query, and the returned data will be available in the `data` variable.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir-js/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call a Convex query function, `myQueryFunction`, from a React component using the `useQuery` hook. It passes required arguments (`first` as a number and `second` as a string) to fetch data from the Convex backend. The `data` variable will hold the result returned by the query.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nodejs/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the `useQuery` hook in a React component to call the `myQueryFunction` defined in Convex. It passes the required arguments to the query and retrieves the returned data, enabling real-time data fetching from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Optimizing Convex Queries: Avoiding Redundant Indexes (TypeScript)
DESCRIPTION: This snippet demonstrates how to optimize Convex database queries by avoiding redundant indexes. It shows an inefficient approach using `by_team` and `by_team_and_user` indexes when `by_team_and_user` alone is sufficient for both general team queries and specific user queries within a team. The optimized version uses a single, more specific index to cover both use cases, reducing storage overhead and write costs.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_387

LANGUAGE: TypeScript
CODE:
```
// ❌
const allTeamMembers = await ctx.db
  .query("teamMembers")
  .withIndex("by_team", (q) => q.eq("team", teamId))
  .collect();
const currentUserId = /* get current user id from `ctx.auth` */
const currentTeamMember = await ctx.db
  .query("teamMembers")
  .withIndex("by_team_and_user", (q) =>
    q.eq("team", teamId).eq("user", currentUserId),
  )
  .unique();

// ✅
// Just don't include a condition on `user` when querying for results on `team`
const allTeamMembers = await ctx.db
  .query("teamMembers")
  .withIndex("by_team_and_user", (q) => q.eq("team", teamId))
  .collect();
const currentUserId = /* get current user id from `ctx.auth` */
const currentTeamMember = await ctx.db
  .query("teamMembers")
  .withIndex("by_team_and_user", (q) =>
    q.eq("team", teamId).eq("user", currentUserId),
  )
  .unique();
```

----------------------------------------

TITLE: Updating Team (Spoofable Email Access Control) - Convex TypeScript
DESCRIPTION: This Convex mutation attempts to implement access control using an 'email' argument. However, this method is insecure because the email can be easily spoofed by a malicious client, allowing unauthorized updates to the team.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_77

LANGUAGE: TypeScript
CODE:
```
export const updateTeam = mutation({
  args: {
    id: v.id("teams"),
    update: v.object({
      name: v.optional(v.string()),
      owner: v.optional(v.id("users")),
    }),
    email: v.string(),
  },
  handler: async (ctx, { id, update, email }) => {
    const teamMembers = /* load team members */
    if (!teamMembers.some((m) => m.email === email)) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, update);
  },
});
```

----------------------------------------

TITLE: Writing Data to Database in Convex Mutation (TypeScript)
DESCRIPTION: This example demonstrates how to write data to the Convex database within a mutation using the `ctx.db` field. The `handler` function is marked `async` to `await` the `db.insert()` operation, adding a new item to the 'tasks' table with the provided text.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_413

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const addItem = mutation({
    args: { text: v.string() },
    handler: async (ctx, args) => {
      await ctx.db.insert("tasks", { text: args.text });
    },
});
```

----------------------------------------

TITLE: Optimizing Convex Database Queries: Avoiding .filter in TypeScript
DESCRIPTION: This snippet illustrates best practices for querying data in Convex. It contrasts an inefficient use of `.filter` on a database query with two recommended approaches: utilizing a database index for performance or filtering data in application code after collecting all results. Using indexes is preferred for large datasets.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_70

LANGUAGE: TypeScript
CODE:
```
// ❌
const tomsMessages = ctx.db
  .query("messages")
  .filter((q) => q.eq(q.field("author"), "Tom"))
  .collect();

// ✅
// Option 1: Use an index
const tomsMessages = await ctx.db
  .query("messages")
  .withIndex("by_author", (q) => q.eq("author", "Tom"))
  .collect();

// Option 2: Filter in code
const allMessages = await ctx.db.query("messages").collect();
const tomsMessages = allMessages.filter((m) => m.author === "Tom");
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings and implements a handler that inserts a new message document into the 'messages' collection in the database using the provided arguments. It then retrieves and returns the newly inserted document, demonstrating database write operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet defines a Convex mutation function named `myMutationFunction`. It validates arguments `first` and `second` as strings, then inserts a new document into the 'messages' table using these arguments. The mutation demonstrates writing data to the Convex database and optionally returns the newly created document.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs-app-dir/convex/README.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  }
});
```

----------------------------------------

TITLE: Configuring Client-Side Authentication with Auth0 in Next.js Pages Router
DESCRIPTION: This snippet demonstrates how to set up client-side authentication across your Next.js application using `ConvexProviderWithAuth0` in `_app.tsx`. It integrates Auth0 for user authentication and connects it to Convex, ensuring that all pages are wrapped with the necessary authentication context. This approach is suitable for applications requiring login on every page.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/client/react/nextjs-pages-router/nextjs-pages-router.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// pages/_app.tsx
import { ConvexProvider, ConvexReactClient } from "convex/react";
import { Auth0Provider } from "@auth0/auth0-react";
import { ConvexProviderWithAuth0 } from "convex/react-auth0";
import type { AppProps } from "next/app";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function App({ Component, pageProps }: AppProps) {
  return (
    <Auth0Provider
      domain={process.env.NEXT_PUBLIC_AUTH0_DOMAIN!}
      clientId={process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID!}
      authorizationParams={{
        redirect_uri: typeof window !== "undefined" ? window.location.origin : "",
      }}
      useRefreshTokens={true}
      cacheLocation="localstorage"
    >
      <ConvexProviderWithAuth0 client={convex}>
        <Component {...pageProps} />
      </ConvexProviderWithAuth0>
    </Auth0Provider>
  );
}
```

----------------------------------------

TITLE: Configure Convex Auth with Clerk Issuer
DESCRIPTION: Create or update the Convex authentication configuration file to include Clerk as a provider, using the Clerk Frontend API URL as the domain for JWT validation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/clerk.mdx#_snippet_14

LANGUAGE: typescript
CODE:
```
export default {
  providers: [
    {
      domain: process.env.NEXT_PUBLIC_CLERK_FRONTEND_API_URL,
      applicationID: "convex",
    },
  ]
};
```

----------------------------------------

TITLE: Handling ConvexError on the Client
DESCRIPTION: Demonstrates how to catch potential errors when calling Convex functions on the client, specifically checking if the error is a ConvexError instance and accessing its .data payload for application-specific information.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/error-handling/application-errors.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { ConvexError } from "convex/values";

// Assume 'callConvexFunction' is a function that calls a backend Convex function
async function handleFunctionCall() {
  try {
    await callConvexFunction();
    console.log("Function call succeeded");
  } catch (error) {
    if (error instanceof ConvexError) {
      console.error("Application error data:", error.data);
      // You can inspect error.data to handle different error types
    } else {
      console.error("Unexpected error:", error);
    }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { ConvexError } from "convex/values";

// Assume 'callConvexFunction' is a function that calls a backend Convex function
async function handleFunctionCall() {
  try {
    await callConvexFunction();
    console.log("Function call succeeded");
  } catch (error) {
    if (error instanceof ConvexError) {
      console.error("Application error data:", error.data);
      // You can inspect error.data to handle different error types
    } else {
      console.error("Unexpected error:", error);
    }
  }
}
```

----------------------------------------

TITLE: Using v.literal with v.union for Argument Validation
DESCRIPTION: This example shows how to combine `v.literal` with `v.union` to validate an argument against a set of specific constant string values. The `oneTwoOrThree` argument must be exactly "one", "two", or "three".
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/functions/validation.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    oneTwoOrThree: v.union(
      v.literal("one"),
      v.literal("two"),
      v.literal("three")
    ),
  },
  handler: async ({ db }, { oneTwoOrThree }) => {
    //...
  },
});
```

----------------------------------------

TITLE: Exposing a Database Query in Convex (TypeScript)
DESCRIPTION: This TypeScript snippet defines a Convex query function named `get` within `tasks.ts`. It uses `ctx.db.query("tasks").collect()` to retrieve all documents from the `tasks` table in the Convex database. This function becomes accessible as `api.tasks.get` from the frontend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_299

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Loading Users by ID (Convex/TS/JS)
DESCRIPTION: Illustrates a Convex query that fetches user documents based on a list of user IDs. This is useful for displaying information about multiple users, such as participants in a chat or authors of posts.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/auth/database-auth.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";
import { Doc } from "./_generated/dataModel";

export const getUsersByIds = query({
  args: {
    userIds: v.array(v.id("users"))
  },
  handler: async (ctx, args) => {
    const users = await Promise.all(
      args.userIds.map(id => ctx.db.get(id))
    );
    // Filter out nulls in case some IDs don't exist
    return users.filter(user => user !== null) as Doc<"users">[];
  },
});
```

----------------------------------------

TITLE: Updating Wikipedia Summary Action to Post Results to Chat in Convex (TypeScript)
DESCRIPTION: This snippet modifies the `getWikipediaSummary` internal action. Instead of returning the summary, it now schedules the `sendMessage` mutation to post the fetched Wikipedia summary directly into the chat, attributed to "Wikipedia". This illustrates how an action can schedule another mutation to interact with the application's state.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_510

LANGUAGE: TypeScript
CODE:
```
export const getWikipediaSummary = internalAction({
  args: { topic: v.string() },
  handler: async (ctx, args) => {
    const response = await fetch(
      "https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=" +
        args.topic,
    );

    // Replace the `return ...` with the following.
    const summary = getSummaryFromJSON(await response.json());
    await ctx.scheduler.runAfter(0, api.chat.sendMessage, {
      user: "Wikipedia",
      body: summary,
    });
  },
});
```

----------------------------------------

TITLE: Wrap Layout with Convex Provider (TypeScript)
DESCRIPTION: Modifies the root layout file `app/layout.tsx` to wrap the main content (`children`) with the `ConvexClientProvider` component, making the Convex client available throughout the app.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
// app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import ConvexClientProvider from "./ConvexClientProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode; }>)
{
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConvexClientProvider>
          {children}
        </ConvexClientProvider>
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call the `myMutationFunction` from Convex. It shows two ways to invoke the mutation: a 'fire and forget' approach and an approach that handles the asynchronous result using a `.then()` callback. This demonstrates client-side interaction for writing data to the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/pagination-adversarial/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Simple Chat App Schema in Convex
DESCRIPTION: This snippet demonstrates how to define a basic database schema for a chat application using Convex's `defineSchema` and `defineTable` functions. It defines a `messages` table with `author` (referencing `users` by ID) and `body` (a string) fields, ensuring data consistency and structure.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_17

LANGUAGE: TypeScript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// @snippet start schema
export default defineSchema({
  messages: defineTable({
    author: v.id("users"),
    body: v.string(),
  }),
});
```

----------------------------------------

TITLE: Invoking a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call the `myMutationFunction` from Convex. It shows two common patterns: a 'fire and forget' invocation and an invocation that handles the returned promise to process the mutation's result, enabling client-side data modification.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/custom-errors/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` Convex mutation within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: fire-and-forget, and handling the asynchronous result with a `.then()` callback, demonstrating client-side data modification.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/http/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `myMutationFunction` within a React component using the `useMutation` hook. It shows two ways to invoke the mutation: fire-and-forget, and handling the promise result, demonstrating client-side interaction with a Convex backend mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Querying Books by Author and Filtering by Title (Convex TypeScript)
DESCRIPTION: This snippet demonstrates querying the 'books' table using an existing 'by_author' index to efficiently find books by a specific author. It then applies a client-side `filter` to narrow down results by title, illustrating the performance impact of filtering outside the index range. The query expects at most one unique result.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/database/reading-data/indexes/indexes-and-query-perf.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
const foundation = await ctx.db
  .query("books")
  .withIndex("by_author", (q) => q.eq("author", "Isaac Asimov"))
  .filter((q) => q.eq(q.field("title"), "Foundation"))
  .unique();
```

----------------------------------------

TITLE: Using Convex Mutation Function in React Component
DESCRIPTION: This snippet illustrates how to invoke a Convex mutation function, `myMutationFunction`, from a React component. It uses the `useMutation` hook and provides two ways to call the mutation: a 'fire and forget' approach and an approach that handles the returned promise to process the result.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/react-vite-ts/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Calling Convex Mutation Function in React with useMutation
DESCRIPTION: This snippet illustrates how to use the useMutation hook in a React component to call the myMutationFunction. It shows two ways to use the returned mutation function: a fire-and-forget call and a call that uses the returned promise to handle the result asynchronously. The mutation function is called with an object containing the required first and second arguments.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/components-poc/convex/README.md#_snippet_3

LANGUAGE: ts
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two common patterns: a 'fire and forget' call where the mutation is executed without waiting for a result, and a pattern where the result of the mutation is handled asynchronously using a `.then()` callback. This is a client-side example of interacting with a Convex backend to modify data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/nextjs/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Calling a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the `myMutationFunction` from a React component using the `useMutation` hook. It shows two ways to invoke the mutation: a 'fire and forget' approach and one that handles the returned promise to process the result. Mutations are typically triggered by user interactions like button presses.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/quickstarts/tanstack-start/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Consuming a Convex Query Function in React
DESCRIPTION: This snippet shows how to use the `myQueryFunction` defined in Convex within a React component using the `useQuery` hook. It passes specific arguments (`first: 10`, `second: 'hello'`) to the query, allowing the component to reactively fetch and display data from the Convex backend.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/react-native/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello"
});
```

----------------------------------------

TITLE: Calling a Convex Query Function from React
DESCRIPTION: This snippet demonstrates how to call the `myQueryFunction` from a React component using Convex's `useQuery` hook. It passes required arguments (`first` and `second`) to the backend function and retrieves the returned data, showcasing client-side integration with Convex queries.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from a 'tablename' collection in the database, logs client-provided arguments, and returns the retrieved documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/file-storage-with-http/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the collected documents. It demonstrates how to interact with the Convex database for reading data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/bundle-size/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Initializing Convex Client and Subscribing to Updates - JavaScript
DESCRIPTION: This snippet initializes a Convex client instance pointing to a local development server URL. It then subscribes to real-time updates for the "messages:list" query, logging the body of each received message to the console whenever the query results change.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/html/simple.html#_snippet_0

LANGUAGE: javascript
CODE:
```
const CONVEX_URL = "http://localhost:8000"; const client = new convex.ConvexClient(CONVEX_URL); client.onUpdate("messages:list", {}, (messages) => console.log(messages.map((msg) => msg.body)), );
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators using `convex/values` and implements a handler that reads data from the database, logs arguments, and returns processed documents. Query functions are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/users-and-clerk-webhooks/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Directly Interacting with Convex DB/Storage using `t.run` (TypeScript)
DESCRIPTION: This snippet demonstrates how to use `t.run` to directly interact with the mock Convex database or file storage within a test. The handler function passed to `t.run` receives a `ctx` object, enabling direct `db` operations like `insert` and `query` for setting up test data or inspecting storage state without needing a declared Convex function.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_583

LANGUAGE: TypeScript
CODE:
```
import { convexTest } from "convex-test";
import { expect, test } from "vitest";

test("functions", async () => {
  const t = convexTest();
  const firstTask = await t.run(async (ctx) => {
    await ctx.db.insert("tasks", { text: "Eat breakfast" });
    return await ctx.db.query("tasks").first();
  });
  expect(firstTask).toMatchObject({ text: "Eat breakfast" });
});

```

----------------------------------------

TITLE: Secure Team Name Update Mutation (Granular Access Control) - TypeScript
DESCRIPTION: This Convex mutation function `setTeamName` provides granular access control, allowing only authenticated and authorized users (e.g., team members) to update the team's name. It leverages `ctx.auth.getUserIdentity()` for robust security.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_393

LANGUAGE: TypeScript
CODE:
```
export const setTeamName = mutation({
  args: {
    id: v.id("teams"),
    name: v.string()
  },
  handler: async (ctx, { id, name }) => {
    const user = await ctx.auth.getUserIdentity();
    if (user === null) {
      throw new Error("Unauthorized");
    }
    const isTeamMember = /* check if user is a member of the team */
    if (!isTeamMember) {
      throw new Error("Unauthorized");
    }
    await ctx.db.patch(id, { name: name });
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and implements a handler that reads from the database and logs the arguments before returning the collected documents. It demonstrates basic database reads and argument handling.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/convex-tour-chat-tutorial/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a server-side Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string), and implements a handler that reads documents from a 'tablename' collection and logs the arguments before returning the documents. Queries are read-only operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/private-demos/cron/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string()
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  }
});
```

----------------------------------------

TITLE: Consuming a Convex Mutation Function in React
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to invoke the `myMutationFunction`. It shows two patterns: a 'fire and forget' approach where the mutation is called without waiting for a result, and an approach that handles the promise returned by the mutation to process its result.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/node/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Calling a Convex Mutation Function in React with useMutation
DESCRIPTION: This snippet illustrates how to use the `useMutation` hook in a React component to call the `myMutationFunction`. It shows two common patterns: a 'fire and forget' call and a call that processes the result using a Promise, demonstrating how to interact with the backend mutation.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/@convex-dev/react-query/convex/README.md#_snippet_3

LANGUAGE: ts
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Create Convex Client Provider (TypeScript)
DESCRIPTION: Creates a client component `ConvexClientProvider` in `app/ConvexClientProvider.tsx` that initializes `ConvexReactClient` and wraps children with `ConvexProvider` for client-side Convex usage in Next.js App Router.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/nextjs.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
// app/ConvexClientProvider.tsx
"use client";

import { ConvexProvider, ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL!;

const convex = new ConvexReactClient(convexUrl);

export default function ConvexClientProvider({ children }: { children: ReactNode }) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}
```

----------------------------------------

TITLE: Inserting New Documents with Convex Mutation (TypeScript)
DESCRIPTION: This Convex mutation, `createTask`, demonstrates how to insert a new document into the 'tasks' table. It accepts a `text` argument of type string, and its handler uses `ctx.db.insert` to create a new document with the provided text. The method returns a globally unique ID for the newly inserted document, which can be used for further operations. It depends on `convex/_generated/server` and `convex/values`.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_491

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const createTask = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const taskId = await ctx.db.insert("tasks", { text: args.text });
    // do something with `taskId`
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet defines a Convex query function named `myQueryFunction`. It specifies argument validators for `first` (number) and `second` (string) and implements a handler that reads documents from a 'tablename' collection in the database, logs the arguments, and returns the collected documents. It demonstrates how to interact with the Convex database for reading operations.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/demos/presence-facepile/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Expose Database Query (TypeScript)
DESCRIPTION: Create a `tasks.ts` file inside the `convex/` directory of your project. This TypeScript code defines a Convex query named `get` that retrieves all documents from the `tasks` table.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/docs/quickstart/swift.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

----------------------------------------

TITLE: Exposing a Database Query in Convex (TypeScript)
DESCRIPTION: This TypeScript code defines a Convex query function named `get` that retrieves all documents from the `tasks` table in the database. This function will be callable from the client-side Swift application to fetch task data.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_516

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  }
});
```

----------------------------------------

TITLE: Exposing a Database Query in Convex Backend (TypeScript)
DESCRIPTION: This TypeScript snippet defines a Convex query function named `get` within the `tasks.ts` file. When exposed, it becomes `api.tasks.get`. The handler retrieves all documents from the `tasks` table in the database and returns them, making the data accessible to frontend applications.
SOURCE: https://github.com/get-convex/convex-backend/blob/main/npm-packages/docs/static/llms.txt#_snippet_132

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});
```

TITLE: Using a Convex Mutation in React (TypeScript)
DESCRIPTION: Demonstrates how to call a defined Convex mutation function (`myMutationFunction`) from a React component using the `useMutation` hook. It shows both the fire-and-forget approach and handling the result using a promise.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#_snippet_3

LANGUAGE: ts
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation in React (TypeScript)
DESCRIPTION: Illustrates how to call a defined Convex mutation function (`myMutationFunction`) from a React component using the `useMutation` hook. It shows both the 'fire and forget' approach and handling the promise returned by the mutation.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Query in React (TypeScript)
DESCRIPTION: Shows how to call a defined Convex query function (`myQueryFunction`) from a React component using the `useQuery` hook provided by Convex, passing the required arguments as an object.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query in React (TypeScript)
DESCRIPTION: Demonstrates how to consume a defined Convex query function (`myQueryFunction`) within a React component using the `useQuery` hook provided by Convex. It shows how to pass required arguments to the query.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: Defines a Convex query function using the `query` helper. It includes argument validation using `v` from `convex/values`, demonstrates reading data from the database using `ctx.db.query` and `collect`, accesses arguments via the `args` object, and returns the retrieved data.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: Defines a Convex query function named `myQueryFunction` using `query()`. It includes argument validation using `v` from `convex/values` and demonstrates reading data from the database using `ctx.db.query().collect()` and accessing arguments.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#_snippet_0

LANGUAGE: ts
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: Defines a Convex mutation function using the `mutation` helper. It includes argument validation, demonstrates writing data to the database using `ctx.db.insert`, and shows how to optionally return a value after the mutation completes.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: Defines a Convex mutation function named `myMutationFunction` using `mutation()`. It includes argument validation and demonstrates writing data to the database using `ctx.db.insert()` and optionally returning a value by fetching the newly inserted document.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#_snippet_2

LANGUAGE: ts
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Create New Convex Project with Next.js Template - npm
DESCRIPTION: Initializes a new Convex project using the latest version of the `create-convex` tool and specifies the Next.js template.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm create convex@latest -- -t nextjs
```

----------------------------------------

TITLE: Running Convex Project Locally (Shell)
DESCRIPTION: Installs dependencies for the main project and the example directory, then starts the Convex development server.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm i
cd example
npm i
npx convex dev
```

----------------------------------------

TITLE: Install Dependencies and Run Development Server - npm
DESCRIPTION: Installs project dependencies and starts the development server for the Convex + Next.js application.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Testing and Linting Project (Shell)
DESCRIPTION: Cleans the build directory, builds the project, runs type checking and tests, then navigates to the example directory to run linting.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: sh
CODE:
```
rm -rf dist/ && npm run build
npm run typecheck
npm run test
cd example
npm run lint
cd ..
```

----------------------------------------

TITLE: Deploying New Version (Shell)
DESCRIPTION: Increments the patch version of the package, performs a dry run publish for verification, publishes the package to npm, and pushes git tags.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: sh
CODE:
```
# this will change the version and commit it (if you run it in the root directory)
npm version patch
npm publish --dry-run
# sanity check files being included
npm publish
git push --tags
```

----------------------------------------

TITLE: Building One-Off Package (Shell)
DESCRIPTION: Cleans the distribution directory, builds the project, and then creates a tarball package using npm pack.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: sh
CODE:
```
rm -rf dist/ && npm run build
npm pack
```

----------------------------------------

TITLE: Deploying Alpha Release (Shell)
DESCRIPTION: Increments the prerelease version with the 'alpha' identifier and publishes the package to npm with the 'alpha' tag.
SOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: sh
CODE:
```
npm version prerelease --preid alpha
npm publish --tag alpha
```

TITLE: Defining a Convex Mutation Function (TypeScript)
DESCRIPTION: Defines a Convex mutation function that writes data to the database. It includes argument validation and demonstrates inserting and retrieving documents using 'ctx.db.insert' and 'ctx.db.get'.
SOURCE: https://github.com/get-convex/convex-auth-example/blob/main/convex/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Query in React (TypeScript)
DESCRIPTION: Demonstrates how to call a defined Convex query function from a React component using the 'useQuery' hook provided by Convex, passing the required arguments.
SOURCE: https://github.com/get-convex/convex-auth-example/blob/main/convex/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation in React (TypeScript)
DESCRIPTION: Shows how to call a defined Convex mutation function from a React component using the 'useMutation' hook. It illustrates both the fire-and-forget pattern and handling the promise result.
SOURCE: https://github.com/get-convex/convex-auth-example/blob/main/convex/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result)
  );
}
```

----------------------------------------

TITLE: Defining a Convex Query Function (TypeScript)
DESCRIPTION: Defines a Convex query function that reads data from the database. It includes argument validation using 'convex/values' and demonstrates reading documents using 'ctx.db.query'.
SOURCE: https://github.com/get-convex/convex-auth-example/blob/main/convex/README.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Getting Started with npm
DESCRIPTION: Install project dependencies and start the development server using npm commands.
SOURCE: https://github.com/get-convex/convex-auth-example/blob/main/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

TITLE: Using a Convex mutation function in a React component
DESCRIPTION: This snippet demonstrates how to use the mutation function in a React component with the useMutation hook. It shows both fire-and-forget usage and handling the returned result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Defining Relational Schema in Convex using TypeScript
DESCRIPTION: This code snippet defines a schema for a multi-channel message app using Convex. It creates two tables: 'channels' with a name field, and 'messages' with author, body, and a reference to the channel. The schema demonstrates how to create associations between tables in Convex.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  channels: defineTable({
    name: v.string(),
  }),
  messages: defineTable({
    author: v.string(),
    body: v.string(),
    channel: v.id("channels"),
  }),
});
```

----------------------------------------

TITLE: Defining a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet illustrates the creation of a Convex mutation function. It includes argument validation, database insertion, and optional return value. The function demonstrates how to modify the database within a mutation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet shows how to define a mutation function that can insert or modify database documents. It demonstrates argument validation, database operations, and returning the result of the mutation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Query Function in Convex with TypeScript
DESCRIPTION: Demonstrates how to create a query function in Convex that accepts number and string arguments. The function shows how to read data from the database using ctx.db.query and return documents after processing.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Example of a Convex mutation function that accepts string arguments and performs database write operations. Demonstrates argument validation and database insertion.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex with TypeScript
DESCRIPTION: A sample implementation of a Convex mutation function that accepts two string arguments. The function demonstrates how to insert data into the database and return the newly created document. It includes proper type validation using Convex's validation system.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing usePresence Hook for User Presence Tracking in Convex
DESCRIPTION: Code snippet demonstrating how to initialize the usePresence hook with a room identifier, user name, and initial presence data containing the user's name and emoji. This hook is the core functionality for tracking user presence in the application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const [myPresence, othersPresence, updateMyPresence] = usePresence(
  "chat-room",
  name,
  {
    name,
    emoji: initialEmoji,
  },
);
```

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: This snippet illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex
DESCRIPTION: This example shows how to create a mutation function in Convex for modifying database data. It demonstrates parameter validation, inserting a document into a collection, and returning the newly created document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates how to create a mutation function that accepts string arguments and modifies the database. Includes argument validation and database insertion capabilities.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex. It includes argument validation, database insertion, and optional return value handling.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation and database insertion. The function takes two string arguments and inserts a new message into the database.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications, showing how to insert documents into the database and return the inserted data. Includes argument validation for string parameters.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Shows how to create a mutation function that accepts string arguments and modifies the database. Includes argument validation and demonstrates database insertion operations.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This example demonstrates creating a mutation function in Convex that modifies the database. It shows how to validate string arguments, insert data into a collection, and optionally return the created document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to consume a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex with TypeScript
DESCRIPTION: Example of creating a mutation function that accepts string arguments, writes data to the database, and returns the created record. Shows argument validation, database writing operations, and retrieving the inserted data.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex with TypeScript
DESCRIPTION: This example demonstrates creating a mutation function that writes data to the Convex database. It includes argument validation, inserting a document, and returning the inserted data.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional result retrieval. The function inserts a message into the database and returns the inserted document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet illustrates the creation of a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function inserts a message into the database and returns the inserted document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two arguments. It includes argument validation, database insertion, and optional return value.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet shows how to use the useMutation hook in a React component to call a Convex mutation function. It demonstrates both the fire-and-forget pattern and handling the result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments, demonstrating database querying and argument validation. The function shows how to read from the database and process the results.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Demonstrates how to create a Convex mutation function that modifies the database. Shows argument validation and database insertion patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a mutation function in a React component with the useMutation hook, including both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Shows how to create a mutation function that writes data to the database. The example demonstrates argument validation and database operations with return values.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Configuring ConvexProvider with SessionProvider in React
DESCRIPTION: Setup code showing how to wrap a React application with both ConvexProvider and SessionProvider components for session management
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<ConvexProvider client={convex}>
  <SessionProvider>
    <App />
  </SessionProvider>
</ConvexProvider>
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use the defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a Promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: An example of creating a mutation function in Convex that takes two string arguments and inserts a document into the database. The function performs data validation, creates a new record, and returns the inserted data.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Convex query function in TypeScript
DESCRIPTION: This snippet demonstrates how to create a query function that accepts number and string arguments. It shows how to validate inputs, read from the database, and process the returned data. The function retrieves all documents from a specified table.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. The example passes required arguments of number and string types to the query.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments and returns documents from a database table.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Query Function in React (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two patterns: fire-and-forget and handling the result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet shows how to use a Convex mutation function in a React component. It demonstrates two ways to call the mutation: fire-and-forget and handling the result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation Functions in React
DESCRIPTION: Example showing how to use a Convex mutation function in a React component with the useMutation hook. Demonstrates both fire-and-forget pattern and handling mutation results with promises.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to validate arguments, query the database, and process results. Includes type validation and async database operations.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React with TypeScript
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget pattern and using the result with a promise chain.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments (a number and a string), reads from the database, and returns documents. It shows the structure with argument validation and the handler implementation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget usage and handling the result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and database querying capabilities.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and result processing. The function takes two arguments and returns documents from a database table.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing a Convex mutation function in TypeScript
DESCRIPTION: This snippet shows how to create a mutation function that modifies the database. It demonstrates validating string inputs, inserting data into a collection, and returning the created document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using Convex Query Functions in React
DESCRIPTION: Example showing how to use a Convex query function in a React component using the useQuery hook. This snippet demonstrates how to pass arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and logging.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a query function that accepts number and string arguments. The function shows database querying and handling of client-provided arguments with proper validation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and shows how to use the database context.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that modifies the database. Includes argument validation and shows how to insert data and return the modified record.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to use the query function within a React component using the useQuery hook with proper argument passing.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a query function that accepts number and string arguments. The function shows database querying capabilities and argument validation using Convex's built-in validators.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Example of a query function that accepts numeric and string arguments. Shows how to define argument validators and implement a database query handler that returns documents.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a Convex query function that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing a Query Function in Convex with TypeScript
DESCRIPTION: A sample implementation of a Convex query function that accepts numeric and string arguments. The function demonstrates how to validate arguments, query the database, and process returned documents. It includes proper type validation using Convex's validation system.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the defined query function in a React component using the useQuery hook. It shows how to pass arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Example of how to consume a Convex query function within a React component using the useQuery hook. This snippet shows how to pass arguments to the query and access the returned data.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that writes data to the database. Shows proper argument validation and database operations with return value handling.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation, database insertion, and return value handling.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet demonstrates how to use the useQuery hook to call a Convex query function from a React component. It shows how to pass the required arguments to the query function defined in the API.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex query function in a React component
DESCRIPTION: This snippet shows how to use the previously defined query function in a React component with the useQuery hook. It demonstrates passing the required arguments to the function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. This snippet demonstrates both fire-and-forget and promise-based approaches to handling the mutation result.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing a Query Function in Convex
DESCRIPTION: This code demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes parameter validation and database retrieval using ctx.db.query.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex with TypeScript
DESCRIPTION: Example of creating a query function that accepts number and string arguments, reads data from the database, and returns documents. It demonstrates argument validation, database reading, and implementing the handler function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This example shows how to create a query function in Convex that accepts numeric and string arguments. The function connects to the database to retrieve documents from a table, and demonstrates argument validation using Convex's value validation system.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Convex query function with argument validation and database interaction. It shows the structure for defining args, handling the query, and returning results.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates the usage of the useQuery hook to fetch data from the server.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook. The example demonstrates both fire-and-forget usage and handling the returned promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Implementing Query Functions in Convex
DESCRIPTION: Example of a query function that takes two arguments, reads from the database, and returns documents. The function includes argument validation using Convex's validation system and demonstrates how to read data from the database.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex with TypeScript
DESCRIPTION: Example of a query function implementation that takes numeric and string arguments. Shows how to query the database and process the results with proper type validation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Example of a mutation function that accepts two string arguments and demonstrates how to insert data into the database and return the inserted record.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data, passing the required arguments to the function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates argument validation, database querying, and data processing capabilities.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React with TypeScript
DESCRIPTION: Demonstrates how to use a Convex query function in a React component using the useQuery hook. Shows passing arguments to the query function in the expected format.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: An example of creating a query function in Convex that takes two arguments (a number and a string), queries the database for documents, and returns them. This includes argument validation and database access patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Mutation Function in React (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet shows how to define a query function that accepts number and string arguments. It demonstrates argument validation, accessing the database through the context, and returning data to the client.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments and performs database operations. Shows argument validation and database querying patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two approaches: fire-and-forget and handling the result with a promise. The useMutation hook is used to access the mutation function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Processing User Presence Data to Determine Active Status
DESCRIPTION: JavaScript code that maps through the othersPresence array to add an 'old' flag to each user based on their last update time. This determines which users are displayed as active or inactive in the FacePile component.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
othersPresence.map((presence) => ({
  ...presence,
  old: presence.updated < now - OLD_MS,
}));
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Example of how to use a Convex query function in a React component using the useQuery hook. The query is called with two arguments corresponding to the function definition.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to integrate a Convex query function within a React component using the useQuery hook with typed arguments.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Initializing usePresence Hook for Typing Indicators in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the usePresence hook for tracking typing status in a chat room. It returns the user's presence, others' presence data, and a function to update presence status.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const [myPresence, othersPresence, updateMyPresence] = usePresence(
  "chat-room",
  name,
  { typing: false },
);
```

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Query Function in React Component
DESCRIPTION: Example of how to consume a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component with the useMutation hook. It shows both fire-and-forget usage and handling the returned result with promises.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. It shows passing arguments to the query function to fetch data from the database.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use the mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget invocation and handling the returned promise for result processing.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates passing arguments to the query function using the useQuery hook.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Implementing a Query Function in Convex with TypeScript
DESCRIPTION: This code snippet demonstrates how to define a query function in Convex that takes two arguments and reads from the database. It shows the structure with argument validation and async handler implementation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Initializing Convex HTTP Client with ESM
DESCRIPTION: Example of setting up a Convex HTTP client using ES modules syntax to query messages.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { ConvexHttpClient } from "convex/browser";
import { api } from "./convex/_generated/api.js";

const client = new ConvexHttpClient(CONVEX_URL_GOES_HERE);
client.query(api.messages.list).then(console.log);
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component with the useMutation hook. Shows both fire-and-forget usage and handling the result with promises.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Configuring Auth0 Environment Variables
DESCRIPTION: Example environment variable configuration for Auth0 authentication in a .env file, specifying the domain and client ID needed for Auth0 integration.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_AUTH0_DOMAIN = "<your domain>.us.auth0.com"
NEXT_PUBLIC_AUTH0_CLIENT_ID = "<your client id>"
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex with TypeScript
DESCRIPTION: Demonstrates how to create a mutation function in Convex that accepts string arguments. The function shows how to insert data into the database using ctx.db.insert and return the newly created document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It includes argument validation, database querying, and data processing.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Configuring Environment Variables for Convex Site URL
DESCRIPTION: Example of how to set up the VITE_CONVEX_SITE_URL environment variable in the .env.local file by modifying the domain from cloud to site.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/README.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
VITE_CONVEX_URL="https://happy-animal-123.convex.cloud"
VITE_CONVEX_SITE_URL="https://happy-animal-123.convex.site"
```

----------------------------------------

TITLE: Implementing Mutation Functions in Convex
DESCRIPTION: Example of a mutation function that modifies data in the database. This function takes two string arguments, inserts a document into the 'messages' table, and returns the newly created document.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two string arguments, writes to the database by inserting a document, and returns the newly created document. It shows the structure with argument validation and the handler implementation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using Mutation Function in React Component
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based result handling approaches.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Initializing Convex HTTP Client with CommonJS
DESCRIPTION: Example of setting up a Convex HTTP client using CommonJS require syntax.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { ConvexHttpClient, ConvexClient } = require("convex/browser");
const { api } = require("./convex/_generated/api_cjs.cjs");
const httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);
```

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Shows how to create a mutation function that accepts string arguments and performs database operations. Includes validation and optional return value handling.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Updating Typing Status with useEffect in React
DESCRIPTION: This effect hook updates the user's typing status based on message text changes. It sets typing to true when text is entered and false after 1 second of inactivity or when the text is empty.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
useEffect(() => {
  if (newMessageText.length === 0) {
    updateMyPresence({ typing: false });
    return;
  }
  updateMyPresence({ typing: true });
  const timer = setTimeout(() => updateMyPresence({ typing: false }), 1000);
  return () => clearTimeout(timer);
}, [updateMyPresence, newMessageText]);
```

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server for Convex Vector Search App
DESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex vector search example app. It uses npm for package management and running scripts.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running Auth0 Authentication Setup for Convex Chat App
DESCRIPTION: Instructions for setting up Auth0 authentication with Convex for the chat application. Users need to follow the provided link to configure Auth0 and update the client and server configurations.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
## Running the App

Because this app uses authentication, it requires a bit of an additional setup.

Follow these instructions https://docs.convex.dev/auth/auth0 to set up Auth0
with Convex. You will have to update the client in `main.tsx` and the server in
`auth.config.js`.
```

----------------------------------------

TITLE: Running the Development Environment
DESCRIPTION: Commands for installing dependencies and starting the development server
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running the Dall-E Chat Application
DESCRIPTION: Commands to install dependencies and start the development server for the Dall-E storage and action example app. After running these commands, you'll need to set up an OpenAI API key in the Convex dashboard before accessing the app at localhost:3000.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function, including argument validation and database querying.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Session Query Hook in React Component
DESCRIPTION: Implementation of useSessionQuery hook in a React component to execute queries with session context
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const messages = useSessionQuery(api.myModule.myQuery);
...
```

----------------------------------------

TITLE: Creating a Next.js TypeScript Project
DESCRIPTION: Command to bootstrap a new Next.js project with TypeScript support using create-next-app.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --ts
```

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based result handling patterns.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Updating Session Data in Convex Database
DESCRIPTION: Example of updating session data in the Convex database using db.patch operation
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
db.patch(session._id, { userId });
```

----------------------------------------

TITLE: Installing and Running the TypeScript Convex Example App
DESCRIPTION: Commands to install dependencies and start the development server for the TypeScript and Schemas Example App.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running the Users and Authentication Example App in Shell
DESCRIPTION: Command to start the development server for the Users and Authentication example app. This runs the application in development mode, allowing you to test the Clerk authentication implementation.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Referencing Convex Functions as Strings in HTML
DESCRIPTION: Shows the string pattern format for referencing different types of Convex functions when not using a bundler in HTML applications.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/html/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
- `"filename:myQuery"`
- `"directory/filename:myMutation"`
- `"directory/action:default"`
```

----------------------------------------

TITLE: Installing and Running the Zod Schema Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Zod schema validation example application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running Convex Next.js Demo
DESCRIPTION: Commands to install dependencies and start the development server for the Convex and Next.js integration demo. This setup allows for testing server-side rendering and data management features.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running Convex Scheduling Demo
DESCRIPTION: Commands to install dependencies and start the development server for the Convex scheduling example application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running the Custom Errors Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Custom Errors Example App. This will set up the necessary environment to run the application locally.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running the Convex File Storage Example App
DESCRIPTION: Commands for setting up and running the Convex File Storage demo application locally. This installs all dependencies and starts the development server.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running the Authentication Example App with NPM
DESCRIPTION: Command to start the development server for the authentication example app which demonstrates Clerk integration for user management.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Installing Dependencies and Running Convex App
DESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex app example.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running Convex HTTP Action Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex HTTP action example application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running the Convex Search Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex search example application. This allows running the app locally to test the full text search functionality.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/search/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running the Convex GIPHY Action Example App
DESCRIPTION: Commands to install dependencies and start the development server for the GIPHY Action Example App. This setup is required before running the application locally.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running the Next.js Application with Convex
DESCRIPTION: Commands to install dependencies and start the development server for the Next.js application with Convex integration.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Starting the Development Environment
DESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application with file storage capabilities.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running Convex Crons Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex crons example app. This snippet demonstrates the setup process for running the application locally.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing and Running Convex System Tables Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex system tables example application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running the App with npm
DESCRIPTION: Commands to install dependencies and start the development server for the presence typing indicator demo application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Updating User Presence Data with Emoji Selection in React
DESCRIPTION: JSX code for a select element that updates the user's emoji presence. When the user selects a new emoji, it calls updateMyPresence to merge the new emoji with existing presence data.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<select
    defaultValue={myPresence.emoji}
    onChange={e => updateMyPresence({ emoji: e.target.value })}
>
```

----------------------------------------

TITLE: Running the Convex Example App using npm
DESCRIPTION: These bash commands are used to set up and run the Convex example app. First, it installs the necessary dependencies using 'npm install', then starts the development server with 'npm run dev'.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Rendering FacePile Component with Others' Presence Data
DESCRIPTION: JSX code that passes othersPresence data to the FacePile component. It uses the nullish coalescing operator to handle the initial undefined state before data is received from Convex.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
<FacePile othersPresence={othersPresence ?? []} />
```

----------------------------------------

TITLE: Installing and Running React Native Convex Example App
DESCRIPTION: Commands to install dependencies and start the React Native application that uses Convex. This will set up all required packages and launch the Expo development server.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm start
```

----------------------------------------

TITLE: Implementing Time-based Updates in FacePile Component with React Hooks
DESCRIPTION: JavaScript code using useState and useEffect hooks to periodically update the component's time reference. This enables the FacePile to determine which users are considered active or inactive based on their last update time.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const [now, setNow] = useState(Date.now());
useEffect(() => {
  const intervalId = setInterval(() => setNow(Date.now()), UPDATE_MS);
  return () => clearInterval(intervalId);
}, [setNow]);
```

----------------------------------------

TITLE: Configuring Convex for CommonJS Support
DESCRIPTION: JSON configuration to enable CommonJS module generation for Convex API.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "generateCommonJSApi": true
}
```

----------------------------------------

TITLE: Making HTTP Requests to Convex Endpoints
DESCRIPTION: Commands to call the Convex HTTP action endpoints using curl. Shows how to make both GET and POST requests to retrieve messages by author and post new messages.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/http/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export DEPLOYMENT_NAME="tall-sheep-123"
curl "https://$DEPLOYMENT_NAME.convex.site/getMessagesByAuthor?authorNumber=123"
curl -d '{ "author": "User 123", "body": "Hello world" }' \
    -H 'content-type: application/json' "https://$DEPLOYMENT_NAME.convex.site/postMessage"
```

----------------------------------------

TITLE: Running the Convex Presence Demo Application
DESCRIPTION: Command-line instructions for installing dependencies and starting the development server to run the Convex Presence demo application locally.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});
```

----------------------------------------

TITLE: Rendering Active Typing Indicators in JSX
DESCRIPTION: This JSX snippet filters and displays which users are currently typing. It excludes stale presence data and shows typing indicators only for recently active users who have their typing flag set to true.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
(othersPresence ?? [])
  .filter(({ data, updated }) => data.typing && Date.now() - updated < OLD_MS)
  .map(({ user }) => (
    <li key={user}>
      <span>{user}</span>
      <span>
        <i>typing...</i>
      </span>
    </li>
  ));
```

----------------------------------------

TITLE: Installing Convex Backend Package
DESCRIPTION: Command to install the Convex package for integrating backend functionality into the Next.js application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install convex
```

----------------------------------------

TITLE: Running the Convex Development Server
DESCRIPTION: Command to start the development server for the chat application. This initializes both the Convex backend and the frontend application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, validates them, and queries a database table. Shows the basic structure of a Convex query including argument validation and database access.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Installing and Running the Pagination Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex pagination demo application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation, database insertion, and optional return values.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Defining Query with Session Context in Convex
DESCRIPTION: Example of defining a Convex query function with session context using queryWithSession wrapper, demonstrating access to session ID
SOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const myQuery = queryWithSession({
  args: {},
  handler: async (ctx, args) => {
   console.log(ctx.session._id);
    ...
  },
});
```

----------------------------------------

TITLE: Installing and Running Convex TypeScript App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex TypeScript example application.
SOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to define a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to validate arguments, read from the database, and process data before returning it.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that demonstrates argument validation, database querying, and data processing. The function accepts numeric and string parameters and returns database documents.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to define a mutation function in Convex. It includes argument validation and database insertion. The function takes two string arguments and inserts a new message into the database.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Example of a Convex mutation function that handles database writes. Shows argument validation and how to insert data into the database with return values.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that modifies the database. Shows how to validate arguments, insert data, and return results from the mutation.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that demonstrates argument validation and database modifications. The function accepts two string parameters, inserts a document, and returns the inserted record.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet shows how to use a Convex mutation function in a React component. It demonstrates two ways to call the mutation: fire-and-forget and handling the result with a promise.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget and promise-based usage patterns.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data, passing the required arguments to the function.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

----------------------------------------

TITLE: Installing Convex Templates via NPM
DESCRIPTION: Command to create a new Convex project using the npm create command, which will set up a Convex project with a template of your choice.
SOURCE: https://github.com/get-convex/templates/blob/main/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm create convex@latest
```

----------------------------------------

TITLE: Initialize Basic Convex Project
DESCRIPTION: Basic command to create a new Convex project using the npm create command. This will launch an interactive prompt for project configuration.
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm create convex@latest
```

----------------------------------------

TITLE: Create Convex Project with Template
DESCRIPTION: Creates a new Convex project with a specified template using the -t (--template) flag. This example uses the 'bare' template.
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm create convex@latest my-app -- -t bare
```

----------------------------------------

TITLE: Creating a new Convex project with Next.js, Clerk, and shadcn/ui template
DESCRIPTION: Command to generate a new project using Convex's CLI tool with a template that includes Next.js, Clerk authentication, Tailwind CSS, and shadcn/ui components.
SOURCE: https://github.com/get-convex/templates/blob/main/template-nextjs-clerk-shadcn/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm create convex@latest -t nextjs-clerk-shadcn
```

----------------------------------------

TITLE: Creating a New Convex Project with Next.js, Lucia, and shadcn/ui Template
DESCRIPTION: Command to initialize a new project using the Convex CLI with a template that includes Next.js, Lucia authentication, Tailwind CSS, and shadcn/ui components.
SOURCE: https://github.com/get-convex/templates/blob/main/template-nextjs-lucia-shadcn/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm create convex@latest -t nextjs-lucia-shadcn
```

----------------------------------------

TITLE: Creating a New Convex Project with React Template
DESCRIPTION: Command to generate a new Convex project using the react-vite-clerk-shadcn template. This sets up the initial project structure with all the integrated technologies.
SOURCE: https://github.com/get-convex/templates/blob/main/template-react-vite-clerk-shadcn/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm create convex@latest -t react-vite-clerk-shadcn
```

----------------------------------------

TITLE: Using Convex Sharded Counter Component (TypeScript)
DESCRIPTION: TypeScript code demonstrating how to initialize and use the Convex Sharded Counter component in a Convex project.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { components } from "./_generated/api";
import { ShardedCounter } from "@convex-dev/sharded-counter";

const shardedCounter = new ShardedCounter(components.shardedCounter, {
  ...options,
});
```

----------------------------------------

TITLE: Configuring Convex Sharded Counter Component (TypeScript)
DESCRIPTION: TypeScript code to configure the Convex Sharded Counter component in a Convex project's convex.config.ts file.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
// convex/convex.config.ts
import { defineApp } from "convex/server";
import shardedCounter from "@convex-dev/sharded-counter/convex.config";

const app = defineApp();
app.use(shardedCounter);

export default app;
```

----------------------------------------

TITLE: Implementing withConvexProvider Function in TypeScript/React
DESCRIPTION: Implementation of the withConvexProvider higher-order component that initializes a shared Convex client and wraps components with ConvexProvider. Includes type definitions for Props extending JSX.IntrinsicAttributes.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
// Initialized once so all components share the same client.
const client = new ConvexReactClient(CONVEX_URL);

export function withConvexProvider<Props extends JSX.IntrinsicAttributes>(
  Component: FunctionComponent<Props>,
) {
  return function WithConvexProvider(props: Props) {
    return (
      <ConvexProvider client={client}>
        <Component {...props} />
      </ConvexProvider>
    );
  };
}
```

----------------------------------------

TITLE: Using withConvexProvider Component Wrapper in TypeScript/React
DESCRIPTION: Example usage of withConvexProvider HOC to wrap a React component with Convex context. Shows how to apply the provider wrapper to a CommentForm component.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// CommentForm.tsx
export default withConvexProvider(function CommentForm() {
    ... normal component code ...
});
```

----------------------------------------

TITLE: Create Convex Project from GitHub Template
DESCRIPTION: Creates a new Convex project using a GitHub repository as a template by specifying the owner and repository name.
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
npm create convex@latest my-app -- -t thomasballinger/convex-clerk-users-table
```

----------------------------------------

TITLE: Create Convex Project from GitHub Branch
DESCRIPTION: Creates a new Convex project using a specific branch from a GitHub repository template.
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
npm create convex@latest my-app -- -t 'thomasballinger/convex-clerk-users-table#branch'
```

----------------------------------------

TITLE: Create Convex Project in Current Directory
DESCRIPTION: Initializes a new Convex project in the current directory using '.' as the project name.
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
npm create convex@latest .
```

----------------------------------------

TITLE: Installing Convex Sharded Counter Component (npm)
DESCRIPTION: Command to install the Convex Sharded Counter component package using npm.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install @convex-dev/sharded-counter
```

----------------------------------------

TITLE: Installing Convex Astro Template via NPM
DESCRIPTION: Shell command to create a new Convex project using the Astro template through the create-convex CLI tool.
SOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
npm create convex@latest my-app -- --template astro
```

----------------------------------------

TITLE: Creating a New Convex Project
DESCRIPTION: Command to initialize a new Convex project using the 'bare' template which includes TypeScript and ESLint support.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/README.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
npm create convex@latest -t bare
```

----------------------------------------

TITLE: Running Convex Functions via CLI
DESCRIPTION: Command to execute a Convex function named 'myQuery' with JSON parameters using the Convex CLI.
SOURCE: https://github.com/get-convex/templates/blob/main/template-bare/README.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
npx convex run myFunctions:myQuery '{"first": 1, "second": "Hello"}'
```

----------------------------------------

TITLE: Running Convex Development Server
DESCRIPTION: Command to start the Convex development server after setting up Clerk authentication.
SOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npx convex dev
```

----------------------------------------

TITLE: Setting Up Local Development Environment for Convex
DESCRIPTION: Instructions for installing dependencies and starting local development environment for Convex templates.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
npm i
cd example
npm i
npx convex dev
```

----------------------------------------

TITLE: Running Tests and Type Checks for Convex Project
DESCRIPTION: Commands for building, type checking, testing, and linting the project including the example directory.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
rm -rf dist/ && npm run build
npm run typecheck
npm run test
cd example
npm run lint
cd ..
```

----------------------------------------

TITLE: Building the Convex CLI
DESCRIPTION: Commands to build the create-convex CLI tool from source
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
cd create-convex
npm run build
```

----------------------------------------

TITLE: Testing the Convex CLI - Basic Usage
DESCRIPTION: Command to test the basic functionality of the CLI tool by running it directly from the build output
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_1

LANGUAGE: sh
CODE:
```
node <path to here>/create-convex/dist/index.mjs
```

----------------------------------------

TITLE: Testing the Convex CLI - With Template Argument
DESCRIPTION: Command to test the CLI tool with a specific template argument for React with Vite and shadcn
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
node <path to here>/create-convex/dist/index.mjs -t react-vite-shadcn
```

----------------------------------------

TITLE: Installing Bun Package Manager
DESCRIPTION: Command to globally install the Bun package manager using npm.
SOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g bun
```

----------------------------------------

TITLE: Building One-off Package for Convex
DESCRIPTION: Commands to build and create a local package for testing purposes.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
rm -rf dist/ && npm run build
npm pack
```

----------------------------------------

TITLE: Cloning Templates Repository
DESCRIPTION: Command to clone the templates repository with all submodules.
SOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2

LANGUAGE: sh
CODE:
```
git clone --recurse-submodules https://github.com/get-convex/templates/
```

----------------------------------------

TITLE: Using Convex CLI via NPM Create
DESCRIPTION: Command to run the CLI tool using npm create, with required -- separator for passing arguments
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
npm create convex -- -t react-vite-shadcn
```

----------------------------------------

TITLE: Publishing the Convex CLI
DESCRIPTION: Series of commands to version bump, commit, tag and publish a new patch release of the CLI tool to npm
SOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
cd create-convex
npm version patch
git commit -a -m <version number>
git tag v<version number>
npm publish
```

----------------------------------------

TITLE: Deploying New Version of Convex Package
DESCRIPTION: Steps for versioning, validating, and publishing a new package version to npm registry with git tag pushing.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
# this will change the version and commit it (if you run it in the root directory)
npm version patch
npm publish --dry-run
# sanity check files being included
npm publish
git push --tags
```

----------------------------------------

TITLE: Publishing Alpha Release of Convex Package
DESCRIPTION: Commands for creating and publishing an alpha pre-release version of the package.
SOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
npm version prerelease --preid alpha
npm publish --tag alpha
```

----------------------------------------

TITLE: Git Configuration Settings
DESCRIPTION: Git configuration settings for automatic remote branch tracking and reference updating during rebasing.
SOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
[push]
	autoSetupRemote = true
[rebase]
   updateRefs = true
```

----------------------------------------

TITLE: Pulling Repository Updates
DESCRIPTION: Command to pull updates for both main repository and submodules.
SOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: sh
CODE:
```
git pull --recurse-submodules
```

----------------------------------------

TITLE: Template Change Absorption
DESCRIPTION: Command sequence for absorbing changes into a template's history.
SOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4

LANGUAGE: sh
CODE:
```
cd template-foo
just absorb-prepare
```